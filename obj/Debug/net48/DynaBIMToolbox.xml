<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynaBIMToolbox</name>
    </assembly>
    <members>
        <member name="T:GeometryAPI.SolidsAPI">
            <summary>
            Solids generation and handling, directly in the Revit API
            </summary>
        </member>
        <member name="M:GeometryAPI.SolidsAPI.GetWallSolid(Revit.Elements.Wall)">
            <summary>
            Get Dynamo wall and return its solid geometry as Revit API solid
            </summary>
            <param name="hostModelWall"> Wall || A wall instance from the host model </param>
            <returns> Autodesk.DB.Solid || The solid, representing the wall Geometry in the API </returns>
            <search> wall, solid, API </search>
        </member>
        <member name="M:GeometryAPI.SolidsAPI.GetWallSolidTransformed(Revit.Elements.Wall,Autodesk.Revit.DB.RevitLinkInstance)">
            <summary>
            Get the Autodesk.DB.Solid for the specified wall from linked model
            </summary>
            <param name="linkModelWall"> Wall || A wall instance from linked model </param>
            <param name="linkInstance"> LinkInstance || Revit Link Instance </param>
            <returns> Autodesk.DB.Solid || The solid, representing the wall Geometry in the API </returns>
            <search> wall, solid, API </search>
        </member>
        <member name="M:GeometryAPI.SolidsAPI.GetAndUniteElementSolids(Revit.Elements.Element)">
            <summary>
            Get all the solids of an Element, unite them and return the united solid with transformed coordinate system, based on the link instance. Works for all objects, classified as Dynamo Elements, such as Windows, Doors, etc.
            </summary>
            <param name="element"> Element || Revit.Elements.Element </param>
            <returns> Autodesk.DB.Solid || A single solid, representing all element solids in the API </returns>
            <search> element, solid, API </search>
        </member>
        <member name="M:GeometryAPI.SolidsAPI.GetAndUniteElementSolidsTransformed(Revit.Elements.Element,Autodesk.Revit.DB.RevitLinkInstance)">
            <summary>
            Get all the solids of an Element, unite them and return the united solid with transformed coordinate system, based on the link instance. Works for all objects, classified as Dynamo Elements, such as Windows, Doors, etc.
            </summary>
            <param name="element"> Element || Revit.Elements.Element </param>
            <param name="linkInstance"> LinkInstance || Revit Link Instance </param>
            <returns> Autodesk.DB.Solid || A single solid, representing all element solids in the API </returns>
            <search> element, solid, API </search>
        </member>
        <member name="M:GeometryAPI.SolidsAPI.ReturnDynamoSolid(Autodesk.Revit.DB.Solid)">
            <summary>
            Wrap Revit Autodesk.Revit.DB.Solid to get Dynamo solid
            </summary>
            <param name="solid"> Solid || Autodesk.Revit.DB.Solid </param>
            <returns> Autodesk.DesignScript.Geometry || Dynamo Solid </returns>
            <search> solid, API, Dynamo </search>
        </member>
        <member name="M:GeometryAPI.SolidsAPI.RevitAPIExtrusionFromCurve(Autodesk.DesignScript.Geometry.Curve,System.Double,System.Double)">
            <summary>
            Create Autodesk.Revit.DB.Solid from a single curve, by offseting the curve in both direction, creating closed curveloop and extruding it
            </summary>
            <param name="line"> [points] || A straight Dynamo line </param>
            <param name="width"> height || A specified width for the offset </param>
            <param name="height"> Height for the extrusion </param>
            <returns> Autodesk.Revit.DB.Solid || Revit API solid </returns>
            <search> solid, API, Dynamo </search>
        </member>
        <member name="M:GeometryAPI.SolidsAPI.RevitAPIExtrusionFromCurveTransformed(Autodesk.DesignScript.Geometry.Curve,System.Double,System.Double,Autodesk.Revit.DB.RevitLinkInstance)">
            <summary>
            Create Autodesk.Revit.DB.Solid from a single curve, by offseting the curve in both direction, creating closed curveloop, extruding and transforming its coordinate system
            </summary>
            <param name="line"> Line || A straight Dynamo line </param>
            <param name="width"> Double || A specified width for the offset </param>
            <param name="height"> Double || Height for the extrusion </param>
            <param name="linkInstance"> Revit Link Instance </param>
            <returns> Autodesk.Revit.DB.Solid || Revit API solid </returns>
            <search> solid, API, Dynamo </search>
        </member>
        <member name="M:GeometryAPI.SolidsAPI.TranslateSolidVertically(Autodesk.Revit.DB.Solid,System.Double)">
            <summary>
            Translate Autodesk.revit.DB.Solid along the Z axis at the specified distance
            </summary>
            <param name="solid"> Solid || Autodesk.Revit.DB.Solid </param>
            <param name="translation"> Number || A specified distance for vertical translation </param>
            <returns> Autodesk.Revit.DB.Solid || Revit API solid </returns>
            <search> solid, API, Dynamo, translate, vertical </search>
        </member>
        <member name="M:GeometryAPI.SolidsAPI.ElementOrientedBboxSolid(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Returns element oriented bounding box for the specified element, represented as Revit API solid
            </summary>
            <param name="element"> Revit Family Instance || Tested with Windows and Doors </param>
            <param name="point"> Point || Dynamo Point </param>
            <param name="degAngle"> Decimal Degrees || Rotation Angle </param>
            <returns> Autodesk.Revit.DB.Solid || Revit API solid </returns>
            <search> solid, API, boundingbox, element oriented </search>
        </member>
        <member name="M:GeometryAPI.SolidsAPI.ElementOrientedBboxSolidTransformed(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Double,Autodesk.Revit.DB.RevitLinkInstance)">
            <summary>
            Returns element oriented bounding box for the specified element, represented as Revit API solid, transformed, based on the link instance coordinate system
            </summary>
            <param name="element"> Revit Family Instance || Tested with Windows and Doors </param>
            <param name="point"> Point || Dynamo Point </param>
            <param name="degAngle"> Decimal Degrees || Rotation Angle </param>
            <param name="linkInstance"> Revit Link Instance </param>
            <returns> Autodesk.Revit.DB.Solid || Revit API solid </returns>
            <search> solid, API, boundingbox, element oriented </search>
        </member>
        <member name="T:GeometryAPI.SurfacesAPI">
            <summary>
            Surfaces generation and handling, directly in the Revit API
            </summary>
        </member>
        <member name="M:GeometryAPI.SurfacesAPI.WallSurfacesFromRooms(Revit.Elements.Room,System.Double,System.Double)">
            <summary>
            Get a list of Autodesk.Revit.DB.PlanarFace, representing all the wall faces of a room, based on specified height and base offset
            </summary>
            <param name="room"> Room </param>
            <param name="height"> double height </param>
            <param name="baseOffset"> double base offset </param>
            <returns> List[PlanarFace] || List of planar faces, representing wall finish surfaces </returns>
            <search> room, faces, API </search>
        </member>
        <member name="M:GeometryAPI.SurfacesAPI.ReturnDynamoFaces(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            Surface wrapper - gets an Autodesk.Revit.DB.Surface and returns Dynamo surface
            </summary>
            <param name="face"> Autodesk.Revit.DB.PlanarFace || Revit API PlanarFace </param>
            <returns> Dynamo Surface </returns>
            <search> PlanarFace, surface, API </search>
        </member>
        <member name="T:GeometryAPI.BooleanAPI">
            <summary>
            Boolean operations, directly in the Revit API
            </summary>
        </member>
        <member name="M:GeometryAPI.BooleanAPI.RoomFacesSolidIntersection(Revit.Elements.Room,System.Collections.Generic.List{Autodesk.Revit.DB.Solid},System.Double,System.Double)">
            <summary>
            Gets a list of Rooms, as well as Revit API Solids. Constructs room finish faces, based on the input base offset and height and returns all the face intersections
            </summary>
            <param name="room"> Revit.Elements.Rooms || Room element, wrapped through Dynamo </param>
            <param name="solids"> [Autodesk.Revit.DB.Solid] || List of Revit API Solids </param>
            <param name="baseOffset"> Double || Base offset constraint </param>
            <param name="height"> Double || Height </param>
            <returns> [Autodesk.Revit.DB.PlanarFace] || Revit Surfaces </returns>
            <search> room, surface, solid, API </search>
        </member>
        <member name="M:GeometryAPI.BooleanAPI.RoomSurfaceIntersectionAreas(Revit.Elements.Room,System.Collections.Generic.List{Autodesk.Revit.DB.Solid},System.Double,System.Double)">
            <summary>
            Gets a list of Rooms, as well as Revit API Solids. Constructs room finish faces, based on the input base offset and height and returns all the face intersections
            </summary>
            <param name="room"> Revit.Elements.Rooms || Room element, wrapped through Dynamo </param>
            <param name="solids"> [Autodesk.Revit.DB.Solid] || A list of Revit API solids </param>
            <param name="baseOffset"> Double || Base offset constraint </param>
            <param name="height"> Double || Height parameter </param>
            <returns>
            <list type = "bullet">
            <item>
            <description> test1 </description>
            </item>
            <item>
            <description> test2 </description>
            </item>
            <item>
            <description> test3 </description>
            </item>
            <item>
            <description> test4 </description>
            </item>
            </list>
            </returns>
            <search> room, surface, solid, API </search>
        </member>
        <member name="T:Inspect.ElementsData">
            <summary>
            Retrieving and working with different elements' data
            </summary>
        </member>
        <member name="M:Inspect.ElementsData.ReturnSystemTypeName(Revit.Elements.Element)">
            <summary>
            Gets an element, belonging to a system family, e.g. Waals, Roofs, Floors, Ceilings. Works for both linked elements and well as elements in the host model
            </summary>
            <param name="element"> Revit.Elements.Element || Revit element, wrapped through Dynamo </param>
            <returns> string || The type name of the element, eg. in the case of Walls, the name of the wall type </returns>
            <search> system families, type, name </search>
        </member>
        <member name="M:Inspect.ElementsData.GetLinkedWallHostLevelName(Revit.Elements.Wall)">
            <summary>
            Works for Walls, obtained from linked files. The node gets the end point of the wall location curve, gets its Z component and check if the given height corresponds to a level in the host model. 
            It applies a tolerance of a 1 cm. If such level is found, its name will be returned as an output
            </summary>
            <param name="wall"> Revit.Elements.Wall || Revit wall, wrapped through Dynamo </param>
            <returns> string || Level name </returns>
            <search> linked, walls, level </search>
        </member>
        <member name="M:Inspect.ElementsData.GetLinkedWallHostElevation(Revit.Elements.Wall)">
            <summary>
            Returns the host model elevation for the specified linked wall. The elevation is measured as the distance between the wall base curve's endpoint and the Project Base Point
            </summary>
            <param name="wall"> Revit.Elements.Wall || Revit wall, wrapped through Dynamo </param>
            <returns> double || Height elevation </returns>
            <search> linked, wall, elevation </search>
        </member>
        <member name="M:Inspect.ElementsData.EitherOneOfTwoParametersTypeInstance(Revit.Elements.Element,System.String,System.String)">
            <summary>
            This node would check if any of the specified parameters is available in the element, either as type or instance.
            It returns their value in the order they were specified - if a value is found for the first parameter, it will be returned. If not, it will proceed to the second one.
            If no value is found for both, it will return null
            </summary>
            <param name="element"> Revit.Elements.Element || Revit element, wrapped through Dynamo </param>
            <param name="parameterName1"> String || Parameter name </param>
            <param name="parameterName2"> String || Parameter name </param>
            <returns> Object || Parameter value </returns>
            <search> type, instance, parameter, either one </search>
        </member>
        <member name="M:Inspect.ElementsData.LevelElevation(Revit.Elements.Level)">
            <summary>
            Returns the elevation for each specified level. Typically the distance to the Internal Origin 
            </summary>
            <param name="level"> Revit.Elements.Level || Revit level, wrapped through Dynamo </param>
            <returns> double || Level elevation </returns>
            <search> level, elevation </search>
        </member>
        <member name="M:Inspect.ElementsData.LinkedFamilyInstanceElevation(Revit.Elements.Element)">
            <summary>
            Returns the elevation for each family instance, typically the distance to the Project Base Point. 
            Works for families with origin, represented by a location point, such as Wall, Doors and other family instances.
            Note: The end result is rounded
            </summary>
            <param name="element"> Revit.Elements.Element || Revit element, wrapped through Dynamo </param>
            <returns> double || Z elevation </returns>
            <search> linked, familyinstance, family instance, elevation </search>
        </member>
        <member name="M:Inspect.ElementsData.LinkedDoorWindowHostLevelName(Revit.Elements.Element)">
            <summary>
            Returns the name of the host model level for a Door or Window in a linked file. The level is calculated, based on the Family Instance location.
            Sill Height is subtracted from the elevation. The node uses a tolerance of 1 cm. 
            </summary>
            <param name="element"> Revit.Elements.Element || Revit element, wrapped through Dynamo </param>
            <returns> double || Z elevation </returns>
            <search> linked, familyinstance, family instance, elevation </search>
        </member>
        <member name="M:Inspect.ElementsData.HostFamilyInstanceElevation(Revit.Elements.Element)">
            <summary>
            Returns the elevation of a family instance from the host model. Works for elements with Location Point, such as Doors, Windows, etc. 
            Returns the elevation as the distance to Project Base Point.
            </summary>
            <param name="element"> Revit.Elements.Element || Revit element, wrapped through Dynamo </param>
            <returns> double || Z elevation </returns>
            <search> linked, familyinstance, family instance, elevation </search>
        </member>
        <member name="T:Inspect.Lists">
            <summary>
            Collection of nodes for list operations
            </summary>
        </member>
        <member name="M:Inspect.Lists.AnyTrue(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Checks if any of the bools in a given list is True
            </summary>
            <param name="list">  </param>
            <returns> bool || True or False </returns>
            <search> list, any, true </search>
        </member>
        <member name="T:DynaBIMToolbox.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DynaBIMToolbox.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DynaBIMToolbox.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
