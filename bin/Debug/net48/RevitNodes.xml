<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RevitNodes</name>
    </assembly>
    <members>
        <member name="T:Revit.AnalysisDisplay.FaceAnalysisDisplay">
            <summary>
            A Revit Point Analysis Display 
            </summary>
        </member>
        <member name="M:Revit.AnalysisDisplay.FaceAnalysisDisplay.#ctor(Autodesk.Revit.DB.View,Analysis.ISurfaceData{Autodesk.DesignScript.Geometry.UV,System.Double},System.String,System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="data"></param>
            <param name="resultsName"></param>
            <param name="description"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:Revit.AnalysisDisplay.FaceAnalysisDisplay.InternalSetSpatialFieldValues(System.Int32,Analysis.ISurfaceData{Autodesk.DesignScript.Geometry.UV,System.Double},System.String,System.String,System.Type)">
            <summary>
            Set the spatial field values for the current spatial field primitive. The two 
            input sequences should be of the same length.
            </summary>
            <param name="primitiveId"></param>
            <param name="data"></param>
            <param name="schemaName"></param>
            <param name="description"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:Revit.AnalysisDisplay.FaceAnalysisDisplay.ByViewFacePointsAndValues(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Surface,Autodesk.DesignScript.Geometry.UV[],System.Double[],System.String,System.String,System.Type)">
            <summary>
            Show a colored Face Analysis Display in the Revit view.
            </summary>
            <param name="view">The view into which you want to draw the analysis results.</param>
            <param name="surface">The surface which you want to show color.</param>
            <param name="sampleLocations">The locations at which you want to create analysis values.</param>
            <param name="samples">The analysis values at the given locations.</param>
            <param name="name">An optional analysis results name to show on the results legend.</param>
            <param name="description">An optional analysis results description to show on the results legend.</param>
            <param name="unitType">An optional Unit type to provide conversions in the analysis results.</param>
            <returns>A FaceAnalysisDisplay object.</returns>
        </member>
        <member name="M:Revit.AnalysisDisplay.FaceAnalysisDisplay.ByViewAndFaceAnalysisData(Revit.Elements.Views.View,Analysis.SurfaceData,System.String,System.String,System.Type)">
            <summary>
            Show a colored Face Analysis Display in the Revit view.
            </summary>
            <param name="view">The view into which you want to draw the analysis results.</param>
            <param name="data">A collection of SurfaceData objects.</param>
            <param name="name">An optional analysis results name to show on the results legend.</param>
            <param name="description">An optional analysis results description to show on the results legend.</param>
            <param name="unitType">An optional Unit type to provide conversions in the analysis results.</param>
            <returns>A FaceAnalysisDisplay object.</returns>
        </member>
        <member name="T:Revit.AnalysisDisplay.PointAnalysisDisplay">
            <summary>
            A Revit Point Analysis Display 
            </summary>
        </member>
        <member name="M:Revit.AnalysisDisplay.PointAnalysisDisplay.#ctor(Autodesk.Revit.DB.View,Analysis.PointData,System.String,System.String,System.Type)">
            <summary>
            Create a Point Analysis Display in the current view
            </summary>
            <param name="view"></param>
            <param name="data"></param>
            <param name="resultsName"></param>
            <param name="description"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:Revit.AnalysisDisplay.PointAnalysisDisplay.InternalSetSpatialFieldValues(Analysis.IStructuredData{Autodesk.DesignScript.Geometry.Point,System.Double},System.Collections.Generic.List{System.Int32}@,System.String,System.String,System.Type)">
            <summary>
            Set the spatial field values for the current spatial field primitive.  The two 
            input sequences should be of the same length.
            </summary>
            <param name="data"></param>
            <param name="primitiveIds"></param>
            <param name="schemaName"></param>
            <param name="description"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:Revit.AnalysisDisplay.PointAnalysisDisplay.ByViewPointsAndValues(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Point[],System.Double[],System.String,System.String,System.Type)">
            <summary>
            Show a colored Point Analysis Display in the Revit view.
            </summary>
            <param name="view">The view into which you want to draw the analysis results.</param>
            <param name="sampleLocations">The locations at which you want to create analysis values.</param>
            <param name="samples">The analysis values at the given locations.</param>
            <param name="name">An optional analysis results name to show on the results legend.</param>
            <param name="description">An optional analysis results description to show on the results legend.</param>
            <param name="unitType">An optional Unit type to provide conversions in the analysis results.</param>
            <returns>An PointAnalysisDisplay object.</returns>
        </member>
        <member name="M:Revit.AnalysisDisplay.PointAnalysisDisplay.ByViewAndPointAnalysisData(Revit.Elements.Views.View,Analysis.PointData,System.String,System.String,System.Type)">
            <summary>
            Show a colored Point Analysis Display in the Revit view.
            </summary>
            <param name="view">The view into which you want to draw the analysis results.</param>
            <param name="data">A list of PointData objects.</param>
            <param name="name">An optional analysis results name to show on the results legend.</param>
            <param name="description">An optional analysis results description to show on the results legend.</param>
            <param name="unitType">An optional Unit type to provide conversions in the analysis results.</param>
            <returns>An PointAnalysisDisplay object.</returns>
        </member>
        <member name="T:Revit.AnalysisDisplay.VectorAnalysisDisplay">
            <summary>
            A Revit Vector Analysis Display 
            </summary>
        </member>
        <member name="M:Revit.AnalysisDisplay.VectorAnalysisDisplay.#ctor(Autodesk.Revit.DB.View,Analysis.VectorData,System.String,System.String,System.Type)">
            <summary>
            Create a Vector Analysis Display in the current view
            </summary>
            <param name="view"></param>
            <param name="data"></param>
            <param name="resultsName"></param>
            <param name="description"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:Revit.AnalysisDisplay.VectorAnalysisDisplay.InternalSetSpatialFieldValues(System.Int32,Analysis.VectorData,System.String,System.String,System.Type)">
            <summary>
            Set the spatial field values for the current spatial field primitive.  The two 
            input sequences should be of the same length.
            </summary>
            <param name="primitiveId"></param>
            <param name="data"></param>
            <param name="schemaName"></param>
            <param name="description"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:Revit.AnalysisDisplay.VectorAnalysisDisplay.ByViewPointsAndVectorValues(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Point[],Autodesk.DesignScript.Geometry.Vector[],System.String,System.String,System.Type)">
            <summary>
            Show a Vector Analysis Display in the Revit view.
            </summary>
            <param name="view">The view into which you want to draw the analysis results.</param>
            <param name="sampleLocations">The locations at which you want to create analysis values.</param>
            <param name="samples">The analysis values at the given locations.</param>
            <param name="name">An optional analysis results name to show on the results legend.</param>
            <param name="description">An optional analysis results description to show on the results legend.</param>
            <param name="unitType">An optional Unit type to provide conversions in the analysis results.</param>
            <returns>A VectorAnalysisDisplay object.</returns>
        </member>
        <member name="M:Revit.AnalysisDisplay.VectorAnalysisDisplay.ByViewAndVectorAnalysisData(Revit.Elements.Views.View,Analysis.VectorData,System.String,System.String,System.Type)">
            <summary>
            Show a Vector Analysis Display in the Revit view.
            </summary>
            <param name="view">The view into which you want to draw the analysis results.</param>
            <param name="data">A list of VectorData objects.</param>
            <param name="name">An optional analysis results name to show on the results legend.</param>
            <param name="description">An optional analysis results description to show on the results legend.</param>
            <param name="unitType">An optional Unit type to provide conversions in the analysis results.</param>
            <returns>A VectorAnalysisDisplay object.</returns>
        </member>
        <member name="T:Revit.AnalysisDisplay.SpmPrimitiveIdPair">
            <summary>
            Hold a pair of element ID of SpatialFieldManager and primitive ID to
            support serialization.
            </summary>
        </member>
        <member name="T:Revit.AnalysisDisplay.AbstractAnalysisDisplay">
            <summary>
            Superclass for all Revit Analysis Display types
            
            Note: We're using the user facing name from Revit (Analysis Display), rather than the same name that the Revit API
            uses (Spatial Field)
            </summary>
        </member>
        <member name="P:Revit.AnalysisDisplay.AbstractAnalysisDisplay.Document">
            <summary>
            A reference to the current document
            </summary>
        </member>
        <member name="P:Revit.AnalysisDisplay.AbstractAnalysisDisplay.SpatialFieldManager">
            <summary>
            The SpatialFieldManager governing this SpatialFieldPrimitive
            </summary>
        </member>
        <member name="M:Revit.AnalysisDisplay.AbstractAnalysisDisplay.InternalSetSpatialFieldManager(Autodesk.Revit.DB.Analysis.SpatialFieldManager)">
            <summary>
            Set the SpatialFieldManager
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:Revit.AnalysisDisplay.AbstractAnalysisDisplay.GetAnalysisResultSchemaIndex(System.String,System.String,System.Type)">
            <summary>
            Get the AnalysisResultsSchemaIndex for the SpatialFieldManager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.AnalysisDisplay.AbstractAnalysisDisplay.GetSpatialFieldManagerFromView(Autodesk.Revit.DB.View,System.UInt32)">
            <summary>
            Get the SpatialFieldManager for a particular view.  This is a singleton for every view.  Note that the 
            number of values per analysis point is ignored if the SpatialFieldManager has already been obtained
            for this view.  This field cannot be mutated once the SpatialFieldManager is set for a partiular 
            view.
            </summary>
            <param name="view"></param>
            <param name="numValuesPerAnalysisPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.AnalysisDisplay.AbstractAnalysisDisplay.System#IDisposable#Dispose">
            <summary>
            Destroy
            </summary>
        </member>
        <member name="M:Revit.AnalysisDisplay.AbstractAnalysisDisplay.GetElementAndPrimitiveIdFromTrace">
            <summary>
            Set the SpatialFieldManager PrimitiveId from Thread Local Storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.AnalysisDisplay.AbstractAnalysisDisplay.SetElementAndPrimitiveIdsForTrace(Autodesk.Revit.DB.Analysis.SpatialFieldManager,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the SpatialFieldManager and PrimitiveId in Thread Local Storage
            </summary>
            <param name="manager"></param>
            <param name="primitiveIds"></param>
        </member>
        <member name="M:Revit.AnalysisDisplay.AbstractAnalysisDisplay.SetElementAndPrimitiveIdsForTrace">
            <summary>
            Set the current SpatialFieldManager and PrimitiveId in Thread Local Storage
            </summary>
        </member>
        <member name="T:Revit.Application.Document">
            <summary>
            A Revit Document
            </summary>
        </member>
        <member name="P:Revit.Application.Document.InternalDocument">
            <summary>
            Internal reference to the Document
            </summary>
        </member>
        <member name="P:Revit.Application.Document.ActiveView">
            <summary>
            Get the active view for the document
            </summary>
        </member>
        <member name="P:Revit.Application.Document.IsFamilyDocument">
            <summary>
            Is the Document a Family?
            </summary>
        </member>
        <member name="P:Revit.Application.Document.FilePath">
            <summary>
            The full path of the Document.
            </summary>
        </member>
        <member name="P:Revit.Application.Document.Current">
            <summary>
            Get the current document
            </summary>
            <returns></returns>
        </member>
        <member name="P:Revit.Application.Document.WorksharingPath">
            <summary>
            Gets the worksharing path of the current document
            </summary>
        </member>
        <member name="P:Revit.Application.Document.IsCloudPath">
            <summary>
            Whether the Worksharing path represents a path on an Autodesk server such as BIM360.
            </summary>
        </member>
        <member name="M:Revit.Application.Document.PurgeUnused(System.Boolean)">
            <summary>
            Purge unused Elements from the model.
            </summary>
            <param name="fullPurge">Similar to clicking the purge button multiple times in Revit, the node will repeatedly purge until there is nothing left to remove.</param>
            <returns>Purged element ids</returns>
        </member>
        <member name="P:Revit.Application.Document.Location">
            <summary>
            Extracts Latitude and Longitude from Revit
            </summary>
            
            <returns name="Lat">Latitude</returns>
            <returns name="Long">Longitude</returns>
            <search>Latitude, Longitude</search>
        </member>
        <member name="M:Revit.Application.Document.SaveFamilyToFolder(Revit.Elements.Family,System.String)">
            <summary>
            Saves all of the input families at a given location.
            </summary>
            <param name="family">The Revit family to save</param>
            <param name="directoryPath">Directory to save the family to. If directory does not exist, it will be created.</param>
            <returns>File path of saved families</returns>
        </member>
        <member name="P:Revit.Application.Warning.InternalWarning">
            <summary>
            Internal reference to the Document
            </summary>
        </member>
        <member name="P:Revit.Application.Warning.Description">
            <summary>
            Retrieves the description text of the warning.
            </summary>
        </member>
        <member name="P:Revit.Application.Warning.Severity">
            <summary>
            Retrieves the severity of the Warning.
            </summary>
        </member>
        <member name="M:Revit.Application.Warning.GetWarnings(Revit.Application.Document)">
            <summary>
            Returns a list of all warnings from the document.
            </summary>
            <param name="document">The document to get the warnings from</param>
            <returns>List of all warnings</returns>
        </member>
        <member name="M:Revit.Application.Warning.GetFailingElements">
            <summary>
            Retrieves a list of the elements that have caused the failure.
            </summary>
            <returns>The elements that have caused the failure.</returns>
        </member>
        <member name="P:Revit.Application.FamilyDocument.InternalFamilyDocument">
            <summary>
            Internal reference to the Document
            </summary>
        </member>
        <member name="P:Revit.Application.FamilyDocument.Category">
            <summary>
            Retrieves the Category object that represents the category or sub category in which the elements ( this family could generate ) reside.
            </summary>
        </member>
        <member name="P:Revit.Application.FamilyDocument.Parameters">
            <summary>
            All family parameters in this family.
            </summary>
        </member>
        <member name="P:Revit.Application.FamilyDocument.Types">
            <summary>
            All family type names in the family document.
            </summary>
        </member>
        <member name="M:Revit.Application.FamilyDocument.SetCategory(Revit.Elements.Category)">
            <summary>
            Sets the Category of the Family.
            </summary>
            <param name="category">Category to set.</param>
            <returns>The document family</returns>
        </member>
        <member name="M:Revit.Application.FamilyDocument.SetFormula(System.String,System.String)">
            <summary>
            Set the formula of a family parameter (syntax is exactly as Revit, whatever works in Revit's formulas works here).
            </summary>
            <param name="parameterName">The family parameter.</param>
            <param name="formula">The formula string.</param>
            <returns>The document family</returns>
        </member>
        <member name="M:Revit.Application.FamilyDocument.GetFormula(System.String)">
            <summary>
            Gets the formula of a family parameter.
            </summary>
            <param name="parameterName">The family parameter.</param>
            <returns>The family parameter formula.</returns>
        </member>
        <member name="M:Revit.Application.FamilyDocument.GetParameterValueByName(System.String,System.String)">
            <summary>
            Gets the value of a family parameter of the current family type, this applies to all family parameters (instance and type).
            </summary>
            <param name="parameterName">A family parameter of the current type.</param>
            <param name="familyTypeName">The name of the family type.</param>
            <returns>The parameter value.</returns>
        </member>
        <member name="M:Revit.Application.FamilyDocument.SetParameterValueByName(System.String,System.String,System.Object)">
            <summary>
            Set the value of a family parameter of the current family type, this applies to all family parameters (instance and type).
            </summary>
            <param name="familyTypeName">The name of Family Type</param>
            <param name="parameter">A family parameter of the current type.</param>
            <param name="value">The new value for the family parameter.</param>
            <returns>The family document with an updated value for the specified parameter.</returns>
        </member>
        <member name="M:Revit.Application.FamilyDocument.AddParameter(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Add a new family parameter with a given name.
            </summary>
            <param name="parameterName">The name of the new family parameter.</param>
            <param name="parameterGroup">The name of the group to which the family parameter belongs.</param>
            <param name="parameterType">The name of the type of new family parameter.</param>
            <param name="isInstance">Indicates if the new family parameter is instance or type (true if parameter should be instance).</param>
            <returns>The new family parameter.</returns>
        </member>
        <member name="M:Revit.Application.FamilyDocument.DeleteParameter(System.String)">
            <summary>
            Remove an existing family parameter from the family.
            </summary>
            <param name="parameterName">The family parameter name.</param>
            <returns>The id of the deleted family parameter.</returns>
        </member>
        <member name="M:Revit.Application.FamilyDocument.ByDocument(Revit.Application.Document)">
            <summary>
            Get FamilyDocument from a Document 
            if this document is a Family Document.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Area.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Area.InternalSetArea(Autodesk.Revit.DB.Area)">
            <summary>
            Set the internal Revit representation and update the ElementId and UniqueId
            </summary>
            <param name="area"></param>
        </member>
        <member name="P:Revit.Elements.Area.Boundaries">
            <summary>
            Returns the boundary segments of the area.
            </summary>
        </member>
        <member name="M:Revit.Elements.Area.FromExisting(Autodesk.Revit.DB.Area,System.Boolean)">
            <summary>
            Construct an Element from an existing Element in the Document
            </summary>
            <param name="area"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Category.Name">
            <summary>
            The name of the Category.   
            </summary>
        </member>
        <member name="P:Revit.Elements.Category.Id">
            <summary>
            The Id of the category.
            </summary>
        </member>
        <member name="M:Revit.Elements.Category.ByName(System.String)">
            <summary>
            Gets a Revit category by the built-in category name.
            </summary>
            <param name="name">The built in category name.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Category.ById(System.Int32)">
            <summary>
            Gets Revit Built-in category from current document based on category Id
            </summary>
            <param name="id">Category Id as Integer value</param>
            <returns>Category if present in current document.</returns>
        </member>
        <member name="T:Revit.Elements.Coordinates">
            <summary>
            Nodes exposing Revit Document Base and Survey Point
            </summary>
        </member>
        <member name="M:Revit.Elements.Coordinates.GetBaseOrSurveyPoint(System.Boolean)">
            <summary>
            Get Base or SurveyPoint
            </summary>
            <param name="surveypoint"></param>
            <returns></returns>  
        </member>
        <member name="M:Revit.Elements.Coordinates.ProjectRotation">
            <summary>
            Get Project Rotation
            </summary>
            <returns>Rotation in degrees</returns>
        </member>
        <member name="M:Revit.Elements.Coordinates.BasePoint">
            <summary>
            Get Project Base Point
            </summary>
            <returns>Project Base Point</returns>
        </member>
        <member name="M:Revit.Elements.Coordinates.SurveyPoint">
            <summary>
            Get Survey Point
            </summary>
            <returns>Survey Point</returns>
        </member>
        <member name="T:Revit.Elements.CurtainGrid">
            <summary>
            A Revit CurtainGrid
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainGrid.InternalCurtainHolderElement">
            <summary>
            Internal variable containing the wrapped Revit object
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainGrid.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainGrid.NumberOfULines">
            <summary>
            number of U lines
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainGrid.NumberOfVLines">
            <summary>
            number of V lines
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainGrid.NumberOfPanels">
            <summary>
            number of V lines
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainGrid.NumberOfMullions">
            <summary>
            number of V lines
            </summary>
        </member>
        <member name="M:Revit.Elements.CurtainGrid.#ctor(Autodesk.Revit.DB.Element)">
            <summary>
            Create from an existing Revit Element
            </summary>
            <param name="curtainHolderElement"></param>
        </member>
        <member name="M:Revit.Elements.CurtainGrid.InitCurtainGrid(Autodesk.Revit.DB.Element)">
            <summary>
            Initialize a curtain grid
            </summary>
            <param name="curtainHolderElement"></param>
        </member>
        <member name="M:Revit.Elements.CurtainGrid.InitCurtainGrid(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Reference)">
            <summary>
            Initialize a CurtainGrid element
            </summary>
            <param name="curtainHolderElement"></param>
            <param name="faceReference"></param>
        </member>
        <member name="M:Revit.Elements.CurtainGrid.ByElementAndReference(Revit.Elements.Element,Revit.GeometryReferences.ElementFaceReference)">
             <summary>
            get curtain grid from element with curtain grid or grids
             </summary>
             <param name="curtainHolderElement"></param>
             <param name="elementFaceReference"></param>
        </member>
        <member name="M:Revit.Elements.CurtainGrid.ByElement(Revit.Elements.Element)">
             <summary>
            get curtain grid from element with curtain grid or grids
             </summary>
             <param name="curtainHolderElement"></param>
        </member>
        <member name="T:Revit.Elements.CurtainPanel">
            <summary>
            A Revit CurtainPanel
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainPanel.Boundaries">
            <summary>
            Gets curtain panel boundaries
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainPanel.HasPlane">
            <summary>
            Checks if the specific curtain panel is planar
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainPanel.PanelPlane">
            <summary>
            Gets a plane of the given curtain panel, if it is planar
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainPanel.Length">
            <summary>
            Gets the length of the specific curtain panel boundaries
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainPanel.IsRectangular">
            <summary>
            Checks whether the specific curtain panel is rectangular. Returns 
            true if the curtain panel is rectangular. Otherwise returns false
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainPanel.Width">
            <summary>
            Gets the width of the specific curtain panel, if it's rectangular
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainPanel.Height">
            <summary>
            Gets the height of the specific curtain panel, if it's rectangular
            </summary>
        </member>
        <member name="M:Revit.Elements.CurtainPanel.#ctor(Autodesk.Revit.DB.Panel)">
            <summary>
            Create from an existing Revit Element
            </summary>
            <param name="panelElement"></param>
        </member>
        <member name="M:Revit.Elements.CurtainPanel.InitCurtainPanel(Autodesk.Revit.DB.Panel)">
            <summary>
            Initialize a CurtainPanel element
            </summary>
            <param name="panelElement"></param>
        </member>
        <member name="M:Revit.Elements.CurtainPanel.ByElement(Revit.Elements.CurtainPanel)">
             <summary>
            get curtain panel from element  
             </summary>
             <param name="panelElement"></param>
        </member>
        <member name="M:Revit.Elements.CurtainPanel.ByElement(Revit.Elements.Element)">
             <summary>
            get all panels of curtain wall, system or slope glazing roof
             </summary>
             <param name="hostingElement"></param>
        </member>
        <member name="M:Revit.Elements.CurtainPanel.FromExisting(Autodesk.Revit.DB.Panel,System.Boolean)">
            <summary>
            Construct this type from an existing Revit element.
            </summary>
            <param name="panel"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.CurtainPanel.SupportingMullions">
            <summary>
            Gets Mullions hosting the specified curtain panel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.CurtainPanel.AsFamilyInstance">
            <summary>
            Gets family instance from curtain Panel
            </summary>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Dimension">
            <summary>
            Dimension element
            </summary>
        </member>
        <member name="P:Revit.Elements.Dimension.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Dimension.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Dimension.InternalSetElement(Autodesk.Revit.DB.Dimension)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.Dimension.#ctor(Autodesk.Revit.DB.Dimension)">
            <summary>
            Dimension from existing
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.Dimension.#ctor(Autodesk.Revit.DB.View,Autodesk.Revit.DB.Line,Autodesk.Revit.DB.ReferenceArray,System.String,System.String)">
            <summary>
            Dimension by Elements
            </summary>
            <param name="view"></param>
            <param name="line"></param>
            <param name="references"></param>
            <param name="suffix"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Revit.Elements.Dimension.InitElement(Autodesk.Revit.DB.Dimension)">
            <summary>
            Init from existing
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.Dimension.Init(Autodesk.Revit.DB.View,Autodesk.Revit.DB.Line,Autodesk.Revit.DB.ReferenceArray,System.String,System.String)">
            <summary>
            Init by Elements
            </summary>
            <param name="view"></param>
            <param name="line"></param>
            <param name="references"></param>
            <param name="suffix"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Revit.Elements.Dimension.ByElements(Revit.Elements.Views.View,System.Collections.Generic.IEnumerable{Revit.Elements.Element},Autodesk.DesignScript.Geometry.Line,System.String,System.String)">
            <summary>
            Construct a Revit Dimension from at least two elements
            </summary>
            <param name="view">View to place dimension in</param>
            <param name="referenceElements">Elements to dimension</param>
            <param name="line">location of the dimension</param>
            <param name="suffix">Suffix</param>
            <param name="prefix">Prefix</param>
            <returns>Dimension</returns>
        </member>
        <member name="P:Revit.Elements.Dimension.Value">
            <summary>
            Get Dimension Value
            </summary>
        </member>
        <member name="P:Revit.Elements.Dimension.Prefix">
            <summary>
            Get Prefix
            </summary>
        </member>
        <member name="M:Revit.Elements.Dimension.SetPrefix(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set Prefix
            </summary>
            <param name="values">Prefix</param>
        </member>
        <member name="P:Revit.Elements.Dimension.Suffix">
            <summary>
            Get Suffix
            </summary>
        </member>
        <member name="M:Revit.Elements.Dimension.SetSuffix(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set Suffix
            </summary>
            <param name="values">Suffix</param>
        </member>
        <member name="P:Revit.Elements.Dimension.ValueOverride">
            <summary>
            Get Value override
            </summary>
        </member>
        <member name="M:Revit.Elements.Dimension.SetValueOverride(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set Value override
            </summary>
            <param name="values">Value override</param>
        </member>
        <member name="P:Revit.Elements.Dimension.AboveValue">
            <summary>
            The text shown above the segment's value, if the dimension has multiple segments a list of values will be returned.
            </summary>
        </member>
        <member name="P:Revit.Elements.Dimension.BelowValue">
            <summary>
            The text shown below the segment's value.
            </summary>
        </member>
        <member name="M:Revit.Elements.Dimension.SetAboveValue(System.String)">
            <summary>
            Sets the text shown above the segment's value.
            </summary>
            <param name="value">The value to set</param>
            <returns>The dimension element</returns>
        </member>
        <member name="M:Revit.Elements.Dimension.SetBelowValue(System.String)">
            <summary>
            Sets the text shown below the segment's value.
            </summary>
            <param name="value">The value to set</param>
            <returns>The dimension element</returns>
        </member>
        <member name="M:Revit.Elements.Dimension.FromExisting(Autodesk.Revit.DB.Dimension,System.Boolean)">
            <summary>
            From existing element
            </summary>
            <param name="instance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Dimension.GetMidpoint(Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
            GetMidpoint from bounding box
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.DetailCurve">
            <summary>
            Revit Detail Curve
            </summary>
        </member>
        <member name="M:Revit.Elements.DetailCurve.#ctor(Autodesk.Revit.DB.DetailCurve)">
            <summary>
            Construct a detail curve from an existing element
            </summary>
            <param name="element">Revit element</param>
        </member>
        <member name="M:Revit.Elements.DetailCurve.#ctor(Autodesk.Revit.DB.View,Autodesk.Revit.DB.Curve)">
            <summary>
            Construct a detail curve by curve
            </summary>
            <param name="view">View</param>
            <param name="curve">Curve</param>
        </member>
        <member name="M:Revit.Elements.DetailCurve.InitElement(Autodesk.Revit.DB.DetailCurve)">
            <summary>
            Initialize Detail Curve element
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Revit.Elements.DetailCurve.Init(Autodesk.Revit.DB.View,Autodesk.Revit.DB.Curve)">
            <summary>
            Init a new detail curve from curve
            </summary>
            <param name="view"></param>
            <param name="curve"></param>
        </member>
        <member name="M:Revit.Elements.DetailCurve.ByCurve(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Construct a Revit DetailCurve element from a curve
            </summary>
            <param name="view">View to place the detail curve on</param>
            <param name="curve">Curve to create detailcurve from</param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.DetailCurve.Curve">
            <summary>
            Get Geometry Curve
            </summary>
        </member>
        <member name="M:Revit.Elements.DetailCurve.SetCurve(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Set Geometry Curve
            </summary>
        </member>
        <member name="T:Revit.Elements.DimensionType">
            <summary>
            Dimension Type element.
            </summary>
        </member>
        <member name="P:Revit.Elements.DimensionType.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.DimensionType.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.DimensionType.InternalSetElement(Autodesk.Revit.DB.DimensionType)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.DimensionType.#ctor(Autodesk.Revit.DB.DimensionType)">
            <summary>
            DimensionType from existing
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.DimensionType.#ctor(Autodesk.Revit.DB.DimensionType,System.String)">
            <summary>
            DimensionType by duplicating existing.
            </summary>
            <param name="dimType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Revit.Elements.DimensionType.FromExisting(Revit.Elements.Element,System.String)">
            <summary>
            Creates new Dimension Type by duplicating an existing.
            </summary>
            <param name="dimensionType">Dimension Type to duplicate.</param>
            <param name="name">New name that will be assigned to Dimension Type.</param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.DimensionType.StyleType">
            <summary>
            Returns Dimension Style for a givent type.
            </summary>
        </member>
        <member name="M:Revit.Elements.DimensionType.FromExisting(Autodesk.Revit.DB.DimensionType,System.Boolean)">
            <summary>
            From existing element
            </summary>
            <param name="instance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.DirectShapeState">
            <summary>
            This class acts as a representation of a directShape state, we can store it in trace
            and on protogeometry types (in their tags dictionary) to keep track of the state of
            a DirectShape wrapper type, it inherits from SerializeableId so that ElementLifeCycle
            and DocumentEvents continue to function for DirectShapes.
            </summary>
        </member>
        <member name="T:Revit.Elements.DirectShape">
            <summary>
            A Revit DirectShape, which is a wrapper for some other geometrical entities 
            </summary>
        </member>
        <member name="P:Revit.Elements.DirectShape.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.DirectShape.#ctor(Autodesk.Revit.DB.DirectShape)">
            <summary>
            Wrap an existing DirectShape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Revit.Elements.DirectShape.#ctor(Autodesk.DesignScript.Geometry.DesignScriptEntity,System.String,Revit.Elements.Category,Revit.Elements.Material)">
            <summary>
             Internal Constructor for a new DirectShape
            </summary>
        </member>
        <member name="M:Revit.Elements.DirectShape.InitDirectShape(Autodesk.Revit.DB.DirectShape)">
            <summary>
            Initialize a DirectShape element
            </summary>
        </member>
        <member name="M:Revit.Elements.DirectShape.InitDirectShape(Autodesk.DesignScript.Geometry.DesignScriptEntity,System.String,Revit.Elements.Category,Revit.Elements.Material)">
            <summary>
            Initialize a DirectShape element
            </summary>
        </member>
        <member name="M:Revit.Elements.DirectShape.NewDirectShape(System.Collections.Generic.IList{Autodesk.Revit.DB.GeometryObject},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.String,System.String)">
            <summary>
            Create a new DirectShape element from given list of Revit GeometryObjects, document, category, and Iddata
            </summary>
        </member>
        <member name="M:Revit.Elements.DirectShape.InternalSetDirectShape(Autodesk.Revit.DB.DirectShape)">
            <summary>
            SetInternalElement to a DirectShape element
            </summary>
        </member>
        <member name="M:Revit.Elements.DirectShape.InternalSetShape(Autodesk.DesignScript.Geometry.DesignScriptEntity,Autodesk.Revit.DB.ElementId,System.String)">
            <summary>
            Sets the internalDirectShape's shape to point to some geometry,
            this method also generates tessellated geometry from the protogeometry object
            and sets the material of the generated Revit faces
            </summary>
        </member>
        <member name="M:Revit.Elements.DirectShape.InternalSetName(Autodesk.DesignScript.Geometry.DesignScriptEntity,System.String,Revit.Elements.Material,Revit.Elements.Category)">
            <summary>
            Sets the internalDirectShape to have a new name
            if this method detects the default string it generates a more specific name
            </summary>
        </member>
        <member name="M:Revit.Elements.DirectShape.ByGeometry(Autodesk.DesignScript.Geometry.Geometry,Revit.Elements.Category,Revit.Elements.Material,System.String)">
            <summary>
            Create a Revit DirectShape given some geometry, a name for the shape, a Category, and Material.
            The geometry will be tessellated before being placed in the Revit model
            The category of a DirectShape cannot be changed after creation, so
            a new DirectShape will be generated if the category input is changed.
            </summary>
            <param name="geometry">A Solid or Surface that will be tessellated and placed in the Revit model as a DirectShape</param>
            <param name="name">A string name for the DirectShape</param>
            <param name="category">Must be a top level Built-in Category</param>
            <param name="material">A Material to apply to the faces of the DirectShape</param>
            <returns>A DirectShape Element</returns>
        </member>
        <member name="M:Revit.Elements.DirectShape.ByMesh(Autodesk.DesignScript.Geometry.Mesh,Revit.Elements.Category,Revit.Elements.Material,System.String)">
            <summary>
            Create a Revit DirectShape given some geometry, a name for the shape, a Category, and Material.
            The geometry will be tessellated before being placed in the Revit model
            The category of a DirectShape cannot be changed after creation, so
            a new DirectShape will be generated if the category input is changed.
            </summary>
            <param name="mesh">A Mesh that will be tessellated and placed in the Revit model as a DirectShape</param>
            <param name="name">A string name for the DirectShape</param>
            <param name="category">Must be a top level Built-in Category</param>
            <param name="material">A Material to apply to the faces of the DirectShape</param>
            <returns>A DirectShape Element</returns>
        </member>
        <member name="M:Revit.Elements.DirectShape.FromExisting(Autodesk.Revit.DB.DirectShape,System.Boolean)">
            <summary>
            Construct a DirectShape from the Revit document. 
            </summary>
            <param name="directShape"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.DirectShape.ToString">
            <summary>
            Please see InternalSetName method
            </summary>
        </member>
        <member name="T:Revit.Elements.Element">
            <summary>
            Superclass of all Revit element wrappers
            </summary>
        </member>
        <member name="M:Revit.Elements.Element.SafeInit(System.Action)">
            <summary>
            Handling exceptions when calling the initializing function
            </summary>
            <param name="init"></param>
        </member>
        <member name="P:Revit.Elements.Element.Document">
            <summary>
            A reference to the current Document.
            </summary>
        </member>
        <member name="F:Revit.Elements.Element.IsRevitOwned">
            <summary>
            Indicates whether the element is owned by Revit or not.  If the element
            is Revit owned, it should not be deleted by Dispose().
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.Parameters">
            <summary>
            Obtain all of the Parameters from an Element, sorted by Name.
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.Name">
            <summary>
            Get the Name of the Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.BoundingBox">
            <summary>
            Get an Axis-aligned BoundingBox of the Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.Id">
            <summary>
            Get the Element Id for this element
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.UniqueId">
            <summary>
            Get the Element Unique Id for this element
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.IsPinned">
            <summary>
            Get the Element Pinned status
            </summary>
        </member>
        <member name="M:Revit.Elements.Element.AreJoined(Revit.Elements.Element)">
            <summary>
            Checks if two elements are joined
            </summary>
            <param name="otherElement">Second element to check</param>
            <returns>True if the two elements are joined, False otherwise</returns>
        </member>
        <member name="P:Revit.Elements.Element.InternalElement">
            <summary>
            A reference to the element
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.GetCategory">
            <summary>
            Get Element Category
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.ElementType">
            <summary>
            Returns the ElementType for this Element. Returns null if the Element cannot have an ElementType assigned.
            </summary>
            <returns name="ElementType">Element Type or Null.</returns>
        </member>
        <member name="P:Revit.Elements.Element.InternalElementId">
            <summary>
            The element id for this element
            </summary>
        </member>
        <member name="F:Revit.Elements.Element.InternalUniqueId">
            <summary>
            The unique id for this element
            </summary>
        </member>
        <member name="F:Revit.Elements.Element.IsFrozen">
            <summary>
            Set the element's freeze state. If the node is set to freeze
            all the elements for that node will be set to freeze.
            </summary>
        </member>
        <member name="M:Revit.Elements.Element.Dispose">
            <summary>
            Default implementation of dispose that removes the element from the
            document
            </summary>
        </member>
        <member name="M:Revit.Elements.Element.ToString">
            <summary>
            A basic implementation of ToString for Elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Element.Equals(System.Object)">
            <summary>
            Implement Equals() method. 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Element.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Element.Delete(Revit.Elements.Element)">
            <summary>
            Delete the element and any elements that are totally dependent upon the element. 
            </summary>
            <param name="element">The element to delete.</param>
            <returns>The list of element id's deleted, including any dependent elements.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if element is null.</exception>
        </member>
        <member name="M:Revit.Elements.Element.GetParameterByName(System.String)">
            <summary>
            Get a parameter by name of an element
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Element.GetParameterValueByName(System.String)">
            <summary>
            Get the value of one of the element's parameters.
            </summary>
            <param name="parameterName">The name of the parameter whose value you want to obtain.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Element.OverrideColorInView(DSCore.Color)">
            <summary>
            Override the element's color in the active view.
            </summary>
            <param name="color">The color to apply to a solid fill on the element.</param>
        </member>
        <member name="M:Revit.Elements.Element.OverrideInView(Revit.Filter.OverrideGraphicSettings,System.Boolean)">
            <summary>
            Override Elements Graphics Settings in Active View.
            </summary>
            <param name="overrides">Override Graphics Settings.</param>
            <param name="hide">If True given Element will be hidden.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Element.SetParameterByName(System.String,System.Object)">
            <summary>
            Set one of the element's parameters.
            </summary>
            <param name="parameterName">The name of the parameter to set.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Revit.Elements.Element.Geometry">
            <summary>
            Get all of the Geometry associated with this object
            </summary>
        </member>
        <member name="M:Revit.Elements.Element.GetHostedElements(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets all elements hosted by the supplied element
            </summary>
            <param name="includeOpenings">Include rectangular openings in output</param>
            <param name="includeHostedElementsOfJoinedHosts">Include the hosted elements from the multiple joined hosts in output</param>
            <param name="includeEmbeddedWalls">Include embedded walls in output</param>
            <param name="includeSharedEmbeddedInserts">Include shared embedded elements in output</param>
            <returns>Hosted Elements</returns>
        </member>
        <member name="M:Revit.Elements.Element.SetPinnedStatus(System.Boolean)">
            <summary>
            Sets an existing element's pinned status
            </summary>
            <param name="pinned">Value for pin status true/false</param>
        </member>
        <member name="M:Revit.Elements.Element.InternalGeometry(System.Boolean)">
            <summary>
            Extract the Revit GeometryObject's from a Revit Element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Element.CollectConcreteGeometry(Autodesk.Revit.DB.GeometryElement,System.Boolean)">
            <summary>
            Collects the concrete GeometryObject's in a GeometryElement, which is a recursive collection of GeometryObject's.
            </summary>
            <param name="geometryElement">The Geometry collection</param>
            <param name="useSymbolGeometry">When encountering a GeometryInstance, use GetSymbolGeometry() which obtains usable Reference objects</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Element.InternalGeometry``1(System.Boolean)">
            <summary>
            A generic method extract all GeometryObject's of the supplied type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Element.Solids">
            <summary>
            The Solids in this Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.Curves">
            <summary>
            The Curves in this Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.Faces">
            <summary>
            The Faces in this Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.ElementCurveReferences">
            <summary>
            The ElementCurveReference's in this Element.  Useful for downstream
            Element creation.
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.ElementFaceReferences">
            <summary>
            The ElementFaceReference's in this Element.  Useful for downstream
            Element creation.
            </summary>
        </member>
        <member name="P:Revit.Elements.Element.IsAlive">
            <summary>
            Is this element still alive in Revit, and good to be drawn, queried etc.
            </summary>
        </member>
        <member name="M:Revit.Elements.Element.GetChildElements">
            <summary>
            Gets the child Elements of the current Element.
            </summary>
            <returns>Child Elements.</returns>
        </member>
        <member name="M:Revit.Elements.Element.GetParentElement">
            <summary>
            Gets the parent element of the Element.
            </summary>
            <returns>Parent Element</returns>
        </member>
        <member name="M:Revit.Elements.Element.GetJoinedElements">
            <summary>
            Finds the elements whose geometry is joined with the given element.
            </summary>
            <returns>All elements whose geometry is joined to the given element.</returns>
        </member>
        <member name="M:Revit.Elements.Element.GetIntersectingElementsOfCategory(Revit.Elements.Category)">
            <summary>
            Gets all Elements intersecting the input element, that are of a specific category.
            </summary>
            <param name="category">Category of Elements to check intersection against</param>
            <returns>List of intersection elements of the specified category</returns>
        </member>
        <member name="M:Revit.Elements.Element.UnjoinGeometry(Revit.Elements.Element)">
            <summary>
            Unjoin the geometry of two Elements.
            </summary>
            <param name="otherElement">Other element to unjoin from the element.</param>
            <returns>The input elements with their geometry unjoined.</returns>
        </member>
        <member name="M:Revit.Elements.Element.UnjoinAllGeometry(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Unjoins the geometry of all elements from each other if they are joined.
            This performs only one transaction in Revit.
            </summary>
            <param name="elements">List of elements to unjoin from each other</param>
            <returns>All input Elements, with their geometry now unjoined from each other.</returns>
        </member>
        <member name="M:Revit.Elements.Element.SetGeometryJoinOrder(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Sets the order in which the geometry of two elements is joined.
            </summary>
            <param name="cuttingElement">The element that should be cutting the other element</param>
            <param name="otherElement">The other element that is being cut by the cuttingElement</param>
            <returns>Input elements with the geometry join order updated.</returns>
        </member>
        <member name="M:Revit.Elements.Element.JoinGeometry(Revit.Elements.Element)">
            <summary>
            Joins the geometry of two elements, if they are intersecting.
            </summary>
            <param name="otherElement">Other element to join with</param>
            <returns>The two joined elements</returns>
        </member>
        <member name="M:Revit.Elements.Element.SetLocation(Autodesk.DesignScript.Geometry.Geometry)">
            <summary>
            Update an existing element's location
            </summary>
            <param name="geometry">New Location Point or Curve</param>
        </member>
        <member name="M:Revit.Elements.Element.GetLocation">
            <summary>
            Get an existing element's location
            </summary>
            <returns>Location Geometry</returns>
        </member>
        <member name="M:Revit.Elements.Element.MoveByVector(Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Move Revit Element by Vector
            </summary>
            <param name="vector">Translation Vector</param>
        </member>
        <member name="M:Revit.Elements.Element.GetMaterials(System.Boolean)">
            <summary>
            Get Material Names from a Revit Element
            </summary>
            <param name="paintMaterials">Paint Materials</param>
            <returns>List of Names</returns>
        </member>
        <member name="T:Revit.Elements.AbstractFamilyInstance">
            <summary>
            An abstract Revit FamilyInstance - implementors include FamilyInstance, AdaptiveComponent, StructuralFraming
            </summary>
        </member>
        <member name="P:Revit.Elements.AbstractFamilyInstance.InternalFamilyInstance">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="P:Revit.Elements.AbstractFamilyInstance.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="T:Revit.Elements.CurveByPoints">
            <summary>
            A Revit Curve By Points
            </summary>
        </member>
        <member name="M:Revit.Elements.CurveByPoints.#ctor(Autodesk.Revit.DB.CurveByPoints)">
            <summary>
            Construct a model curve from the document.  The result is Dynamo owned
            </summary>
            <param name="curveByPoints"></param>
        </member>
        <member name="M:Revit.Elements.CurveByPoints.InitCurveByPoints(Autodesk.Revit.DB.CurveByPoints)">
            <summary>
            </summary>
            <param name="curveByPoints"></param>
        </member>
        <member name="M:Revit.Elements.CurveByPoints.ByReferencePoints(Revit.Elements.ReferencePoint[],System.Boolean)">
            <summary>
            Construct a Revit CurveByPoints Element (a CurveElement) from a collection of ReferencePoint's
            </summary>
            <param name="points"></param>
            <param name="isReferenceLine"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.CurveByPoints.FromExisting(Autodesk.Revit.DB.CurveByPoints,System.Boolean)">
            <summary>
            Construct a Revit ModelCurve element from an existing element.
            </summary>
            <param name="curveByPoints"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.CurveElement.InternalCurveElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="P:Revit.Elements.CurveElement.ElementCurveReference">
            <summary>
            Obtain the reference curve for this ModelCurve
            </summary>
        </member>
        <member name="P:Revit.Elements.CurveElement.Curve">
            <summary>
            Obtain the geometry curve for this geometry curve
            </summary>
        </member>
        <member name="M:Revit.Elements.CurveElement.InternalSetCurve(Autodesk.Revit.DB.Curve)">
            <summary>
            Set the geometry curve used by the ModelCurve
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Revit.Elements.CurveElement.InternalSetCurveElement(Autodesk.Revit.DB.CurveElement)">
            <summary>
            Set the internal model curve along with its id's
            </summary>
            <param name="curveElement"></param>
        </member>
        <member name="M:Revit.Elements.CurveElement.Tessellate(Autodesk.DesignScript.Interfaces.IRenderPackage,Autodesk.DesignScript.Interfaces.TessellationParameters)">
            <summary>
            Empty method - we don't want to tessellate curves automatically
            but it seems we need this method to correctly import this library into Dynamo.
            See description in base class.
            </summary>
            <param name="package"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:Revit.Elements.ElevationMarker.InternalMarker">
            <summary>
            An internal handle on the ElevationMarker
            </summary>
        </member>
        <member name="P:Revit.Elements.ElevationMarker.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.ElevationMarker.#ctor(Autodesk.Revit.DB.ElevationMarker)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.ElevationMarker.InitElevationMarker(Autodesk.Revit.DB.ElevationMarker)">
            <summary>
            Initialize a ElevationMarker element
            </summary>
        </member>
        <member name="M:Revit.Elements.ElevationMarker.InternalSetElevationMarker(Autodesk.Revit.DB.ElevationMarker)">
            <summary>
            Set the InternalMarker property and the associated element id and unique id
            </summary>
            <param name="marker"></param>
        </member>
        <member name="M:Revit.Elements.ElevationMarker.ByViewTypeLocation(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Int32)">
            <summary>
            Creates a new ElevationMarker.
            </summary>
            <param name="viewFamilyType">The ViewFamilyType that will be used by all elevations hosted on the new ElevationMarker.</param>
            <param name="location">The desired origin for the ElevationMarker.</param>
            <param name="initialViewScale">The view scale will be automatically applied to new elevations created on the ElevationMarker. The scale is the ratio of true model size to paper size (e.g. input 100 for 1:100 scale).</param>
            <returns>The new ElevationMarker element.</returns>
        </member>
        <member name="M:Revit.Elements.ElevationMarker.CreateElevationByMarkerIndex(Revit.Elements.Views.View,System.Int32)">
            <summary>
            Creates a new elevation ViewSection on the ElevationMarker at the desired index.
            </summary>
            <param name="planView">The PlanView in which the ElevationMarker is visible. The new elevation ViewSection will derive its extents and inherit settings from the ViewPlan.</param>
            <param name="index">The index on the ElevationMarker where the new elevation ViewSection will be placed. The elevation marker can have up to four views, indexed from 0 to 3.</param>
            <returns>The new elevation ViewSection.</returns>
        </member>
        <member name="M:Revit.Elements.ElevationMarker.GetView(System.Int32)">
            <summary>
            Gets the ViewSection for the index of the ElevationMarker.
            </summary>
            <param name="index">The index of the ElevationMarker for which a ViewSection will be returned.</param>
            <returns>ViewSection at the ElevationMarker index</returns>
        </member>
        <member name="P:Revit.Elements.ElevationMarker.CurrentViewCount">
            <summary>
            The current number of views hosted by this ElevationMarker.
            </summary>
        </member>
        <member name="M:Revit.Elements.ElevationMarker.FromExisting(Autodesk.Revit.DB.ElevationMarker,System.Boolean)">
            <summary>
            Create a ElevationMarker from a user selected Element.
            </summary>
            <param name="marker"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.ElementType">
            <summary>
            A Revit ElementType
            </summary>
        </member>
        <member name="P:Revit.Elements.ElementType.InternalElementType">
            <summary>
            An internal reference to the ElementType.
            </summary>
        </member>
        <member name="P:Revit.Elements.ElementType.InternalElement">
            <summary>
            Reference to the Element.
            </summary>
        </member>
        <member name="M:Revit.Elements.ElementType.#ctor(Autodesk.Revit.DB.ElementType)">
            <summary>
            Protected constructor for the Element.
            </summary>
            <param name="elementType"></param>
        </member>
        <member name="M:Revit.Elements.ElementType.InitElementType(Autodesk.Revit.DB.ElementType)">
            <summary>
            Initialize a ElementType element
            and sets the ElementType property, element id, and unique id.
            </summary>
            <param name="elementType"></param>
        </member>
        <member name="P:Revit.Elements.ElementType.Name">
            <summary>
            The name of the ElementType.
            </summary>
        </member>
        <member name="P:Revit.Elements.ElementType.FamilyName">
            <summary>
            The FamilyName of the ElementType.
            </summary>
        </member>
        <member name="P:Revit.Elements.ElementType.CanBeDeleted">
            <summary>
            Determine if this ElementType can be deleted.
            </summary>
        </member>
        <member name="P:Revit.Elements.ElementType.CanBeCopied">
            <summary>
            Determine if this ElementType can be copied.
            </summary>
        </member>
        <member name="P:Revit.Elements.ElementType.CanBeRenamed">
            <summary>
            Determine if this ElementType can be renamed.
            </summary>
        </member>
        <member name="M:Revit.Elements.ElementType.Duplicate(System.String)">
            <summary>
            Duplicates an existing element type and assigns it a new name.
            </summary>
            <param name="name">The new name of the element type.</param>
            <returns>The duplicated element type.</returns>
        </member>
        <member name="M:Revit.Elements.ElementType.ByName(System.String)">
            <summary>
            Returns the type Element with the given name.
            </summary>
            <param name="name">Name of the type</param>
            <returns>Type Element</returns>
        </member>
        <member name="M:Revit.Elements.ElementType.FromExisting(Autodesk.Revit.DB.ElementType,System.Boolean)">
            <summary>
            Create a ElementType from a user selected Element.
            </summary>
            <param name="elementType"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ElementType.GetPreviewImage(System.Int32)">
            <summary>
            Get the preview image of an element. This image is similar to what is seen in
            the Revit UI when selecting the type of an element.
            </summary>
            <param name="size">The width and height of the preview image in pixels.</param>
            <returns>The preview image. null if there is no preview image.</returns>
        </member>
        <member name="T:Revit.Elements.FilledRegion">
            <summary>
            Revit filled Region
            </summary>
        </member>
        <member name="P:Revit.Elements.FilledRegion.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.FilledRegion.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.FilledRegion.InternalSetElement(Autodesk.Revit.DB.FilledRegion)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
        </member>
        <member name="M:Revit.Elements.FilledRegion.#ctor(Autodesk.Revit.DB.FilledRegion)">
            <summary>
            Constructor
            </summary>
            <param name="FilledRegion"></param>
        </member>
        <member name="M:Revit.Elements.FilledRegion.#ctor(Autodesk.Revit.DB.View,Autodesk.Revit.DB.ElementId,System.Collections.Generic.List{Autodesk.Revit.DB.CurveLoop})">
            <summary>
            Create Filled Region by Curves
            </summary>
            <param name="view"></param>
            <param name="typeId"></param>
            <param name="boundary"></param>
        </member>
        <member name="M:Revit.Elements.FilledRegion.InitElement(Autodesk.Revit.DB.FilledRegion)">
            <summary>
            Init element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.FilledRegion.Init(Autodesk.Revit.DB.View,Autodesk.Revit.DB.ElementId,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.CurveLoop})">
            <summary>
            Init Filled Region by Curves
            </summary>
            <param name="view"></param>
            <param name="typeId"></param>
            <param name="boundary"></param>
        </member>
        <member name="M:Revit.Elements.FilledRegion.ByCurves(Revit.Elements.Views.View,System.Collections.Generic.IEnumerable{Autodesk.DesignScript.Geometry.Curve},Revit.Elements.FilledRegionType)">
            <summary>
            Construct a Revit FilledRegion element by Curves
            </summary>
            <param name="view">View to place filled region on</param>
            <param name="boundary">Boundary curves</param>
            <param name="regionType">Region Type</param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.FilledRegionType">
            <summary>
            Revit filled Region Type
            </summary>
        </member>
        <member name="P:Revit.Elements.FilledRegionType.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Elements.FilledRegionType.#ctor(Autodesk.Revit.DB.FilledRegionType)">
            <summary>
            FilledRegionType
            </summary>
            <param name="FilledRegion"></param>
        </member>
        <member name="M:Revit.Elements.FilledRegionType.ByName(System.String)">
            <summary>
            Select a FilledRegionType from the current document by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.FilledRegionType.Name">
            <summary>
            Get Name
            </summary>
        </member>
        <member name="P:Revit.Elements.FilledRegionType.Color">
            <summary>
            Get Color
            </summary>
        </member>
        <member name="P:Revit.Elements.FilledRegionType.FillPatternId">
            <summary>
            Get FillPatternId
            </summary>
        </member>
        <member name="M:Revit.Elements.FilledRegionType.FromExisting(Autodesk.Revit.DB.FilledRegionType,System.Boolean)">
            <summary>
            Create from existing
            </summary>
            <param name="instance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.GlobalParameter">
            <summary>
            Revit Global Parameters
            </summary>
        </member>
        <member name="P:Revit.Elements.GlobalParameter.InternalGlobalParameter">
            <summary>
            Internal reference to Element
            </summary>
        </member>
        <member name="P:Revit.Elements.GlobalParameter.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.GlobalParameter.#ctor(Autodesk.Revit.DB.GlobalParameter)">
            <summary>
            Private constructor for wrapping an existing Element
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Revit.Elements.GlobalParameter.#ctor(System.String,Autodesk.Revit.DB.ParameterType)">
            <summary>
            GlobalParameter
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:Revit.Elements.GlobalParameter.InitGlobalParameter(Autodesk.Revit.DB.GlobalParameter)">
            <summary>
            Initialize a GlobalParameter element
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:Revit.Elements.GlobalParameter.InitGlobalParameter(System.String,Autodesk.Revit.DB.ParameterType)">
            <summary>
            Initialize a GlobalParameter element
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:Revit.Elements.GlobalParameter.InternalSetGlobalParameter(Autodesk.Revit.DB.GlobalParameter)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:Revit.Elements.GlobalParameter.FindByName(System.String)">
            <summary>
            Find Global Parameter by Name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.GlobalParameter.Name">
            <summary>
            Get Name
            </summary>
        </member>
        <member name="P:Revit.Elements.GlobalParameter.Value">
            <summary>
            Get Global Parameter Value
            </summary>
        </member>
        <member name="M:Revit.Elements.GlobalParameter.SetValue(Revit.Elements.GlobalParameter,System.Object)">
            <summary>
            Set Global Parameter Value
            </summary>
            <param name="parameter"></param>
            <param name="value"></param>
        </member>
        <member name="M:Revit.Elements.GlobalParameter.SetValueToElementId(Revit.Elements.GlobalParameter,System.Int32)">
            <summary>
            Set Global Parameter Value to an Element ID from Integer
            </summary>
            <param name="parameter"></param>
            <param name="elementId"></param>
        </member>
        <member name="P:Revit.Elements.GlobalParameter.ParameterGroup">
            <summary>
            Get Parameter Group
            </summary>
        </member>
        <member name="P:Revit.Elements.GlobalParameter.Visible">
            <summary>
            Get Parameter Visibility
            </summary>
        </member>
        <member name="P:Revit.Elements.GlobalParameter.ParameterType">
            <summary>
            Get Parameter Type
            </summary>
        </member>
        <member name="M:Revit.Elements.GlobalParameter.ByName(System.String,System.String)">
            <summary>
            Create a new Global Parameter by Name and Type
            </summary>
            <param name="name">Name fo the parameter</param>
            <param name="parameterType">Parameter type</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.GlobalParameter.FromExisting(Autodesk.Revit.DB.GlobalParameter,System.Boolean)">
            <summary>
            Wrap an existing Element in the associated DS type
            </summary>
            <param name="parameter"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.FamilyParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyParameter.IsReadOnly">
            <summary>
            Check if the Parameter is read only
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyParameter.IsShared">
            <summary>
            Check if the Parameter is shared
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyParameter.Group">
            <summary>
            Get the parameter's group
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyParameter.ParameterType">
            <summary>
            Get the parameter type
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyParameter.Id">
            <summary>
            Get the parameter's element Id
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyParameter.UnitType">
            <summary>
            Get the parameter's unit type
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyParameter.StorageType">
            <summary>
            Get Parameter Storage Type
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyParameter.CanAssignFormula">
            <summary>
            Indicates if this parameter can be assigned a formula.
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyParameter.IsReporting">
            <summary>
            Indicates if the parameter is a reporting parameter.
            </summary>
        </member>
        <member name="P:Revit.Elements.Group.InternalGroup">
            <summary>
            An internal handle on the Revit group
            </summary>
        </member>
        <member name="P:Revit.Elements.Group.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Group.#ctor(Autodesk.Revit.DB.Group)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Group.InitGroup(Autodesk.Revit.DB.Group)">
            <summary>
            Initialize a group element
            </summary>
        </member>
        <member name="M:Revit.Elements.Group.ByElements(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Creates a new type of group, with all of the input elements.
            </summary>
            <param name="elements">Revit elements to group.</param>
            <returns>The new group type</returns>
        </member>
        <member name="M:Revit.Elements.Group.PlaceInstance(Autodesk.DesignScript.Geometry.Point,Revit.Elements.Element)">
            <summary>
            Place an instance of a Model Group into the Autodesk Revit document, using a location and a group type.
            </summary>
            <param name="location">The point to place the group.</param>
            <param name="groupType">The type of group to place.</param>
            <returns>The new group instance.</returns>
        </member>
        <member name="P:Revit.Elements.Group.Location">
            <summary>
            Get the groups physical location whitin the project.
            </summary>
        </member>
        <member name="P:Revit.Elements.Group.GroupType">
            <summary>
            Get the group type.
            </summary>
        </member>
        <member name="P:Revit.Elements.Group.IsAttached">
            <summary>
            Indicates wether or not this group is attached to a parent group.
            </summary>
        </member>
        <member name="P:Revit.Elements.Group.AttachedDetailGroup">
            <summary>
            Returns the attached detail groups available for this group.
            </summary>
        </member>
        <member name="M:Revit.Elements.Group.GetMembers">
            <summary>
            Retrieves all the element of the group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Group.UngroupElements">
            <summary>
            Ungroups the group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Group.FromExisting(Autodesk.Revit.DB.Group,System.Boolean)">
            <summary>
            Create a Group from a user selected Element.
            </summary>
            <param name="group"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.PathOfTravel">
            <summary>
            PathOfTravel Element.
            </summary>
        </member>
        <member name="F:Revit.Elements.PathOfTravel.m_rvtPathOfTravel">
            <summary>
            An internal handle on the Revit PathOfTravel element.
            </summary>
        </member>
        <member name="P:Revit.Elements.PathOfTravel.InternalElement">
            <summary>
            Reference to Revit PathOfTravel Element.
            </summary>
        </member>
        <member name="M:Revit.Elements.PathOfTravel.#ctor(Autodesk.Revit.DB.Analysis.PathOfTravel)">
            <summary>
            PathOfTravel from existing
            </summary>
            <param name="rvtPathOfTravel">Revit PathOfTavel element</param>
        </member>
        <member name="M:Revit.Elements.PathOfTravel.LongestOfShortestExitPaths(Revit.Elements.Views.FloorPlanView,Autodesk.DesignScript.Geometry.Point[])">
            <summary>
            Calculates the longest PathOfTravel(s) of all shortest paths from rooms in the floor plan to the specified exit points.
            </summary>
            <param name="floorPlan">Floor plan view for which rooms will be used to retrieve longest paths to the specified exit points.</param>
            <param name="endPtsList">List of end (exit) points.</param>
            <returns>List of PathOfTravel elements corresponding to the longest of shortest exit paths from rooms.</returns>
        </member>
        <member name="M:Revit.Elements.PathOfTravel.ByFloorPlanPoints(Revit.Elements.Views.FloorPlanView,Autodesk.DesignScript.Geometry.Point[],Autodesk.DesignScript.Geometry.Point[],System.Boolean)">
            <summary>
            Constructs a list of PathOfTravel elements in a floor plan view between the specified start points and end points.
            </summary>
            <param name="floorPlan">Floor plan view to place paths of travel on</param>
            <param name="startPtsList">List of start points</param>
            <param name="endPtsList">List of end points</param>
            <param name="manyToMany">If true, paths are created from every point in the start point list to all points in the end point list. If false, a path is created from every point in the start point list to a corresponding point in the end point list with the same index. The two lists must have the same size when not creating many-to-many paths.</param>
            <returns>List of PathOfTravel elements; can contain null elements if there is no path between some points.</returns>
        </member>
        <member name="M:Revit.Elements.PathOfTravel.GetWayPoints">
            <summary>
            Returns the WayPoints set from PathOfTravel element.
            </summary>
            <returns>List of WayPoints for the given PathOfTravel element.</returns>
        </member>
        <member name="M:Revit.Elements.PathOfTravel.RemoveWayPoint(System.Int32)">
            <summary>
            Removes WayPoint at the specified index from PathOfTravel element.
            </summary>
            <param name="index">Index of the WayPoint to be removed from the PathOfTravel element.</param>
            <returns>The PathOfTravel element after the WayPoint was rmnoved.</returns>
        </member>
        <member name="M:Revit.Elements.PathOfTravel.InsertWayPoint(Autodesk.DesignScript.Geometry.Point,System.Int32)">
            <summary>
            Inserts a WayPoint to PathOfTravel element at the specified index.
            </summary>
            <param name="wayPoint">The waypoint to insert.</param>
            <param name="index">The index to insert the waypoint at.</param>
            <returns>The PathOfTravel element after the WayPoint was inserted.</returns>
        </member>
        <member name="M:Revit.Elements.PathOfTravel.SetWayPoint(Autodesk.DesignScript.Geometry.Point,System.Int32)">
            <summary>
            Updates WayPoint at the specified index to the new specified position.
            </summary>
            <param name="newPosition">The position to which WayPoint will be set.</param>
            <param name="index">The index of WayPoint to update.</param>
            <returns>The PathOfTravel element after the WayPoint was set.</returns>
        </member>
        <member name="M:Revit.Elements.PathOfTravel.Update(Revit.Elements.PathOfTravel[])">
            <summary>
            Updates existing PathOfTravel.
            </summary>
        </member>
        <member name="M:Revit.Elements.PathOfTravel.FromExisting(Autodesk.Revit.DB.Analysis.PathOfTravel,System.Boolean)">
            <summary>
            Create from existing
            </summary>
            <param name="rvtPathOfTravel">Existing Revit PathOfTravel element</param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Revit.Elements.PathOfTravel.InternalLongestOfShortestExitPaths(Autodesk.Revit.DB.View,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.XYZ})" -->
        <member name="M:Revit.Elements.PathOfTravel.InternalByViewEndPoints(Autodesk.Revit.DB.View,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.XYZ},System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.XYZ})">
            <summary>
            Construct a new Revit PathOfTravel in a floor plan view between the specified start point and end point
            </summary>
            <param name="rvtView"></param>
            <param name="startPoints"></param>
            <param name="endPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.PathOfTravel.InitPathOfTravel(Autodesk.Revit.DB.Analysis.PathOfTravel)">
            <summary>
            Initialize a PathOfTravel element from existing Revit element.
            </summary>
        </member>
        <member name="T:Revit.Elements.RoofType">
            <summary>
            A Revit RoofType
            </summary>
        </member>
        <member name="P:Revit.Elements.RoofType.InternalRoofType">
            <summary>
            An internal reference to the RoofType
            </summary>
        </member>
        <member name="M:Revit.Elements.RoofType.#ctor(Autodesk.Revit.DB.RoofType)">
            <summary>
            Private constructor for the Element
            </summary>
            <param name="roofType"></param>
        </member>
        <member name="P:Revit.Elements.RoofType.Name">
            <summary>
            The name of the RoofType
            </summary>
        </member>
        <member name="M:Revit.Elements.RoofType.ByName(System.String)">
            <summary>
            Select a RoofType from the document given 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.RoofType.FromExisting(Autodesk.Revit.DB.RoofType,System.Boolean)">
            <summary>
            Create a RoofType from a user selected Element.
            </summary>
            <param name="RoofType"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.RoofType.GetThermalProperties">
            <summary>
            The calculated and settable thermal properties of the RoofType.
            </summary>
            <returns name = "Absorptance">Value of absorptance.</returns>
            <returns name = "HeatTransferCoefficient">The heat transfer coefficient value (U-Value).</returns>
            <returns name = "Roughness">Value of roughness.</returns>
            <returns name = "ThermalMass">The calculated thermal mass value.</returns>
            <returns name = "ThermalResistance">The calculated thermal resistance value (R-Value).</returns>
        </member>
        <member name="T:Revit.Elements.Roof">
            <summary>
            MassLevelData
            </summary>
        </member>
        <member name="P:Revit.Elements.Roof.InternalRoof">
            <summary>
            An internal handle on the RoofBase
            </summary>
        </member>
        <member name="P:Revit.Elements.Roof.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Roof.#ctor(Autodesk.Revit.DB.RoofBase)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Roof.#ctor(Autodesk.Revit.DB.CurveArray,Autodesk.Revit.DB.ReferencePlane,Autodesk.Revit.DB.Level,Autodesk.Revit.DB.RoofType,System.Double,System.Double)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Roof.InitRoof(Autodesk.Revit.DB.RoofBase)">
            <summary>
            Initialize a roof element
            </summary>
        </member>
        <member name="M:Revit.Elements.Roof.InitRoof(Autodesk.Revit.DB.CurveArray,Autodesk.Revit.DB.ReferencePlane,Autodesk.Revit.DB.Level,Autodesk.Revit.DB.RoofType,System.Double,System.Double)">
            <summary>
            Initialize a roof element
            </summary>
        </member>
        <member name="M:Revit.Elements.Roof.InitRoof(Autodesk.Revit.DB.CurveArray,Autodesk.Revit.DB.Level,Autodesk.Revit.DB.RoofType)">
            <summary>
            Initialize a roof element
            </summary>
        </member>
        <member name="M:Revit.Elements.Roof.InternalSetRoof(Autodesk.Revit.DB.RoofBase)">
            <summary>
            Set the InternalRoof property and the associated element id and unique id
            </summary>
            <param name="Roof"></param>
        </member>
        <member name="M:Revit.Elements.Roof.ByOutlineTypeAndLevel(Autodesk.DesignScript.Geometry.Curve[],Revit.Elements.RoofType,Revit.Elements.Level)">
            <summary>
            Create a Revit Roof given its curve outline and Level
            </summary>
            <param name="outline"></param>
            <param name="roofType"></param>
            <param name="level"></param>
            <returns>The Roof</returns>
        </member>
        <member name="M:Revit.Elements.Roof.ByOutlineExtrusionTypeAndLevel(Autodesk.DesignScript.Geometry.PolyCurve,Revit.Elements.RoofType,Revit.Elements.Level,Revit.Elements.ReferencePlane,System.Double,System.Double)">
            <summary>
            Extrude Roof by Outline, Referenceplane
            </summary>
            <param name="outline"></param>
            <param name="roofType"></param>
            <param name="level"></param>
            <param name="plane"></param>
            <param name="extrusionStart"></param>
            <param name="extrusionEnd"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Roof.Points">
            <summary>
            Get Slab Shape Points
            </summary>
        </member>
        <member name="M:Revit.Elements.Roof.AddPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Add Point to Slab Shape
            </summary>
        </member>
        <member name="M:Revit.Elements.Roof.MovePoint(Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Move existing point by offset
            </summary>
        </member>
        <member name="M:Revit.Elements.Roof.FromExisting(Autodesk.Revit.DB.RoofBase,System.Boolean)">
            <summary>
            Create a Roof from a user selected Element.
            </summary>
            <param name="roof"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.CurtainSystemType">
            <summary>
            A Revit CurtainSystemType
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainSystemType.InternalCurtainSystemType">
            <summary>
            An internal reference to the CurtainSystemType
            </summary>
        </member>
        <member name="M:Revit.Elements.CurtainSystemType.#ctor(Autodesk.Revit.DB.CurtainSystemType)">
            <summary>
            Private constructor for the Element
            </summary>
            <param name="curtainSystemType"></param>
        </member>
        <member name="P:Revit.Elements.CurtainSystemType.Name">
            <summary>
            The name of the CurtainSystemType
            </summary>
        </member>
        <member name="M:Revit.Elements.CurtainSystemType.ByName(System.String)">
            <summary>
            Select a CurtainSystemType from the document given 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.CurtainSystemType.FromExisting(Autodesk.Revit.DB.CurtainSystemType,System.Boolean)">
            <summary>
            Create a CurtainSystemType from a user selected Element.
            </summary>
            <param name="curtainSystemType"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.CurtainSystem">
            <summary>
            A Revit CurtainSystem
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainSystem.InternalCurtainSystem">
            <summary>
            An internal handle on the Revit CurtainSystem
            </summary>
        </member>
        <member name="P:Revit.Elements.CurtainSystem.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.CurtainSystem.#ctor(Autodesk.Revit.DB.CurtainSystem)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.CurtainSystem.#ctor(Autodesk.Revit.DB.ReferenceArray,Autodesk.Revit.DB.CurtainSystemType)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.CurtainSystem.InitCurtainSystem(Autodesk.Revit.DB.CurtainSystem)">
            <summary>
            Initialize a CurtainSystem element
            </summary>
        </member>
        <member name="M:Revit.Elements.CurtainSystem.InitCurtainSystem(Autodesk.Revit.DB.ReferenceArray,Autodesk.Revit.DB.CurtainSystemType)">
            <summary>
            Initialize a CurtainSystem element
            </summary>
        </member>
        <member name="M:Revit.Elements.CurtainSystem.InternalSetCurtainSystem(Autodesk.Revit.DB.CurtainSystem)">
            <summary>
            Set the InternalCurtainSystem property and the associated element id and unique id
            </summary>
            <param name="curtainSystem"></param>
        </member>
        <member name="M:Revit.Elements.CurtainSystem.ByFace(Autodesk.DesignScript.Geometry.Surface,Revit.Elements.CurtainSystemType)">
            <summary>
            Create Curtain System from face references
            </summary>
            <param name="face"></param>
            <param name="curtainSystemType"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.CurtainSystem.AddCurtainGrid(Autodesk.DesignScript.Geometry.Surface)">
            <summary>
            Add Curtain Grid
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:Revit.Elements.CurtainSystem.RemoveCurtainGrid(Autodesk.DesignScript.Geometry.Surface)">
            <summary>
            Remove Curtain Grid
            </summary>
            <param name="face"></param>
        </member>
        <member name="P:Revit.Elements.CurtainSystem.CurtainSystemType">
            <summary>
            Get CurtainSystemType
            </summary>
        </member>
        <member name="M:Revit.Elements.CurtainSystem.FromExisting(Autodesk.Revit.DB.CurtainSystem,System.Boolean)">
            <summary>
            Create a CurtainSystem from a user selected Element.
            </summary>
            <param name="curtainSystem"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.InternalUtilities.ElementUtils.UpdateLevelName(System.String@)">
            <summary>
            This function checks if the name ends with "(num)". Here num is a integer.
            If yes, it will replace "(num)" with "(num+1)". Here num+1 is the form of the
            evaluated integer. Otherwise, it will append "(1)" at the end of the name.
            For example:
            This function will change the name from "abc(2)" to "abc(3)",
            from "abc" to "abc(1)".
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Revit.Elements.InternalUtilities.ElementUtils.GetParameterValue(Autodesk.Revit.DB.Parameter)">
            <summary>
            Get a revit parameters value
            </summary>
            <param name="param">Revit parameter</param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Mullion">
            <summary>
            A Revit Mullion
            </summary>
        </member>
        <member name="P:Revit.Elements.Mullion.LocationCurve">
            <summary>
            Gets curve geometry from the specified Mullion Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Mullion.#ctor(Autodesk.Revit.DB.Mullion)">
            <summary>
            Create from an existing Revit Element
            </summary>
            <param name="mullionElement"></param>
        </member>
        <member name="M:Revit.Elements.Mullion.InitMullion(Autodesk.Revit.DB.Mullion)">
            <summary>
            Initialize a Mullion element
            </summary>
            <param name="mullionElement"></param>
        </member>
        <member name="M:Revit.Elements.Mullion.ByElement(Revit.Elements.Mullion)">
             <summary>
            get curtain panel from element  
             </summary>
             <param name="mullionElement"></param>
        </member>
        <member name="M:Revit.Elements.Mullion.ByElement(Revit.Elements.Element)">
             <summary>
            get all mullions of curtain wall, system or slope glazing roof
             </summary>
             <param name="hostingElement"></param>
        </member>
        <member name="M:Revit.Elements.Mullion.FromExisting(Autodesk.Revit.DB.Mullion,System.Boolean)">
            <summary>
            Construct this type from an existing Revit element.
            </summary>
            <param name="mullion"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Mullion.SupportedPanels">
            <summary>
            Returns curtain panels supported by the specified Mullion Element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Mullion.AsFamilyInstance">
            <summary>
            Returns FamilyInstance object as represented by the specified mullion
            </summary>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.ParseEnum">
            <summary>
            Parse Revit Enum
            </summary>
        </member>
        <member name="M:Revit.Elements.ParseEnum.ByString(System.String,System.String)">
            <summary>
            Parse any Revit Enum by String
            </summary>
            <param name="value">enum string value</param>
            <param name="typeName">full type name</param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Room">
            <summary>
            Room Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Room.#ctor(Autodesk.Revit.DB.Architecture.Room)">
            <summary>
            Create from existing element
            </summary>
            <param name="Room"></param>
        </member>
        <member name="M:Revit.Elements.Room.#ctor(Autodesk.Revit.DB.Level,Autodesk.Revit.DB.XYZ,System.String,System.String)">
            <summary>
            Create a new Room by Level and location
            </summary>
            <param name="level"></param>
            <param name="location"></param>
            <param name="name"></param>
            <param name="number"></param>
        </member>
        <member name="M:Revit.Elements.Room.InitElement(Autodesk.Revit.DB.Architecture.Room)">
            <summary>
            Set internal element
            </summary>
        </member>
        <member name="M:Revit.Elements.Room.InternalSetElement(Autodesk.Revit.DB.Architecture.Room)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
        </member>
        <member name="M:Revit.Elements.Room.ByLocation(Revit.Elements.Level,Autodesk.DesignScript.Geometry.Point,System.String,System.String)">
            <summary>
            Create a Revit Room Element
            </summary>
            <param name="level">Level the room is hosted on</param>
            <param name="location">Location for the center of the room</param>
            <param name="name">Room name</param>
            <param name="number">Room number</param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Room.Name">
            <summary>
            Get room name
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.Number">
            <summary>
            Get room number
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.Area">
            <summary>
            Get room area
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.Height">
            <summary>
            Get room height
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.Volume">
            <summary>
            Get room volume
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.CenterBoundary">
            <summary>
            Centerline boundary
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.CoreBoundary">
            <summary>
            Core boundary
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.FinishBoundary">
            <summary>
            Finish boundary
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.CoreCenterBoundary">
            <summary>
            Core center boundary
            </summary>
        </member>
        <member name="P:Revit.Elements.Room.Location">
            <summary>
            Get Room Location
            </summary>
        </member>
        <member name="M:Revit.Elements.Room.IsInsideRoom(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Check if a point is inside of a room
            </summary>
        </member>
        <member name="M:Revit.Elements.Room.SetName(System.String)">
            <summary>
            Set name
            </summary>
            <param name="value">Name</param>
        </member>
        <member name="M:Revit.Elements.Room.SetNumber(System.String)">
            <summary>
            Set number
            </summary>
            <param name="value">Number</param>
        </member>
        <member name="T:Revit.Elements.Revision">
            <summary>
            Revit Revision
            </summary>
        </member>
        <member name="P:Revit.Elements.Revision.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Revision.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Revision.#ctor(Autodesk.Revit.DB.Revision)">
            <summary>
            Create from an existing Revit Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Revision.#ctor(System.String,Autodesk.Revit.DB.RevisionVisibility,System.String,System.String,System.Boolean,System.String,System.String,Autodesk.Revit.DB.RevisionNumberType)">
            <summary>
            Create Revision
            </summary>
            <param name="name"></param>
            <param name="visibility"></param>
            <param name="revDate"></param>
            <param name="description"></param>
            <param name="issued"></param>
            <param name="issuedBy"></param>
            <param name="issuedTo"></param>
            <param name="numberType"></param>
        </member>
        <member name="M:Revit.Elements.Revision.InternalSetElement(Autodesk.Revit.DB.Revision)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
        </member>
        <member name="M:Revit.Elements.Revision.Init(System.String,Autodesk.Revit.DB.RevisionVisibility,System.String,System.String,System.Boolean,System.String,System.String,Autodesk.Revit.DB.RevisionNumberType)">
            <summary>
            Create new Revision
            </summary>
            <param name="name"></param>
            <param name="visibility"></param>
            <param name="revDate"></param>
            <param name="description"></param>
            <param name="issued"></param>
            <param name="issuedBy"></param>
            <param name="issuedTo"></param>
            <param name="numberType"></param>
        </member>
        <member name="M:Revit.Elements.Revision.ByName(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Construct a new Revit Revision by Name
            </summary>
            <param name="name">Revision Name</param>
            <param name="visibility">Visibility settings</param>
            <param name="revDate">Revision Date</param>
            <param name="description">Description</param>
            <param name="issued">Issuing status</param>
            <param name="issuedBy">Issued by</param>
            <param name="issuedTo">Issued to</param>
            <param name="numberType">Number type</param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Revision.RevisionDate">
            <summary>
            Get Revision Date
            </summary>
        </member>
        <member name="M:Revit.Elements.Revision.SetRevisionDate(System.String)">
            <summary>
            Set Revision Date
            </summary>
            <param name="value">Revision Date</param>
        </member>
        <member name="P:Revit.Elements.Revision.IssuedTo">
            <summary>
            Get IssuedTo
            </summary>
        </member>
        <member name="M:Revit.Elements.Revision.SetIssuedTo(System.String)">
            <summary>
            Set IssuedTo
            </summary>
            <param name="value">IssuedTo</param>
        </member>
        <member name="P:Revit.Elements.Revision.IssuedBy">
            <summary>
            Get IssuedBy
            </summary>
        </member>
        <member name="M:Revit.Elements.Revision.SetIssuedBy(System.String)">
            <summary>
            Set IssuedBy
            </summary>
            <param name="value">IssuedBy</param>
        </member>
        <member name="P:Revit.Elements.Revision.Issued">
            <summary>
            Get Issued
            </summary>
        </member>
        <member name="M:Revit.Elements.Revision.SetIssued(System.Boolean)">
            <summary>
            Set Issued
            </summary>
            <param name="value">Issued</param>
        </member>
        <member name="M:Revit.Elements.Revision.FromExisting(Autodesk.Revit.DB.Revision,System.Boolean)">
            <summary>
            Create Revision from existing element
            </summary>
            <param name="instance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.RevisionCloud">
            <summary>
            Revit Revision Cloud
            </summary>
        </member>
        <member name="P:Revit.Elements.RevisionCloud.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.RevisionCloud.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.RevisionCloud.#ctor(Autodesk.Revit.DB.RevisionCloud)">
            <summary>
            Create revision cloud from revit element
            </summary>
            <param name="RevisionCloud"></param>
        </member>
        <member name="M:Revit.Elements.RevisionCloud.#ctor(Autodesk.Revit.DB.View,System.Collections.Generic.List{Autodesk.Revit.DB.Curve},Autodesk.Revit.DB.ElementId)">
            <summary>
            Create Revision cloud from view
            </summary>
            <param name="view"></param>
            <param name="curves"></param>
            <param name="id"></param>
        </member>
        <member name="M:Revit.Elements.RevisionCloud.InternalSetElement(Autodesk.Revit.DB.RevisionCloud)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
            <param name="wall"></param>
        </member>
        <member name="M:Revit.Elements.RevisionCloud.Init(Autodesk.Revit.DB.View,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.Curve},Autodesk.Revit.DB.ElementId)">
            <summary>
            Create new RevisionCloud from Curves
            </summary>
            <param name="view"></param>
            <param name="curves"></param>
            <param name="id"></param>
        </member>
        <member name="M:Revit.Elements.RevisionCloud.ByCurve(Revit.Elements.Views.View,System.Collections.Generic.IEnumerable{Autodesk.DesignScript.Geometry.Curve},Revit.Elements.Element)">
            <summary>
            Construct a Revit RevisionCloud element by curves
            </summary>
            <param name="view">View to place element on</param>
            <param name="curves">Cloud outline</param>
            <param name="revision">Revit revision</param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.RevisionCloud.Revision">
            <summary>
            Get Revision cloud's revision
            </summary>
        </member>
        <member name="P:Revit.Elements.RevisionCloud.Curves">
            <summary>
            Get Revision cloud's curves
            </summary>
        </member>
        <member name="M:Revit.Elements.RevisionCloud.FromExisting(Autodesk.Revit.DB.RevisionCloud,System.Boolean)">
            <summary>
            Create RevisionCloud from existing reference
            </summary>
            <param name="revisionCloud"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Viewport.InternalViewport">
            <summary>
            An internal reference to the Viewport
            </summary>
        </member>
        <member name="P:Revit.Elements.Viewport.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Viewport.#ctor(Autodesk.Revit.DB.Viewport)">
            <summary>
            Private constructor for the Element
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Revit.Elements.Viewport.InitViewport(Autodesk.Revit.DB.Viewport)">
            <summary>
            Initialize a Viewport element
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Revit.Elements.Viewport.InternalSetViewport(Autodesk.Revit.DB.Viewport)">
            <summary>
            Set the Viewport property, element id, and unique id
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Revit.Elements.Viewport.BySheetViewLocation(Revit.Elements.Views.Sheet,Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Creates a new Viewport at a given location on a sheet.
            </summary>
            <param name="sheet">The Sheet on which the new Viewport will be placed.</param>
            <param name="view">The view shown in the Viewport.</param>
            <param name="location">The new Viewport will be centered on this point.</param>
            <returns>The new Viewport.</returns>
        </member>
        <member name="M:Revit.Elements.Viewport.FromExisting(Autodesk.Revit.DB.Viewport,System.Boolean)">
            <summary>
            Create a Viewport from a user selected Element.
            </summary>
            <param name="viewport"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Space.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Space.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Space.#ctor(Autodesk.Revit.DB.Mechanical.Space)">
            <summary>
            Create from existing element
            </summary>
            <param name="space"></param>
        </member>
        <member name="M:Revit.Elements.Space.#ctor(Autodesk.Revit.DB.Level,Autodesk.Revit.DB.XYZ,System.String,System.String)">
            <summary>
            Create a new Space by Level and location
            </summary>
            <param name="level"></param>
            <param name="location"></param>
            <param name="name"></param>
            <param name="number"></param>
        </member>
        <member name="M:Revit.Elements.Space.InitElement(Autodesk.Revit.DB.Mechanical.Space)">
            <summary>
            Set internal element
            </summary>
        </member>
        <member name="M:Revit.Elements.Space.InternalSetElement(Autodesk.Revit.DB.Mechanical.Space)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
        </member>
        <member name="M:Revit.Elements.Space.ByLevelLocation(Revit.Elements.Level,Autodesk.DesignScript.Geometry.Point,System.String,System.String)">
            <summary>
            Create a Revit Space Element by level and location.
            </summary>
            <param name="level">Level the space is hosted on</param>
            <param name="location">Location for the center of the space</param>
            <param name="name">Space name</param>
            <param name="number">Space number</param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Space.Name">
            <summary>
            Get the space name
            </summary>
        </member>
        <member name="P:Revit.Elements.Space.Number">
            <summary>
            Get the space number.
            </summary>
        </member>
        <member name="P:Revit.Elements.Space.Area">
            <summary>
            Get area of the space.
            </summary>
        </member>
        <member name="P:Revit.Elements.Space.Height">
            <summary>
            Get height of the space.
            </summary>
        </member>
        <member name="P:Revit.Elements.Space.Volume">
            <summary>
            Get the volume of the space.
            </summary>
        </member>
        <member name="P:Revit.Elements.Space.CenterBoundary">
            <summary>
            Centerline boundary of the space.
            </summary>
        </member>
        <member name="P:Revit.Elements.Space.CoreBoundary">
            <summary>
            Core boundary of the space.
            </summary>
        </member>
        <member name="P:Revit.Elements.Space.FinishBoundary">
            <summary>
            Finish boundary of the space.
            </summary>
        </member>
        <member name="P:Revit.Elements.Space.CoreCenterBoundary">
            <summary>
            Core center boundary of the space.
            </summary>
        </member>
        <member name="P:Revit.Elements.Space.Location">
            <summary>
            Get the Location of the space.
            </summary>
        </member>
        <member name="M:Revit.Elements.Space.IsPointInsideSpace(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Check if a point is inside of a space.
            </summary>
        </member>
        <member name="M:Revit.Elements.Space.SetName(System.String)">
            <summary>
            Sets the name of the space.
            </summary>
            <param name="value">Name</param>
        </member>
        <member name="M:Revit.Elements.Space.SetNumber(System.String)">
            <summary>
            Sets the number of the space.
            </summary>
            <param name="value">Number</param>
        </member>
        <member name="T:Revit.Elements.Views.AreaPlanView">
            <summary>
            A Revit Area Plan View
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AreaPlanView.#ctor(Autodesk.Revit.DB.ViewPlan)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AreaPlanView.#ctor(Autodesk.Revit.DB.Level,Autodesk.Revit.DB.AreaScheme)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AreaPlanView.InitAreaPlanView(Autodesk.Revit.DB.ViewPlan)">
            <summary>
            Initialize a AreaPlanView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AreaPlanView.InitAreaPlanView(Autodesk.Revit.DB.Level,Autodesk.Revit.DB.AreaScheme)">
            <summary>
            Initialize a AreaPlanView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AreaPlanView.ByLevelAndAreaScheme(Revit.Elements.Level,Revit.Elements.Element)">
            <summary>
            Create an Area Plan View at the given Level.
            </summary>
            <param name="level">The Level on which the AreaPlanView is based.</param>
            <param name="areaScheme">Area Scheme to be applied to plan view.</param>
            <returns>An Area Plan View if successful.</returns>
        </member>
        <member name="M:Revit.Elements.Views.AreaPlanView.FromExisting(Autodesk.Revit.DB.ViewPlan,System.Boolean)">
            <summary>
            Create from existing Element
            </summary>
            <param name="plan">Area Plan View.</param>
            <param name="isRevitOwned">Is Revit Owned?</param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Views.Legend">
            <summary>
            A Revit Legend View Wrapper
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.Legend.InternalLegend">
            <summary>
            An internal handle on the Revit element
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.Legend.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.Legend.#ctor(Autodesk.Revit.DB.View)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.Legend.InitLegend(Autodesk.Revit.DB.View)">
            <summary>
            Initialize a Legend element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.Legend.InternalSetLegend(Autodesk.Revit.DB.View)">
            <summary>
            Set the Internal Legend properties and the associated Element Id and Unique Id
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Revit.Elements.Views.Legend.FromExisting(Autodesk.Revit.DB.View,System.Boolean)">
            <summary>
            Create a View from a user selected Element.
            </summary>
            <param name="view"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Views.ScheduleView">
            <summary>
            Base class for Revit Plan views
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.ScheduleView.InternalViewSchedule">
            <summary>
            An internal handle on the Revit element
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.ScheduleView.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.ScheduleView.InternalScheduleFilters">
            <summary>
            Reference to Schedule Filters
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.#ctor(Autodesk.Revit.DB.ViewSchedule)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.#ctor(Revit.Elements.Category,System.String,Revit.Elements.Views.ScheduleView.ScheduleType)">
            <summary>
            Private constructor for creating Schedules from Category/ScheduleType.
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.#ctor(Revit.Elements.Element,System.String)">
            <summary>
            Private constructor for creating Schedules from AreaScheme.
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.InitScheduleView(Autodesk.Revit.DB.ViewSchedule)">
            <summary>
            Initialize a ScheduleView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.InitScheduleView(Revit.Elements.Category,System.String,Revit.Elements.Views.ScheduleView.ScheduleType)">
            <summary>
            Initialize a ScheduleView Element by Category, name and ScheduleType.
            </summary>
            <param name="category">Category of elements that Schedule will display.</param>
            <param name="name">Name of the Schedule.</param>
            <param name="type">ScheduleType ex: Key Schedule.</param>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.InitScheduleView(Revit.Elements.Element,System.String)">
            <summary>
            Initialize a ScheduleView Element by AreaScheme and name.
            </summary>
            <param name="areaScheme">Area Scheme.</param>
            <param name="name">Name of the Schedule.</param>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.InternalSetScheduleView(Autodesk.Revit.DB.ViewSchedule)">
            <summary>
            Set the InternalViewSchedule property and the associated element id and unique id
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.CreateSchedule(Revit.Elements.Category,System.String,System.String)">
            <summary>
            Create Schedule by Category, Type and Name.
            </summary>
            <param name="category">Category that Schedule will be associated with.</param>
            <param name="name">Name of the Schedule View.</param>
            <param name="scheduleType">Type of Schedule View to be created. Ex. Key Schedule.</param>
            <returns name="scheduleView">Schedule View.</returns>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.CreateAreaSchedule(Revit.Elements.Element,System.String)">
            <summary>
            Create Area Schedule by Area Scheme and Name.
            </summary>
            <param name="areaScheme">Area Scheme that Schedule will be associated with.</param>
            <param name="name">Name of the Schedule View.</param>
            <returns name="scheduleView">Schedule View.</returns>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.RemoveFields(System.Collections.Generic.List{Revit.Schedules.ScheduleField})">
            <summary>
            Remove Schedule Field from Schedule View.
            </summary>
            <param name="fields">Schedule Fields (columns) to be removed.</param>
            <returns name="scheduleView">Schedule View.</returns>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.AddFields(System.Collections.Generic.List{Revit.Schedules.SchedulableField})">
            <summary>
            Add Field (Column) to Schedule View.
            </summary>
            <param name="fields">Schedulable Field retrieved from ScheduleView.SchedulableFields.</param>
            <returns name="scheduleView">Schedule View.</returns>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.Export(System.String,Revit.Schedules.ScheduleExportOptions)">
            <summary>
            Export View Schedule to CSV, TSV etc.
            </summary>
            <param name="path">A valid file path with file extension.</param>
            <param name="exportOptions">Export Options.</param>
            <returns name="scheduleView">Schedule View.</returns>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.AddFilters(System.Collections.Generic.List{Revit.Schedules.ScheduleFilter})">
            <summary>
            Add Schedule Filters to Schedule View.
            </summary>
            <param name="scheduleFilters">List of Schedule Filters.</param>
            <returns name="scheduleView">Schedule View.</returns>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.ClearAllFilters">
            <summary>
            Clear all Schedule Filters from Schedule View.
            </summary>
            <returns name="scheduleView">Schedule View.</returns>
        </member>
        <member name="P:Revit.Elements.Views.ScheduleView.ScheduleFilters">
            <summary>
            Schedule Filters.
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.ScheduleView.Fields">
            <summary>
            Schedule Fields.
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.ScheduleView.SchedulableFields">
            <summary>
            Schedulable Fields.
            </summary>
        </member>
        <member name="T:Revit.Elements.Views.ScheduleView.ScheduleType">
            <summary>
            ScheduleType Enumeration
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.ScheduleView.FromExisting(Autodesk.Revit.DB.ViewSchedule,System.Boolean)">
            <summary>
            Create a View from a user selected Element.
            </summary>
            <param name="view"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Views.View">
            <summary>
            An abstract Revit View - All view types inherit from this type
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.View.InternalView">
            <summary>
            Obtain the reference Element as a View
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.View.IsAnnotationView">
            <summary>
            Check if this type of view supports annotative elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.View.ExportAsImage(System.String)">
            <summary>
            Export the view as an image to the given path - defaults to png, but you can override 
            the file type but supplying a path with the appropriate extension.
            </summary>
            <param name="path">A valid path for the image.</param>
            <returns>A Bitmap Image.</returns>
        </member>
        <member name="M:Revit.Elements.Views.View.AddFilter(Revit.Filter.ParameterFilterElement)">
            <summary>
                Add a Filter to a View. The Filter will be added even if View has a View Template applied, which normally would prevent user from adding
                Filters without first disabling or modifying the View Template.
            </summary>
            <param name="parameterFilter">Parameter filter</param>
            <returns name="view">View</returns>
        </member>
        <member name="P:Revit.Elements.Views.View.Filters">
            <summary>
                Get View Filters
            </summary>
            <returns name="filter">View Filters</returns>
        </member>
        <member name="M:Revit.Elements.Views.View.SetFilterOverrides(Revit.Filter.ParameterFilterElement,Revit.Filter.OverrideGraphicSettings,System.Boolean)">
            <summary>
                Set Filter overrides. If View doesn't have specified Filter, it will be first added to the View and then its settings will be overriden.
                This behavior will persist even if View has a View Template applied which normally would prevent user from adding Filters without first
                disabling or modifying the View Template.
            </summary>
            <param name="parameterFilter">Parameter Filter</param>
            <param name="overrides">Graphic Overrides Settings</param>
            <param name="hide">If True given Filter will be hidden.</param>
            <returns name="view">View</returns>
        </member>
        <member name="M:Revit.Elements.Views.View.FilterOverrides(Revit.Filter.ParameterFilterElement)">
            <summary>
                Get Filter overrides
            </summary>
            <returns name="overrides">Filter overrides</returns>
        </member>
        <member name="M:Revit.Elements.Views.View.IsViewTemplate">
            <summary>
                Checks if View is a View Template.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.View.SetCategoryOverrides(Revit.Elements.Category,Revit.Filter.OverrideGraphicSettings,System.Boolean)">
            <summary>
                Set Category Overrides.
            </summary>
            <param name="category">Category</param>
            <param name="overrides">Graphics Overrides Settings.</param>
            <param name="hide">If True givent Category will be hidden.</param>
            <returns name="view">View</returns>
        </member>
        <member name="M:Revit.Elements.Views.View.SetScale(System.Int32)">
            <summary>
                Set View Scale
            </summary>
            <param name="scale">View scale is the ration of true model size to paper size.</param>
            <returns name="view">View</returns>
        </member>
        <member name="T:Revit.Elements.Views.AxonometricView">
            <summary>
            A Revit View3D
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AxonometricView.#ctor(Autodesk.Revit.DB.View3D)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AxonometricView.#ctor(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.BoundingBoxXYZ,System.String,System.Boolean)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AxonometricView.#ctor(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,System.String,Autodesk.Revit.DB.Element,System.Boolean)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AxonometricView.InitAxonometricView(Autodesk.Revit.DB.View3D)">
            <summary>
            Initialize an AxonometricView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AxonometricView.InitAxonometricView(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.BoundingBoxXYZ,System.String,System.Boolean)">
            <summary>
            Initialize an AxonometricView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AxonometricView.InitAxonometricView(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,System.String,Autodesk.Revit.DB.Element,System.Boolean)">
            <summary>
            Initialize an AxonometricView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.AxonometricView.ByEyePointAndTarget(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,System.String)">
            <summary>
            Create a Revit Axonometric (isometric) View from an eye position
            and a target position.
            </summary>
            <param name="eyePoint">A Point representing the eye point in meters.</param>
            <param name="target">A Point representing the target of view in meters.</param>
            <param name="name">The name of the view.</param>
            <returns>An AxonometricView object.</returns>
        </member>
        <member name="M:Revit.Elements.Views.AxonometricView.ByEyePointTargetAndElement(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,System.String,Revit.Elements.Element,System.Boolean)">
            <summary>
            Create a Revit Axonometric (isometric) View from an Eye position and target position and Element
            </summary>
            <param name="eyePoint">A Point representing the eye point.</param>
            <param name="target">A Point representing the target of view.</param>
            <param name="element">This argument cannot be null, and it has to be either a 
            Revit.Elements.Element or  Revit.GeometryObjectsBoundingBox.</param>
            <param name="name">The name of the view.</param>
            <param name="isolateElement">If this argument is set to true, the element or 
            bounding box will be isolated in the current view by creating a minimum size
            crop box around it.</param>
            <returns>An AxonometricView object.</returns>
        </member>
        <member name="M:Revit.Elements.Views.AxonometricView.ByEyePointTargetAndBoundingBox(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.BoundingBox,System.String,System.Boolean)">
            <summary>
            Create a Revit Axonometric (isometric) View from an Eye position and target position and Bounding Box
            </summary>
            <param name="eyePoint">A Point representing the eye point.</param>
            <param name="target">A Point representing the target of view.</param>
            <param name="boundingBox">A BoundingBox. The view will be cropped to this bounding box</param>
            <param name="name">The name of the view.</param>
            <param name="isolateElement">If this argument is set to true, the element or 
            bounding box will be isolated in the current view by creating a minimum size
            crop box around it.</param>
            <returns>An AxonometricView object.</returns>
        </member>
        <member name="M:Revit.Elements.Views.AxonometricView.FromExisting(Autodesk.Revit.DB.View3D,System.Boolean)">
            <summary>
            Create from an existing Revit Element
            </summary>
            <param name="view"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Views.CeilingPlanView">
            <summary>
            A Revit ViewPlan
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.CeilingPlanView.#ctor(Autodesk.Revit.DB.ViewPlan)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.CeilingPlanView.#ctor(Autodesk.Revit.DB.Level)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.CeilingPlanView.InitCeilingPlanView(Autodesk.Revit.DB.ViewPlan)">
            <summary>
            Initialize a CeilingPlanView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.CeilingPlanView.InitCeilingPlanView(Autodesk.Revit.DB.Level)">
            <summary>
            Initialize a CeilingPlanView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.CeilingPlanView.ByLevel(Revit.Elements.Level)">
            <summary>
            Create a Revit Floor Plan at a given Level
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.CeilingPlanView.FromExisting(Autodesk.Revit.DB.ViewPlan,System.Boolean)">
            <summary>
            Create from existing Element
            </summary>
            <param name="plan"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Views.StructuralPlanView">
            <summary>
            A Revit ViewPlan
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.StructuralPlanView.#ctor(Autodesk.Revit.DB.ViewPlan)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.StructuralPlanView.#ctor(Autodesk.Revit.DB.Level)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.StructuralPlanView.InitStructuralPlanView(Autodesk.Revit.DB.ViewPlan)">
            <summary>
            Initialize a StructuralPlanView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.StructuralPlanView.InitStructuralPlanView(Autodesk.Revit.DB.Level)">
            <summary>
            Initialize a StructuralPlanView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.StructuralPlanView.ByLevel(Revit.Elements.Level)">
            <summary>
            Create a Structural Plan View at the given Level.
            </summary>
            <param name="level">The Level on which the StructuralPlanView is based.</param>
            <returns>A StructuralPlanView if successful.</returns>
        </member>
        <member name="M:Revit.Elements.Views.StructuralPlanView.FromExisting(Autodesk.Revit.DB.ViewPlan,System.Boolean)">
            <summary>
            Create from existing Element
            </summary>
            <param name="plan"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Views.PerspectiveView">
            <summary>
            A Revit View3D
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.PerspectiveView.#ctor(Autodesk.Revit.DB.View3D)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.PerspectiveView.#ctor(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.BoundingBoxXYZ,System.String,System.Boolean)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.PerspectiveView.#ctor(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.Element,System.String,System.Boolean)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.PerspectiveView.InitPerspectiveView(Autodesk.Revit.DB.View3D)">
            <summary>
            Initialize a PerspectiveView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.PerspectiveView.InitPerspectiveView(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.BoundingBoxXYZ,System.String,System.Boolean)">
            <summary>
            Initialize a PerspectiveView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.PerspectiveView.InitPerspectiveView(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.Element,System.String,System.Boolean)">
            <summary>
            Initialize a PerspectiveView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.PerspectiveView.ByEyePointAndTarget(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,System.Object,System.String,System.Boolean)">
            <summary>
            Create a Revit Perspective View from an Eye position, a target position, and 
            either an Element or BoundingBox.
            </summary>
            <param name="eyePoint">A Point representing the eye point.</param>
            <param name="target">A Point representing the target of view.</param>
            <param name="element">This argument cannot be null, and it has to be either a 
            Revit.Elements.Element or  Revit.GeometryObjectsBoundingBox.</param>
            <param name="name">The name of the view.</param>
            <param name="isolateElement">If this argument is set to true, the element or 
            bounding box will be isolated in the current view by creating a minimum size
            crop box around it.</param>
            <returns>Returns the resulting PerspectiveView object.</returns>
            
        </member>
        <member name="M:Revit.Elements.Views.PerspectiveView.ByEyePointTargetAndElement(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Element,System.String,System.Boolean)">
            <summary>
            Create a Revit Perspective View from an Eye position and target position and Element
            </summary>
            <param name="eyePoint"></param>
            <param name="target"></param>
            <param name="element"></param>
            <param name="name"></param>
            <param name="isolateElement"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.PerspectiveView.ByEyePointTargetAndBoundingBox(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.BoundingBox,System.String,System.Boolean)">
            <summary>
            Create a Revit Perspective View from an Eye position and target position and Bounding Box
            </summary>
            <param name="eyePoint">Eye point in meters</param>
            <param name="target">Target of view in meters</param>
            <param name="boundingBox">Bounding box represented in meters</param>
            <param name="name"></param>
            <param name="isolateElement"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.PerspectiveView.FromExisting(Autodesk.Revit.DB.View3D,System.Boolean)">
            <summary>
            Create from an existing Revit Element
            </summary>
            <param name="view"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Views.DraftingView">
            <summary>
            A Revit ViewDrafting
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.DraftingView.InternalViewDrafting">
            <summary>
            An internal handle on the Revit element
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.DraftingView.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.DraftingView.#ctor(Autodesk.Revit.DB.ViewDrafting)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.DraftingView.#ctor(System.String)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.DraftingView.InitDraftingView(Autodesk.Revit.DB.ViewDrafting)">
            <summary>
            Initialize a DraftingView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.DraftingView.InitDraftingView(System.String)">
            <summary>
            Initialize a DraftingView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.DraftingView.InternalSetDraftingView(Autodesk.Revit.DB.ViewDrafting)">
            <summary>
            Set the InternalViewDrafting property and the associated element id and unique id
            </summary>
            <param name="floor"></param>
        </member>
        <member name="M:Revit.Elements.Views.DraftingView.ByName(System.String)">
            <summary>
            Create a Revit DraftingView given it's name
            </summary>
            <param name="name">Name of the view</param>
            <returns>The view</returns>
        </member>
        <member name="M:Revit.Elements.Views.DraftingView.FromExisting(Autodesk.Revit.DB.ViewDrafting,System.Boolean)">
            <summary>
            Create a View from a user selected Element.
            </summary>
            <param name="view"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Views.FloorPlanView">
            <summary>
            A Revit ViewPlan
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.FloorPlanView.#ctor(Autodesk.Revit.DB.Level)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.FloorPlanView.#ctor(Autodesk.Revit.DB.ViewPlan)">
            <summary>
            Create a Revit Floor Plan from Autodesk View Plan
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.FloorPlanView.InitFloorPlanView(Autodesk.Revit.DB.ViewPlan)">
            <summary>
            Initialize a FloorPlanView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.FloorPlanView.InitFloorPlanView(Autodesk.Revit.DB.Level)">
            <summary>
            Initialize a FloorPlanView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.FloorPlanView.ByLevel(Revit.Elements.Level)">
            <summary>
            Create a Revit Floor Plan at a given Level
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.FloorPlanView.FromExisting(Autodesk.Revit.DB.ViewPlan,System.Boolean)">
            <summary>
            Create from existing Element
            </summary>
            <param name="plan"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Views.Sheet">
            <summary>
            A Revit ViewSheet
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.Sheet.InternalViewSheet">
            <summary>
            An internal handle on the Revit element
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.Sheet.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.#ctor(Autodesk.Revit.DB.ViewSheet)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.View})">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.#ctor(System.String,System.String,Autodesk.Revit.DB.FamilySymbol,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.View})">
            <summary>
            Private constructor.
            </summary>
            <param name="sheetName"></param>
            <param name="sheetNumber"></param>
            <param name="titleBlockFamilySymbol"></param>
            <param name="views"></param>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.InitSheet(Autodesk.Revit.DB.ViewSheet)">
            <summary>
            Initialize a Sheet element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.InitSheet(System.String,System.String,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.View})">
            <summary>
            Initialize a Sheet element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.InitSheet(System.String,System.String,Autodesk.Revit.DB.FamilySymbol,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.View})">
            <summary>
            Initialize a Sheet element
            </summary>
            <param name="sheetName"></param>
            <param name="sheetNumber"></param>
            <param name="titleBlockFamilySymbol"></param>
            <param name="views"></param>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.InitSheet(System.String,System.String,Autodesk.Revit.DB.FamilySymbol)">
            <summary>
            Initialize a Sheet element with a name, number and specific titleblock.
            </summary>
            <param name="sheetName">name of the sheet.</param>
            <param name="sheetNumber">sheet number.</param>
            <param name="titleBlockFamilySymbol">sheet titleblock.</param>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.InternalAddViewsToSheetView(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.View})">
            <summary>
            This method adds the collection of views to the existing ViewSheet and packs them 
            </summary>
            <param name="views"></param>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.InternalSetViewSheet(Autodesk.Revit.DB.ViewSheet)">
            <summary>
            Set the InternalViewSheet property and the associated element id and unique id
            </summary>
            <param name="floor"></param>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.InternalSetSheetName(System.String)">
            <summary>
            Set the name of the sheet
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.InternalSetSheetNumber(System.String)">
            <summary>
            Set the sheet number of the sheet
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.InternalSetTitleBlock(Autodesk.Revit.DB.ElementId)">
            <summary>
            Set the title block id for the view
            </summary>
            <param name="newTitleBlockId"></param>
        </member>
        <member name="P:Revit.Elements.Views.Sheet.SheetName">
            <summary>
            Get the SheetName of the Sheet
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.Sheet.SheetNumber">
            <summary>
            Get the SheetNumber of the Sheet
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.Sheet.Views">
            <summary>
            Get the Views on a Sheet
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.ByNameNumberTitleBlockAndViews(System.String,System.String,Revit.Elements.FamilyType,Revit.Elements.Views.View[])">
            <summary>
            Create a Revit Sheet.  
            This method will automatically pack the views onto the sheet. 
            </summary>
            <param name="sheetName">Sheet Name as String.</param>
            <param name="sheetNumber">Sheet Number as String.</param>
            <param name="titleBlockFamilyType">Titleblock that will be assigned to created Sheet.</param>
            <param name="views">Views to be placed on Sheet.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.ByNameNumberTitleBlockAndView(System.String,System.String,Revit.Elements.FamilyType,Revit.Elements.Views.View)">
            <summary>
            Create a Revit Sheet.  
            This method will automatically pack the view onto the sheet.
            </summary>
            <param name="sheetName">Sheet Name as String.</param>
            <param name="sheetNumber">Sheet Number as String.</param>
            <param name="titleBlockFamilyType">Titleblock that will be assigned to created Sheet.</param>
            <param name="view">Views to be placed on Sheet.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.ByNameNumberTitleBlock(System.String,System.String,Revit.Elements.FamilyType)">
            <summary>
            Create a Revit Sheet by the sheet name, number and a title block FamilyType.
            </summary>
            <param name="sheetName">Sheet Name as String.</param>
            <param name="sheetNumber">Sheet Number as String.</param>
            <param name="titleBlockFamilyType">Titleblock that will be assigned to created Sheet.</param>
            <returns>The new empty Revit sheet.</returns>
        </member>
        <member name="M:Revit.Elements.Views.Sheet.FromExisting(Autodesk.Revit.DB.ViewSheet,System.Boolean)">
            <summary>
            Create a View from a user selected Element.
            </summary>
            <param name="view"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Views.SectionView">
            <summary>
            A Revit ViewSection
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.SectionView.InternalViewSection">
            <summary>
            An internal handle on the Revit element
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.SectionView.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.SectionView.#ctor(Autodesk.Revit.DB.ViewSection)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.SectionView.#ctor(Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.SectionView.InitSectionView(Autodesk.Revit.DB.ViewSection)">
            <summary>
            Initialize a SectionView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.SectionView.InitSectionView(Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
            Initialize a SectionView element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.SectionView.InternalSetSectionView(Autodesk.Revit.DB.ViewSection)">
            <summary>
            Set the InternalViewSection property and the associated element id and unique id
            </summary>
            <param name="floor"></param>
        </member>
        <member name="M:Revit.Elements.Views.SectionView.ByBoundingBox(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Create a Revit ViewSection by a bounding box
            </summary>
            <param name="box">The bounding box of the view in meters</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.SectionView.ByCoordinateSystemMinPointMaxPoint(Autodesk.DesignScript.Geometry.CoordinateSystem,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Creates a Revit ViewSection by a specified corrdinate system, minPoint and maxPoint
            </summary>
            <param name="cs"></param>
            <param name="minPoint"></param>
            <param name="maxPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.SectionView.FromExisting(Autodesk.Revit.DB.ViewSection,System.Boolean)">
            <summary>
            Create a View from a user selected Element.
            </summary>
            <param name="view"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Views.View3D.InternalView3D">
            <summary>
            An internal handle on the Revit element
            </summary>
        </member>
        <member name="P:Revit.Elements.Views.View3D.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.View3D.BuildOrientation3D(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ)">
            <summary>
            Build Orientation3D object for eye point and a target point 
            </summary>
            <param name="eyePoint"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.View3D.GetPointCloud(Autodesk.Revit.DB.Element,System.Collections.Generic.List{Autodesk.Revit.DB.XYZ})">
            <summary>
            Obtain a sparse point collection outlining a Revit element bt traversing it's
            GeometryObject representation
            </summary>
            <param name="e"></param>
            <param name="pts"></param>
        </member>
        <member name="M:Revit.Elements.Views.View3D.GetPointCloud(Autodesk.Revit.DB.GeometryInstance,System.Collections.Generic.List{Autodesk.Revit.DB.XYZ})">
            <summary>
            Obtain a point collection outlining a GeometryObject
            </summary>
            <param name="geomInst"></param>
            <param name="pts"></param>
        </member>
        <member name="M:Revit.Elements.Views.View3D.GetPointCloud(Autodesk.Revit.DB.Solid,System.Collections.Generic.List{Autodesk.Revit.DB.XYZ})">
            <summary>
            Obtain a point collection outlining a Solid GeometryObject
            </summary>
            <param name="solid"></param>
            <param name="pts"></param>
        </member>
        <member name="M:Revit.Elements.Views.View3D.IsolateInView(Autodesk.Revit.DB.View3D,Autodesk.Revit.DB.Element)">
            <summary>
            Make a single element appear in a particular view
            </summary>
            <param name="view"></param>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.Views.View3D.IsolateInView(Autodesk.Revit.DB.View3D,Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
            Set the cropping for the current view
            </summary>
            <param name="view3D"></param>
            <param name="bbox"></param>
        </member>
        <member name="M:Revit.Elements.Views.View3D.Create3DView(Autodesk.Revit.DB.ViewOrientation3D,System.String,System.Boolean)">
            <summary>
            Create a Revit 3D View
            </summary>
            <param name="orient"></param>
            <param name="name"></param>
            <param name="isPerspective"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.View3D.CreateUniqueViewName(System.String)">
            <summary>
            Determines whether a view with the provided name already exists.
            If a view exists with the provided name, and new view is created with
            a unique name. Otherwise, the original view name is returned.
            </summary>
            <param name="name"></param>
            <returns>The original name if it is already unique, or 
            a unique version of the name.</returns>
        </member>
        <member name="M:Revit.Elements.Views.View3D.GetVisibleElementFilter">
            <summary>
            Utility method to create a filtered element collector which collects all elements in a view
            which Dynamo would like to view or on which Dynamo would like to operate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Views.View3D.InternalSetName(System.String)">
            <summary>
            Set the name of the current view
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Revit.Elements.Views.View3D.InternalSetOrientation(Autodesk.Revit.DB.ViewOrientation3D)">
            <summary>
            Set the orientation of the view
            </summary>
            <param name="orient"></param>
        </member>
        <member name="M:Revit.Elements.Views.View3D.InternalIsolateInView(Autodesk.Revit.DB.Element)">
            <summary>
            Isolate the element in the current view by creating a mininum size crop box around it
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.Views.View3D.InternalIsolateInView(Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
            Isolate the bounding box in the current view
            </summary>
            <param name="bbox"></param>
        </member>
        <member name="M:Revit.Elements.Views.View3D.InternalRemoveIsolation">
            <summary>
            Show all hiddent elements in the view
            </summary>
        </member>
        <member name="M:Revit.Elements.Views.View3D.InternalSetView3D(Autodesk.Revit.DB.View3D)">
            <summary>
            Set the InternalView3D property and the associated element id and unique id
            </summary>
            <param name="view"></param>
        </member>
        <member name="T:Revit.Elements.FailureMessage">
            <summary>
            Performance Adviser Failure Message
            </summary>
        </member>
        <member name="P:Revit.Elements.FailureMessage.Description">
            <summary>
            The description of the message.
            </summary>
        </member>
        <member name="P:Revit.Elements.FailureMessage.FailingElements">
            <summary>
            The Failing Elements of the message.
            </summary>
        </member>
        <member name="P:Revit.Elements.FailureMessage.Severity">
            <summary>
            Get the failure severity.
            </summary>
        </member>
        <member name="T:Revit.Elements.PerformanceAdviserRule">
            <summary>
            Performance Adviser Rule
            </summary>
        </member>
        <member name="P:Revit.Elements.PerformanceAdviserRule.Name">
            <summary>
            The name of the rule.
            </summary>
        </member>
        <member name="P:Revit.Elements.PerformanceAdviserRule.Description">
            <summary>
            The description of the rule.
            </summary>
        </member>
        <member name="P:Revit.Elements.PerformanceAdviserRule.Enabled">
            <summary>
            A boolean indicating if the rule is activated.
            </summary>
        </member>
        <member name="P:Revit.Elements.PerformanceAdviserRule.SetEnabled">
            <summary>
            A boolean indicating if the rule is activated successfully.
            </summary>
        </member>
        <member name="P:Revit.Elements.PerformanceAdviserRule.RuleId">
            <summary>
            The id of the rule.
            </summary>
        </member>
        <member name="M:Revit.Elements.PerformanceAdviserRule.Execute(System.Collections.Generic.IEnumerable{Revit.Elements.PerformanceAdviserRule})">
            <summary>
            Execute Rules
            </summary>
        </member>
        <member name="M:Revit.Elements.PerformanceAdviserRule.ById(System.String)">
            <summary>
            Create Performance Adviser Rule by Id
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.PerformanceAdviserRule.ToString">
            <summary>
            Outputs rule name and rule description.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.SunSettings.SunDirection">
            <summary>
                Calculates the direction of the sun.
            </summary>
        </member>
        <member name="P:Revit.Elements.SunSettings.Altitude">
            <summary>
                Extracts the Altitude.
            </summary>
        </member>
        <member name="P:Revit.Elements.SunSettings.Azimuth">
            <summary>
                Extracts the Azimuth.
            </summary>
        </member>
        <member name="P:Revit.Elements.SunSettings.StartDateTime">
            <summary>
                Gets the Start Date and Time of the solar study given in the local time of the solar study location.
            </summary>
        </member>
        <member name="P:Revit.Elements.SunSettings.EndDateTime">
            <summary>
                Gets the End Date and Time of the solar study given in the local time of the solar study location.
            </summary>
        </member>
        <member name="P:Revit.Elements.SunSettings.CurrentDateTime">
            <summary>
                Gets the Date and Time for the current frame of the solar study given in the local time of the solar study location.
            </summary>
        </member>
        <member name="M:Revit.Elements.SunSettings.TranslateTime(System.DateTime)">
            <summary>
            Fix: https://github.com/DynamoDS/DynamoRevit/pull/879
            
            StartDateAndTime, EndDateAndTime and ActiveFrameTime should return local datetime,
            that is set in Revit project configuration.
            But it returns customized datetime + user timezone offset, which is incorrect.
            Althought in documentation it's said, 
            that "The output value will be in Coordinated Universal Time (UTC), 
            but input may be in local time as well."
            There is no means to return local time.
            </summary>
        </member>
        <member name="T:Revit.Elements.Tag">
            <summary>
            Revit Tag Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Tag.InternalTextNote">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Tag.#ctor(Autodesk.Revit.DB.IndependentTag)">
            <summary>
            Tag
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Revit.Elements.Tag.#ctor(Autodesk.Revit.DB.View,Autodesk.Revit.DB.Element,Autodesk.Revit.DB.TagOrientation,Autodesk.Revit.DB.TagMode,System.Boolean,Autodesk.Revit.DB.XYZ)">
            <summary>
            Tag by Element
            </summary>
            <param name="view"></param>
            <param name="host"></param>
            <param name="orientation"></param>
            <param name="mode"></param>
            <param name="addLeader"></param>
            <param name="point"></param>
        </member>
        <member name="M:Revit.Elements.Tag.InternalSetType(System.String,Autodesk.Revit.DB.XYZ,System.Double)">
            <summary>
            Set Text
            </summary>
            <param name="value"></param>
            <param name="location"></param>
            <param name="angle"></param>
        </member>
        <member name="M:Revit.Elements.Tag.InitElement(Autodesk.Revit.DB.IndependentTag)">
            <summary>
            Init element from existing
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.Tag.Init(Autodesk.Revit.DB.View,Autodesk.Revit.DB.Element,Autodesk.Revit.DB.TagOrientation,Autodesk.Revit.DB.TagMode,System.Boolean,Autodesk.Revit.DB.XYZ)">
            <summary>
            Init Tag element
            </summary>
            <param name="view"></param>
            <param name="host"></param>
            <param name="orientation"></param>
            <param name="mode"></param>
            <param name="addLeader"></param>
            <param name="vector"></param>
        </member>
        <member name="M:Revit.Elements.Tag.GetLocationPoint(Revit.Elements.Element)">
            <summary>
            Gets element location from locationPoint or Curve
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Tag.GetElementExtentsByView(Revit.Elements.Element,Autodesk.Revit.DB.View)">
            <summary>
            Get extents of an element by view
            </summary>
            <param name="element"></param>
            <param name="view"></param>
        </member>
        <member name="M:Revit.Elements.Tag.GetExtentsWithOffset(Revit.Elements.Element,Autodesk.Revit.DB.View,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.VerticalAlignmentStyle,Autodesk.Revit.DB.HorizontalAlignmentStyle)">
            <summary>
            Get element extents by view and apply offset vector
            </summary>
            <param name="element"></param>
            <param name="view"></param>
            <param name="offset"></param>
            <param name="verticalAlignment"></param>
            <param name="horizontalAlignment"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Tag.ByElement(Revit.Elements.Views.View,Revit.Elements.Element,System.Boolean,System.Boolean,System.String,System.String,Autodesk.DesignScript.Geometry.Vector,System.Boolean)">
            <summary>
            Create a Revit Tag for a Revit Element
            </summary>
            <param name="view">View to Tag in</param>
            <param name="element">Element to tag</param>
            <param name="horizontal">Place tag horizontal</param>
            <param name="addLeader">Add a leader</param>
            <param name="offset">Optional: Offset Vector or Tag Location, defaults to 0,0,0</param>
            <param name="isOffset">Optional: Specifies if the point is being used as an offset vector or if it specifies the tags location, defaults to true</param>
            <param name="horizontalAlignment">Horizontal Alignment within the element's extents</param>
            <param name="verticalAlignment">Vertical Alignment within the element's extents</param>
            <returns></returns>
            <search>
            tagelement,annotate,documentation
            </search>
        </member>
        <member name="M:Revit.Elements.Tag.ByElementAndLocation(Revit.Elements.Views.View,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Boolean,System.Boolean)">
            <summary>
            Create a Revit Tag for a Revit Element at a specified location point
            </summary>
            <param name="view">View to tag in</param>
            <param name="element">Element to tag</param>
            <param name="location">Location point</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults to true</param>
            <param name="addLeader">Optional: Add a leader, defaults to false</param>
            <returns></returns>
            <search>
            tagelement,annotate,documentation,taglocation
            </search>
        </member>
        <member name="M:Revit.Elements.Tag.ByElementAndOffset(Revit.Elements.Views.View,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a Revit Tag for a Revit Element at an offset location 
            from the element's view extents
            </summary>
            <param name="view">View to tag in</param>
            <param name="element">Element to tag</param>
            <param name="horizontal">Optional: Place tag horizontal, 
            defaults to true</param>
            <param name="addLeader">Optional: Add a leader, defaults to false</param>
            <param name="offset">Optional: Offset Vector, defaults to 0,0,0</param>
            <param name="horizontalAlignment">Optional: Horizontal Alignment 
            within the element's extents, defaults to Center</param>
            <param name="verticalAlignment">Optional: Vertical Alignment 
            within the element's extents, defaults to Middle</param>
            <returns></returns>
            <search>
            tagelement,annotate,documentation,tagoffset,movetag
            </search>
        </member>
        <member name="P:Revit.Elements.Tag.TagText">
            <summary>
            Get Tag's Text
            </summary>
        </member>
        <member name="P:Revit.Elements.Tag.TaggedElement">
            <summary>
            Get Tagged Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Tag.FromExisting(Autodesk.Revit.DB.IndependentTag,System.Boolean)">
            <summary>
            Create form existing
            </summary>
            <param name="instance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="F:Revit.Elements.TextElement.Value">
            <summary>
            Text Value
            </summary>
        </member>
        <member name="F:Revit.Elements.TextElement.FontFamilyName">
            <summary>
            FontFamily Name
            </summary>
        </member>
        <member name="F:Revit.Elements.TextElement.Bold">
            <summary>
            Is Bold
            </summary>
        </member>
        <member name="F:Revit.Elements.TextElement.Italic">
            <summary>
            Is Italic
            </summary>
        </member>
        <member name="F:Revit.Elements.TextElement.FontSize">
            <summary>
            Fontsize in ft
            </summary>
        </member>
        <member name="F:Revit.Elements.TextElement.Location">
            <summary>
            Location
            </summary>
        </member>
        <member name="F:Revit.Elements.TextElement.Scale">
            <summary>
            Constant Scale for Font Size
            </summary>
        </member>
        <member name="F:Revit.Elements.TextElement.Alignment">
            <summary>
            Horizontal alignment
            </summary>
        </member>
        <member name="F:Revit.Elements.TextElement.Rotation">
            <summary>
            Rotation
            </summary>
        </member>
        <member name="P:Revit.Elements.TextElement.InternalElement">
            <summary>
            Internal Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.TextElement.InternalRevitElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.TextElement.InternalSetElement(Autodesk.Revit.DB.Element)">
            <summary>
            Set Internal Element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.TextElement.InternalSetTextSettings(System.String,System.Boolean,System.Boolean,System.Double,System.String,Autodesk.DesignScript.Geometry.Point,Autodesk.Revit.DB.HorizontalTextAlignment,System.Double)">
            <summary>
            Set Internal Text Display Settings
            </summary>
            <param name="value"></param>
            <param name="bold"></param>
            <param name="italic"></param>
            <param name="size"></param>
            <param name="fontFamilyName"></param>
            <param name="location"></param>
            <param name="alignment"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:Revit.Elements.TextElement.CreateText(System.String,System.Boolean,System.Boolean,System.Windows.Media.FontFamily,System.Double,System.Windows.Point)">
            <summary>
            Create the outline geometry based on the formatted text.
            </summary>
            <param name="text"></param>
            <param name="bold"></param>
            <param name="italic"></param>
            <param name="family"></param>
            <param name="size"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.TextElement.Tessellate(Autodesk.DesignScript.Interfaces.IRenderPackage,Autodesk.DesignScript.Interfaces.TessellationParameters)">
            <summary>
            Empty method - we don't want to tessellate text automatically
            but it seems we need this method to correctly import this library into Dynamo.
            See description in base class.
            </summary>
            <param name="package"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Revit.Elements.TextElement.RotatePoint(System.Windows.Point,System.Double)">
            <summary>
            Rotate point around 0,0
            </summary>
            <param name="point"></param>
            <param name="angle">Angle in degrees</param>
            <returns>Rotated point</returns>
        </member>
        <member name="T:Revit.Elements.TextNote">
            <summary>
            Revit Text Note Element
            </summary>
        </member>
        <member name="P:Revit.Elements.TextNote.InternalTextNote">
            <summary>
            TextNote
            </summary>
        </member>
        <member name="M:Revit.Elements.TextNote.#ctor(Autodesk.Revit.DB.TextNote)">
            <summary>
            TextNote from existing
            </summary>
            <param name="TextNote"></param>
        </member>
        <member name="M:Revit.Elements.TextNote.#ctor(Autodesk.Revit.DB.View,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.HorizontalTextAlignment,System.String,System.Boolean,System.Double,Autodesk.Revit.DB.ElementId)">
            <summary>
            TextNote by Location
            </summary>
            <param name="view"></param>
            <param name="origin"></param>
            <param name="alignment"></param>
            <param name="text"></param>
            <param name="keepRotatedTextreadable"></param>
            <param name="rotation">in degrees</param>
            <param name="typeId"></param>
        </member>
        <member name="M:Revit.Elements.TextNote.InternalSetType(System.String,Autodesk.Revit.DB.TextNoteType,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.HorizontalTextAlignment,System.Double)">
            <summary>
            Set Text
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="location"></param>
            <param name="alignment"></param>
            <param name="angle"></param>
        </member>
        <member name="M:Revit.Elements.TextNote.InitElement(Autodesk.Revit.DB.TextNote)">
            <summary>
            Init element from existing
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.TextNote.Init(Autodesk.Revit.DB.View,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.HorizontalTextAlignment,System.String,System.Boolean,System.Double,Autodesk.Revit.DB.ElementId)">
            <summary>
            Init element by location
            </summary>
            <param name="view"></param>
            <param name="origin"></param>
            <param name="alignment"></param>
            <param name="text"></param>
            <param name="keepRotatedTextreadable"></param>
            <param name="rotation">in degrees</param>
            <param name="typeId"></param>
        </member>
        <member name="M:Revit.Elements.TextNote.ByLocation(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Point,System.String,System.String,Revit.Elements.TextNoteType,System.Boolean,System.Double)">
            <summary>
            Construct a new Revit TextNote by Location
            </summary>
            <param name="view">View to place text element on</param>
            <param name="location">Location in view</param>
            <param name="text">Text</param>
            <param name="alignment">Text alignment</param>
            <param name="keepRotatedTextReadable">Keep text horizontal</param>
            <param name="rotation">Rotation in degrees</param>
            <param name="type">Revit TextNote Type</param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.TextNote.Text">
            <summary>
            Get Text
            </summary>
        </member>
        <member name="M:Revit.Elements.TextNote.SetText(System.String)">
            <summary>
            Set Text
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Revit.Elements.TextNote.SetKeepRotatedTextReadable(System.Boolean)">
            <summary>
            Set Keep Rotated Text Readable
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Revit.Elements.TextNote.SetHorizontalAlignment(System.String)">
            <summary>
            Set Horizontal Text Alignment
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Revit.Elements.TextNote.HorizontalAlignment">
            <summary>
            Get Horizontal Alignment
            </summary>
        </member>
        <member name="P:Revit.Elements.TextNote.VerticalAlignment">
            <summary>
            Get Vertical Alignment
            </summary>
        </member>
        <member name="P:Revit.Elements.TextNote.Height">
            <summary>
            Get Height
            </summary>
        </member>
        <member name="P:Revit.Elements.TextNote.Typename">
            <summary>
            Get Typename
            </summary>
        </member>
        <member name="M:Revit.Elements.TextNote.FromExisting(Autodesk.Revit.DB.TextNote,System.Boolean)">
            <summary>
            Create from existing
            </summary>
            <param name="instance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.TextNoteType">
            <summary>
            A Revit TextNoteType
            </summary>
        </member>
        <member name="P:Revit.Elements.TextNoteType.InternalTextNoteType">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Elements.TextNoteType.#ctor(Autodesk.Revit.DB.TextNoteType)">
            <summary>
            Private constructor for the Element
            </summary>
            <param name="textNoteType"></param>
        </member>
        <member name="M:Revit.Elements.TextNoteType.ByName(System.String)">
            <summary>
            Select a ModelTextType from the current document by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.TextNoteType.Default">
            <summary>
            Return a default TextNoteType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.TextNoteType.FromExisting(Autodesk.Revit.DB.TextNoteType,System.Boolean)">
            <summary>
            Create from an existing Revit element
            </summary>
            <param name="modelTextType"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.UnknownElement">
            <summary>
            A Revit Element of an unknown type.  This allows an arbitrary element
            to be passed around in the graph.
            </summary>
        </member>
        <member name="F:Revit.Elements.UnknownElement._element">
            <summary>
            A reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Elements.UnknownElement.#ctor(Autodesk.Revit.DB.Element)">
            <summary>
            Private constructor
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.UnknownElement.InitUnknownElement(Autodesk.Revit.DB.Element)">
            <summary>
            Initialize an UnknownElement element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.UnknownElement.FromExisting(Autodesk.Revit.DB.Element,System.Boolean)">
            <summary>
            Wrap an element.  By default, this element is owned by Revit.  You must
            set this value manually if that's not what you want.
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Revit.Elements.FloorType">
            <summary>
            A Revit FloorType
            </summary>
            http://revitapisearch.com.s3-website-us-east-1.amazonaws.com/html/b6fd8c08-7eea-1ab4-b7ab-096778b46e8f.htm
        </member>
        <member name="P:Revit.Elements.FloorType.InternalFloorType">
            <summary>
            An internal reference to the FloorType
            </summary>
        </member>
        <member name="M:Revit.Elements.FloorType.#ctor(Autodesk.Revit.DB.FloorType)">
            <summary>
            Construct from an existing Revit Element
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Revit.Elements.FloorType.Name">
            <summary>
            The name of the FloorType
            </summary>
        </member>
        <member name="P:Revit.Elements.FloorType.IsFoundationSlab">
            <summary>
            Returns whether the element FloorAttributes type is FoundationSlab.
            </summary>
        </member>
        <member name="M:Revit.Elements.FloorType.ByName(System.String)">
            <summary>
            Select a FloorType from the document given 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.FloorType.FromExisting(Autodesk.Revit.DB.FloorType,System.Boolean)">
            <summary>
            Create a FloorType from a user selected Element.
            </summary>
            <param name="floorType"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.FloorType.GetStructuralMaterial">
            <summary>
            Gets the structural material of the FloorType.
            </summary>
            <returns>Returns the material that defines the element's structural analysis properties.</returns>
        </member>
        <member name="M:Revit.Elements.FloorType.GetThermalProperties">
            <summary>
            The calculated and settable thermal properties of the FloorType
            </summary>
            <returns name = "Absorptance">Value of absorptance.</returns>
            <returns name = "HeatTransferCoefficient">The heat transfer coefficient value (U-Value).</returns>
            <returns name = "Roughness">Value of roughness.</returns>
            <returns name = "ThermalMass">The calculated thermal mass value.</returns>
            <returns name = "ThermalResistance">The calculated thermal resistance value (R-Value).</returns>
        </member>
        <member name="T:Revit.Elements.ImportInstance">
            <summary>
            A Revit ImportInstance Element
            </summary>
        </member>
        <member name="M:Revit.Elements.ImportInstance.#ctor(System.String,Autodesk.Revit.DB.XYZ,Revit.Elements.Views.View)">
            <summary>
            Constructor for ImportInstance
            </summary>
            <param name="satPath"></param>
            <param name="translation"></param>
            <param name="view"></param>
        </member>
        <member name="M:Revit.Elements.ImportInstance.#ctor(Autodesk.Revit.DB.ImportInstance)">
            <summary>
            ImportInstance from existing
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.ImportInstance.InitImportInstance(System.String,Revit.Elements.Views.View,Autodesk.Revit.DB.XYZ)">
            <summary>
            Initialize an ImportInstance element
            </summary>
            <param name="satPath"></param>
            <param name="translation"></param>
            <param name="view"></param>
        </member>
        <member name="P:Revit.Elements.ImportInstance.Path">
            <summary>
            Gets file path of the sat file that represents the geometry of the specified ImportInstance Element
            </summary>
        </member>
        <member name="M:Revit.Elements.ImportInstance.BySATFile(System.String)">
            <summary>
            Import Geometry from a SAT file.  The SAT file is assumed to be in Feet.
            </summary>
            <param name="pathToFile">The path to the SAT file</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ImportInstance.ByGeometries(Autodesk.DesignScript.Geometry.Geometry[])">
            <summary>
            Import a collection of Geometry (Solid, Curve, Surface, etc) into Revit as an ImportInstance.  This variant is much faster than
            ImportInstance.ByGeometry as it uses a batch method.
            </summary>
            <param name="geometries">A collection of Geometry</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ImportInstance.ByGeometriesAndView(Autodesk.DesignScript.Geometry.Geometry[],Revit.Elements.Views.View)">
            <summary>
            Import a collection of Geometry (Solid, Curve, Surface, etc) into Revit views as an ImportInstance.  This variant is much faster than
            ImportInstance.ByGeometry as it uses a batch method.
            </summary>
            <param name="geometries">A collection of Geometry</param>
            <param name="view">The view into which the ImportInstance will be imported.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ImportInstance.ByGeometry(Autodesk.DesignScript.Geometry.Geometry)">
            <summary>
            Import a collection of Geometry (Solid, Curve, Surface, etc) into Revit as an ImportInstance.
            </summary>
            <param name="geometry">A single piece of geometry</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ImportInstance.ByGeometryAndView(Autodesk.DesignScript.Geometry.Geometry,Revit.Elements.Views.View)">
            <summary>
            Import a collection of Geometry (Solid, Curve, Surface, etc) into Revit views as an ImportInstance.
            </summary>
            <param name="geometry">A single piece of geometry</param>
            <param name="view">The view into which the ImportInstance will be imported.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ImportInstance.Robustify(Autodesk.DesignScript.Geometry.Geometry@,Autodesk.DesignScript.Geometry.Vector@)">
            <summary>
            This method contains workarounds for increasing the robustness of input geometry
            </summary>
            <param name="geometry"></param>
            <param name="translation"></param>
        </member>
        <member name="M:Revit.Elements.ImportInstance.Robustify(Autodesk.DesignScript.Geometry.Geometry[]@,Autodesk.DesignScript.Geometry.Vector@)">
            <summary>
            This method contains workarounds for increasing the robustness of input geometry
            </summary>
            <param name="geometries"></param>
            <param name="translation"></param>
        </member>
        <member name="M:Revit.Elements.ImportInstance.CreateSATFile(Autodesk.DesignScript.Geometry.Geometry[],Autodesk.DesignScript.Geometry.Vector@)">
            <summary>
            Create a SAT and export it to a temporary file.
            </summary>
            <param name="geometries"></param>
            <param name="translation"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.ModelText">
            <summary>
            A Revit ModelText Element Point
            </summary>
        </member>
        <member name="P:Revit.Elements.ModelText.InternalModelText">
            <summary>
            Internal variable containing the wrapped Revit object
            </summary>
        </member>
        <member name="P:Revit.Elements.ModelText.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.ModelText.#ctor(Autodesk.Revit.DB.ModelText)">
            <summary>
            Internal constructor for wrapping a ModelText. 
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.ModelText.#ctor(System.String,Autodesk.Revit.DB.SketchPlane,System.Double,System.Double,System.Double,Autodesk.Revit.DB.ModelTextType)">
            <summary>
            Internal constructor for the ModelText
            </summary>
            <param name="text"></param>
            <param name="sketchPlane"></param>
            <param name="xCoordinateInPlane"></param>
            <param name="yCoordinateInPlane"></param>
            <param name="textDepth"></param>
            <param name="modelTextType"></param>
        </member>
        <member name="M:Revit.Elements.ModelText.InitModelText(Autodesk.Revit.DB.ModelText)">
            <summary>
            Initialize a ModelText element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Elements.ModelText.InitModelText(System.String,Autodesk.Revit.DB.SketchPlane,System.Double,System.Double,System.Double,Autodesk.Revit.DB.ModelTextType)">
            <summary>
            Initialize a ModelText element
            </summary>
            <param name="text"></param>
            <param name="sketchPlane"></param>
            <param name="xCoordinateInPlane"></param>
            <param name="yCoordinateInPlane"></param>
            <param name="textDepth"></param>
            <param name="modelTextType"></param>
        </member>
        <member name="M:Revit.Elements.ModelText.InternalSetDepth(System.Double)">
            <summary>
            Set the Depth of the ModelText
            </summary>
            <param name="depth"></param>
        </member>
        <member name="M:Revit.Elements.ModelText.InternalSetText(System.String)">
            <summary>
            Set the Text of the ModelText
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Revit.Elements.ModelText.InternalSetModelTextType(Autodesk.Revit.DB.ModelTextType)">
            <summary>
            Set the ModelTextType of the text
            </summary>
            <param name="modelTextType"></param>
        </member>
        <member name="M:Revit.Elements.ModelText.InternalSetModelText(Autodesk.Revit.DB.ModelText)">
            <summary>
            Set the Element, ElementId, and UniqueId
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Revit.Elements.ModelText.PositionUnchanged(Autodesk.Revit.DB.ModelText,Autodesk.Revit.DB.SketchPlane,System.Double,System.Double)">
            <summary>
            Check if the position of a ModelText has changed, given the original ModelText Element
            and the new position in the SketchPlane
            </summary>
            <param name="oldModelText"></param>
            <param name="newSketchPlane"></param>
            <param name="xCoordinateInPlane"></param>
            <param name="yCoordinateInPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ModelText.CreateModelText(System.String,Autodesk.Revit.DB.SketchPlane,System.Double,System.Double,System.Double,Autodesk.Revit.DB.ModelTextType)">
            <summary>
            Create a ModelText element in the current Family Document
            </summary>
            <param name="text"></param>
            <param name="sketchPlane"></param>
            <param name="xCoordinateInPlane"></param>
            <param name="yCoordinateInPlane"></param>
            <param name="textDepth"></param>
            <param name="modelTextType"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.ModelText.Text">
            <summary>
            The Text of the ModelText Element
            </summary>
        </member>
        <member name="P:Revit.Elements.ModelText.Depth">
            <summary>
            The Depth of the ModelText Element
            </summary>
        </member>
        <member name="P:Revit.Elements.ModelText.Position">
            <summary>
            The Position of the ModelText Element
            </summary>
        </member>
        <member name="M:Revit.Elements.ModelText.ByTextSketchPlaneAndPosition(System.String,Revit.Elements.SketchPlane,System.Double,System.Double,System.Double,Revit.Elements.ModelTextType)">
            <summary>
            Create a ModelText Element in the Family Document by providing the text, SketchPlane Element host, coordinates (within the plane of the SketchPlane),
            the depth of the text, and the text type name
            </summary>
            <param name="text"></param>
            <param name="sketchPlane"></param>
            <param name="xCoordinateInPlane"></param>
            <param name="yCoordinateInPlane"></param>
            <param name="textDepth"></param>
            <param name="modelTextType"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ModelText.FromExisting(Autodesk.Revit.DB.ModelText,System.Boolean)">
            <summary>
            Create a ModelText Element from a user selected Element.
            </summary>
            <param name="pt"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.ModelTextType">
            <summary>
            A Revit ModelTextType
            </summary>
        </member>
        <member name="P:Revit.Elements.ModelTextType.InternalModelTextType">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Elements.ModelTextType.#ctor(Autodesk.Revit.DB.ModelTextType)">
            <summary>
            Construct from an existing Revit Element
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Revit.Elements.ModelTextType.ByName(System.String)">
            <summary>
            Select a ModelTextType from the current document by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ModelTextType.FromExisting(Autodesk.Revit.DB.ModelTextType,System.Boolean)">
            <summary>
            Create from an existing Revit element
            </summary>
            <param name="modelTextType"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.DSStructuralTypeExtensions">
            <summary>
            Convert to Revit enum
            </summary>
        </member>
        <member name="T:Revit.Elements.ElementWrapper">
            <summary>
            Element wrapper supplies tools for wrapping Autodesk.Revit.DB.Element types
            in their associated Revit.Elements.Element wrapper
            </summary>
        </member>
        <member name="M:Revit.Elements.ElementWrapper.ToDSType(Autodesk.Revit.DB.Element,System.Boolean)">
            <summary>
            If possible, wrap the element in a DS type
            </summary>
            <param name="ele"></param>
            <param name="isRevitOwned">Whether the returned object should be revit owned or not</param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Topography.InternalTopographySurface">
            <summary>
            Internal variable containing the wrapped Revit object
            </summary>
        </member>
        <member name="P:Revit.Elements.Topography.Points">
            <summary>
            The set of points from which this TopographySurface is constructed.
            </summary>
        </member>
        <member name="P:Revit.Elements.Topography.Mesh">
            <summary>
            Get the underlying triangular Mesh from the Topography
            </summary>
        </member>
        <member name="M:Revit.Elements.Topography.InitTopography(System.Collections.Generic.IList{Autodesk.Revit.DB.XYZ})">
            <summary>
            Initialize a Topography element
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Revit.Elements.Topography.InitTopography(Autodesk.Revit.DB.Architecture.TopographySurface)">
            <summary>
            Initialize a Topography element
            </summary>
            <param name="topoSurface"></param>
        </member>
        <member name="M:Revit.Elements.Topography.ByPoints(System.Collections.Generic.IEnumerable{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Create a topography surface from a list of points.
            </summary>
            <param name="points">The points which define the topography surface.</param>
            <returns>A topography surface through the specified points.</returns>
        </member>
        <member name="T:Revit.Elements.PlanView">
            <summary>
            Base class for Revit Plan views
            </summary>
        </member>
        <member name="P:Revit.Elements.PlanView.InternalViewPlan">
            <summary>
            An internal handle on the Revit element
            </summary>
        </member>
        <member name="P:Revit.Elements.PlanView.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.PlanView.InternalSetPlanView(Autodesk.Revit.DB.ViewPlan)">
            <summary>
            Set the InternalViewPlan property and the associated element id and unique id
            </summary>
            <param name="plan">ViewPlan</param>
        </member>
        <member name="P:Revit.Elements.Form.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Form.#ctor(Autodesk.Revit.DB.Form)">
            <summary>
            Construct a Revit Form from an existing form.  
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Revit.Elements.Form.#ctor(System.Boolean,Autodesk.Revit.DB.ReferenceArrayArray)">
            <summary>
            Create a Form by lofting
            </summary>
            <param name="isSolid"></param>
            <param name="curves"></param>
        </member>
        <member name="M:Revit.Elements.Form.InitForm(Autodesk.Revit.DB.Form)">
            <summary>
            Initialize a form element
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Revit.Elements.Form.InitForm(System.Boolean,Autodesk.Revit.DB.ReferenceArrayArray)">
            <summary>
            Initialize a form element
            </summary>
            <param name="isSolid"></param>
            <param name="curves"></param>
        </member>
        <member name="M:Revit.Elements.Form.ByLoftCrossSections(Autodesk.DesignScript.Geometry.Curve[][],System.Boolean)">
            <summary>
             Creates a Form by lofting a nested list of curves
            </summary>
            <param name="curves"></param>
            <param name="isSolid"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Form.FromExisting(Autodesk.Revit.DB.Form,System.Boolean)">
            <summary>
            Construct the Revit element by selection.  
            </summary>
            <param name="formElement"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.SketchPlane">
            <summary>
            A Revit SketchPlane
            </summary>
        </member>
        <member name="P:Revit.Elements.SketchPlane.InternalSketchPlane">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.SketchPlane.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.SketchPlane.#ctor(Autodesk.Revit.DB.SketchPlane)">
            <summary>
            Set the Sketch plane from an existing one
            </summary>
            <param name="existingSketchPlane"></param>
        </member>
        <member name="M:Revit.Elements.SketchPlane.#ctor(Autodesk.Revit.DB.Plane)">
            <summary>
            Make a SketchPlane from a plane
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Revit.Elements.SketchPlane.InitSketchPlane(Autodesk.Revit.DB.SketchPlane)">
            <summary>
            Initialize a SketchPlane element
            </summary>
            <param name="existingSketchPlane"></param>
        </member>
        <member name="M:Revit.Elements.SketchPlane.InitSketchPlane(Autodesk.Revit.DB.Plane)">
            <summary>
            Initialize a SketchPlane element
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Revit.Elements.SketchPlane.InternalSetPlane(Autodesk.Revit.DB.Plane)">
            <summary>
            Attempt to set the plane of an existing SketchPlane
            </summary>
            <param name="p"></param>
            <returns>False if the new sketch plane is not parallel to the existing one</returns>
        </member>
        <member name="M:Revit.Elements.SketchPlane.InternalSetSketchPlane(Autodesk.Revit.DB.SketchPlane)">
            <summary>
            Set the Element, ElementId, and UniqueId
            </summary>
            <param name="existingSketchPlane"></param>
        </member>
        <member name="P:Revit.Elements.SketchPlane.ElementPlaneReference">
            <summary>
            Get an element plane reference from a specified sketch plane
            </summary>
        </member>
        <member name="P:Revit.Elements.SketchPlane.Plane">
            <summary>
            Gets the plane geometry of the specified sketch plane
            </summary>
        </member>
        <member name="M:Revit.Elements.SketchPlane.ByPlane(Autodesk.DesignScript.Geometry.Plane)">
            <summary>
            Make a Revit SketchPlane given a plane
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.SketchPlane.FromExisting(Autodesk.Revit.DB.SketchPlane,System.Boolean)">
            <summary>
            Create from an existing element
            </summary>
            <param name="existingSketchPlane"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.FaceWall">
            <summary>
            FaceWall Element
            </summary>
        </member>
        <member name="P:Revit.Elements.FaceWall.InternalFaceWall">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.FaceWall.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.FaceWall.#ctor(Autodesk.Revit.DB.FaceWall)">
            <summary>
            Create from an existing Revit Element
            </summary>
            <param name="wall"></param>
        </member>
        <member name="M:Revit.Elements.FaceWall.#ctor(Autodesk.Revit.DB.WallLocationLine,Autodesk.Revit.DB.WallType,Autodesk.Revit.DB.Reference)">
            <summary>
            Create a new instance of WallType, deleting the original
            </summary>
            <param name="location"></param>
            <param name="wallType"></param>
            <param name="reference"></param>
        </member>
        <member name="M:Revit.Elements.FaceWall.InitFaceWall(Autodesk.Revit.DB.FaceWall)">
            <summary>
            Initialize a Wall element
            </summary>
            <param name="wall"></param>
        </member>
        <member name="M:Revit.Elements.FaceWall.InitFaceWall(Autodesk.Revit.DB.WallLocationLine,Autodesk.Revit.DB.WallType,Autodesk.Revit.DB.Reference)">
            <summary>
            Initialize a Wall element
            </summary>
            <param name="location"></param>
            <param name="wallType"></param>
            <param name="reference"></param>
        </member>
        <member name="M:Revit.Elements.FaceWall.InternalSetFaceWall(Autodesk.Revit.DB.FaceWall)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
            <param name="wall"></param>
        </member>
        <member name="M:Revit.Elements.FaceWall.ByFace(Autodesk.Revit.DB.WallLocationLine,Revit.Elements.WallType,Autodesk.DesignScript.Geometry.Surface)">
            <summary>
            Create Wall By Face
            </summary>
            <param name="locationLine"></param>
            <param name="wallType"></param>
            <param name="surface"></param>
            <returns></returns>
            Note: This is wrapped in Wall. FaceWalls will be created there.
        </member>
        <member name="M:Revit.Elements.FaceWall.ByFace(Autodesk.Revit.DB.WallLocationLine,Revit.Elements.WallType,Autodesk.Revit.DB.Reference)">
            <summary>
            Create Wall By Face
            </summary>
            <param name="location"></param>
            <param name="wallType"></param>
            <param name="reference"></param>
            <returns></returns>
            Nots: This is for testing purposes only to directly use references from the Revit API
        </member>
        <member name="M:Revit.Elements.FaceWall.FromExisting(Autodesk.Revit.DB.FaceWall,System.Boolean)">
            <summary>
            Create a Revit FaceWall from an existing reference
            </summary>
            <param name="wall"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.WallType">
            <summary>
            A Revit WallType
            </summary>
        </member>
        <member name="P:Revit.Elements.WallType.InternalWallType">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Elements.WallType.#ctor(Autodesk.Revit.DB.WallType)">
            <summary>
            Construct from an existing Revit Element
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Revit.Elements.WallType.Name">
            <summary>
            The name of the WallType
            </summary>
        </member>
        <member name="P:Revit.Elements.WallType.Width">
            <summary>
            The width of the WallType
            </summary>
        </member>
        <member name="P:Revit.Elements.WallType.Kind">
            <summary>
            The kind of the WallType
            </summary>
        </member>
        <member name="P:Revit.Elements.WallType.Function">
            <summary>
            The function of the WallType
            </summary>
        </member>
        <member name="M:Revit.Elements.WallType.ByName(System.String)">
            <summary>
            Select a walltype from the current document by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.WallType.FromExisting(Autodesk.Revit.DB.WallType,System.Boolean)">
            <summary>
            Create from an existign Revit element
            </summary>
            <param name="wallType"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.WallType.GetThermalProperties">
            <summary>
            The calculated and settable thermal properties of the WallType
            </summary>
            <returns name = "Absorptance">Value of absorptance.</returns>
            <returns name = "HeatTransferCoefficient">The heat transfer coefficient value (U-Value).</returns>
            <returns name = "Roughness">Value of roughness.</returns>
            <returns name = "ThermalMass">The calculated thermal mass value.</returns>
            <returns name = "ThermalResistance">The calculated thermal resistance value (R-Value).</returns>
        </member>
        <member name="T:Revit.Elements.FillPatternElement">
            <summary>
            Fill Pattern Element
            </summary>
        </member>
        <member name="P:Revit.Elements.FillPatternElement.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.FillPatternElement.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.FillPatternElement.InternalSetElement(Autodesk.Revit.DB.FillPatternElement)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Revit.Elements.FillPatternElement.#ctor(Autodesk.Revit.DB.FillPatternElement)">
            <summary>
            FillPatternElement from existing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Revit.Elements.FillPatternElement.InitElement(Autodesk.Revit.DB.FillPatternElement)">
            <summary>
            Init FillPatternElement from existing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Revit.Elements.FillPatternElement.GetByName(System.String,System.String)">
            <summary>
            Fill Pattern Element by Name and Target Type.
            </summary>
            <param name="name">Name of the Fill Pattern.</param>
            <param name="fillPatternTarget">Target Fill pattern. Fill Patterns can be either "Drafting" or "Modeling". Default is "Drafting".</param>
            <returns name="FillPattern">Filled Pattern Element.</returns>
        </member>
        <member name="M:Revit.Elements.FillPatternElement.FromExisting(Autodesk.Revit.DB.FillPatternElement,System.Boolean)">
            <summary>
            From existing element
            </summary>
            <param name="instance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.LinePatternElement">
            <summary>
            Line Pattern Element
            </summary>
        </member>
        <member name="P:Revit.Elements.LinePatternElement.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.LinePatternElement.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.LinePatternElement.InternalSetElement(Autodesk.Revit.DB.LinePatternElement)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Revit.Elements.LinePatternElement.#ctor(Autodesk.Revit.DB.LinePatternElement)">
            <summary>
            LinePatternElement from existing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Revit.Elements.LinePatternElement.InitElement(Autodesk.Revit.DB.LinePatternElement)">
            <summary>
            Init LinePatternElement from existing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Revit.Elements.LinePatternElement.GetByName(System.String)">
            <summary>
            Line Pattern Element by name.
            </summary>
            <param name="name">Name of the line pattern.</param>
            <returns name="LinePattern">Filled Pattern Element.</returns>
        </member>
        <member name="M:Revit.Elements.LinePatternElement.FromExisting(Autodesk.Revit.DB.LinePatternElement,System.Boolean)">
            <summary>
            From existing element
            </summary>
            <param name="instance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ElementSelector.ByType``1(System.Boolean)">
            <summary>
            Get a collection of wrapped elements from the current document by type
            </summary>
            <typeparam name="T">The type of the Revit element to select</typeparam>
            <param name="isRevitOwned">Whether the returned object should be revit owned or not</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ElementSelector.ByElementId(System.Int32,System.Boolean)">
            <summary>
            A factory method for looking up and obtaining elements
            from the revit project.
            </summary>
            <param name="elementId">The id of the element to select</param>
            <param name="isRevitOwned">Whether the returned object should be revit owned or not</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ElementSelector.ByUniqueId(System.String,System.Boolean)">
            <summary>
            A factory method for looking up and obtaining elements
            from the revit project
            </summary>
            <param name="uniqueId">The unique id of the element to select</param>
            <param name="isRevitOwned">Whether the returned object should be revit owned or not</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ElementSelector.InternalGetElementById(System.Int32)">
            <summary>
            Internal helper method to get an element from the current document by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ElementSelector.InternalGetElementByUniqueId(System.String)">
            <summary>
            Obtain an element from the current document given the element's unique id
            </summary>
            <param name="uniqueId"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Family">
            <summary>
            A Revit Family
            </summary>
        </member>
        <member name="P:Revit.Elements.Family.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Family.InternalSetFamily(Autodesk.Revit.DB.Family)">
            <summary>
            Set the internal Revit representation and update the ElementId and UniqueId
            </summary>
            <param name="family"></param>
        </member>
        <member name="P:Revit.Elements.Family.Types">
            <summary>
            Obtain the FamilyTypes from this Family
            </summary>
            <search>
            symbols,symbol
            </search>
        </member>
        <member name="P:Revit.Elements.Family.Name">
            <summary>
            The name of this family
            </summary>
        </member>
        <member name="M:Revit.Elements.Family.ByName(System.String)">
            <summary>
            Obtain a Family from the current document given it's name
            </summary>
            <param name="name">The name of the family in the current document</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Family.FamilyDocument">
            <summary>
            Gets the document of a loaded family.
            </summary>
            <returns>Reference of the document of the family.</returns>
        </member>
        <member name="M:Revit.Elements.Family.FromExisting(Autodesk.Revit.DB.Family,System.Boolean)">
            <summary>
            Construct an Element from an existing Element in the Document
            </summary>
            <param name="family"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Parameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:Revit.Elements.Parameter.Value">
            <summary>
            Get the value of the parameter
            </summary>
        </member>
        <member name="P:Revit.Elements.Parameter.HasValue">
            <summary>
            Check if the Parameter has a value
            </summary>
        </member>
        <member name="P:Revit.Elements.Parameter.IsReadOnly">
            <summary>
            Check if the Parameter is read only
            </summary>
        </member>
        <member name="P:Revit.Elements.Parameter.IsShared">
            <summary>
            Check if the Parameter is shared
            </summary>
        </member>
        <member name="P:Revit.Elements.Parameter.Group">
            <summary>
            Get the parameter's group
            </summary>
        </member>
        <member name="P:Revit.Elements.Parameter.ParameterType">
            <summary>
            Get the parameter type
            </summary>
        </member>
        <member name="P:Revit.Elements.Parameter.Id">
            <summary>
            Get the parameter's element Id
            </summary>
        </member>
        <member name="P:Revit.Elements.Parameter.UnitType">
            <summary>
            Get the parameter's unit type
            </summary>
        </member>
        <member name="M:Revit.Elements.Parameter.ParameterByName(Revit.Elements.Element,System.String)">
            <summary>
            Get Element's Parameter by Name
            </summary>
            <param name="element">Element</param>
            <param name="name">Parameter Name</param>
            <returns>Parameter</returns>
        </member>
        <member name="M:Revit.Elements.Parameter.SetValue(Revit.Elements.Parameter,System.Object)">
            <summary>
            Set the value of the parameter
            </summary>
        </member>
        <member name="P:Revit.Elements.Parameter.StorageType">
            <summary>
            Get Parameter Storage Type
            </summary>
        </member>
        <member name="M:Revit.Elements.Parameter.SharedParameterFile">
            <summary>
            Gets the path to the shared parameter file of this document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Parameter.CreateSharedParameterForAllCategories(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a new Shared Parameter in the current Revit document for all applicable categories
            </summary>
            <param name="parameterName">Name</param>
            <param name="groupName">Group of the parameter for shared parameters</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
        </member>
        <member name="M:Revit.Elements.Parameter.CreateSharedParameter(System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Create a new Shared Parameter in the current Revit document
            </summary>
            <param name="parameterName">Name</param>
            <param name="groupName">Group of the parameter for shared parameters</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="categoryList">List of categories this parameter applies to, If no category is supplied, all possible categories are selected</param>
        </member>
        <member name="M:Revit.Elements.Parameter.CreateProjectParameterForAllCategories(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a new Project Parameter in this current Revit document for all applicable categories
            </summary>
            <param name="parameterName">Name</param>
            <param name="groupName">Group of the parameter for shared parameters</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
        </member>
        <member name="M:Revit.Elements.Parameter.CreateProjectParameter(System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Create a new Project Parameter in this current Revit document
            </summary>
            <param name="parameterName">Name</param>
            <param name="groupName">Group of the parameter for shared parameters</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="categoryList">List of categories this parameter applies to. If no category is supplied, all possible categories are selected</param>
        </member>
        <member name="M:Revit.Elements.Parameter.AllCategories">
            <summary>
            Get a CategorySet for all categories
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Parameter.ToCategorySet(System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Convert a list of categories to a category set
            </summary>
            <param name="categoryList"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.AdaptiveComponent">
            <summary>
            A Revit Adaptive Component
            </summary>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.#ctor(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            Internal constructor for existing Elements.
            </summary>
            <param name="familyInstance"></param>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.#ctor(System.Double[][],Revit.GeometryReferences.ElementFaceReference,Revit.Elements.FamilyType)">
            <summary>
            Internal constructor for the AdaptiveComponent wrapper
            </summary>
            <param name="pts">Points to use as reference</param>
            <param name="f">Face to use as reference</param>
            <param name="ft">familyType to place</param>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.#ctor(System.Double[],Autodesk.Revit.DB.Reference,Revit.Elements.FamilyType)">
            <summary>
            Internal constructor for the AdaptiveComponent wrapper
            </summary>
            <param name="parms">Params on curve to reference</param>
            <param name="c">Curve to use as reference</param>
            <param name="ft">familyType to place</param>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.InitAdaptiveComponent(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            Initialize an AdaptiveComponent element
            </summary>
            <param name="familyInstance"></param>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.InitAdaptiveComponent(System.Double[][],Revit.GeometryReferences.ElementFaceReference,Revit.Elements.FamilyType)">
            <summary>
            Initialize an AdaptiveComponent element
            </summary>
            <param name="uvParams">Parameters to use as reference</param>
            <param name="f">Face to use as reference</param>
            <param name="ft">familyType to place</param>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.InitAdaptiveComponent(System.Double[],Autodesk.Revit.DB.Reference,Revit.Elements.FamilyType)">
            <summary>
            Initialize an AdaptiveComponent element
            </summary>
            <param name="parms">Params on curve to reference</param>
            <param name="c">Curve to use as reference</param>
            <param name="ft">familyType to place</param>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.UpdatePlacementPoints(Autodesk.Revit.DB.FamilyInstance,Autodesk.Revit.DB.XYZ[])">
            <summary>
            Update the placement points of the adaptive component instance to the given points
            </summary>
            <param name="fi"></param>
            <param name="pnts"></param>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.InternalSetFamilySymbol(Revit.Elements.FamilyType)">
            <summary>
            Set the family symbol for the internal family instance 
            </summary>
            <param name="ft"></param>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.InternalSetUvsAndFace(Autodesk.Revit.DB.UV[],Autodesk.Revit.DB.Reference)">
            <summary>
            Set the positions of the InternalFamilyInstace from an array of uvs
            </summary>
            <param name="uvs"></param>
            <param name="faceReference"></param>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.InternalSetParamsAndCurve(System.Double[],Autodesk.Revit.DB.Reference)">
            <summary>
            Set the positions of the InternalFamilyInstace from an array of parameters and curve
            </summary>
            <param name="parms"></param>
            <param name="c"></param>
        </member>
        <member name="P:Revit.Elements.AdaptiveComponent.Type">
            <search>
            symbol
            </search>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.ByPoints(Autodesk.DesignScript.Geometry.Point[][],Revit.Elements.FamilyType)">
            <summary>
            Create a list of adaptive components from two-dimensional array of points
            </summary>
            <param name="points">a two-dimensional array of points</param>
            <param name="familyType">a family type to use to create the adaptive components</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.ByParametersOnFace(Autodesk.DesignScript.Geometry.UV[],Autodesk.DesignScript.Geometry.Surface,Revit.Elements.FamilyType)">
            <summary>
            Create an adaptive component by uv points on a face.
            </summary>
            <param name="uvs">An array of UV pairs</param>
            <param name="surface">The surface on which to place the AdaptiveComponent</param>
            <param name="familyType"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.ByParametersOnCurveReference(System.Double[],Autodesk.DesignScript.Geometry.Curve,Revit.Elements.FamilyType)">
            <summary>
            Create an adaptive component referencing the parameters on a Curve reference
            </summary>
            <param name="parameters">The parameters on the curve</param>
            <param name="curve">The curve to reference</param>
            <param name="familyType">The family type to construct</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.InternalByPoints(Autodesk.DesignScript.Geometry.Point[][],Revit.Elements.FamilyType)">
            <summary>
            Create a list of adaptive components from two-dimensional array of points
            </summary>
            <param name="points">a two-dimensional array of points</param>
            <param name="familyType">a family type to use to create the adaptive components</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.AdaptiveComponent.FromExisting(Autodesk.Revit.DB.FamilyInstance,System.Boolean)">
            <summary>
            Construct from an existing instance of an AdaptiveComponent. 
            </summary>
            <param name="familyInstance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.DividedPath">
            <summary>
            A Revit DividedPath
            </summary>
        </member>
        <member name="P:Revit.Elements.DividedPath.InternalDividedPath">
            <summary>
            Internal variable containing the wrapped Revit object
            </summary>
        </member>
        <member name="P:Revit.Elements.DividedPath.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="P:Revit.Elements.DividedPath.Points">
            <summary>
            All points along the DividedPath.
            </summary>
        </member>
        <member name="M:Revit.Elements.DividedPath.#ctor(Autodesk.Revit.DB.DividedPath)">
            <summary>
            Construct a DSDividedPath from an existing one.  
            </summary>
            <param name="divPath"></param>
        </member>
        <member name="M:Revit.Elements.DividedPath.#ctor(Revit.GeometryReferences.ElementCurveReference[],System.Int32)">
            <summary>
            Private constructor to build a DividedPath
            </summary>
            <param name="c">Host curves</param>
            <param name="divs">Number of divisions</param>
        </member>
        <member name="M:Revit.Elements.DividedPath.InitDividedPath(Autodesk.Revit.DB.DividedPath)">
            <summary>
            Initialize a DividedPath element  
            </summary>
            <param name="divPath"></param>
        </member>
        <member name="M:Revit.Elements.DividedPath.InitDividedPath(Revit.GeometryReferences.ElementCurveReference[],System.Int32)">
            <summary>
            Initialize a DividedPath element
            </summary>
            <param name="c">Host curves</param>
            <param name="divs">Number of divisions</param>
        </member>
        <member name="M:Revit.Elements.DividedPath.InternalSetDividedPath(Autodesk.Revit.DB.DividedPath)">
            <summary>
            Set the internal object and update the id's
            </summary>
            <param name="divPath">The divided path</param>
        </member>
        <member name="M:Revit.Elements.DividedPath.ByCurveAndDivisions(Autodesk.DesignScript.Geometry.Curve,System.Int32)">
            <summary>
            Creates a Revit divided path on the given curve with specified amount of division
            </summary>
            <param name="curve"></param>
            <param name="divisions"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.DividedPath.ByCurvesAndDivisions(Autodesk.DesignScript.Geometry.Curve[],System.Int32)">
            <summary>
            Creates a Revit divided path on the given collection of curves with specified amount of division
            </summary>
            <param name="curve"></param>
            <param name="divisions"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.DividedPath.FromExisting(Autodesk.Revit.DB.DividedPath,System.Boolean)">
            <summary>
            Construct this type from an existing Revit element.
            </summary>
            <param name="dividedPath"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.DividedSurface">
            <summary>
            A Revit DividedSurface
            </summary>
        </member>
        <member name="P:Revit.Elements.DividedSurface.InternalDividedSurface">
            <summary>
            Internal variable containing the wrapped Revit object
            </summary>
        </member>
        <member name="P:Revit.Elements.DividedSurface.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.DividedSurface.#ctor(Autodesk.Revit.DB.DividedSurface)">
            <summary>
            Construct from an existing Element.  The resulting object is Dynamo owned.
            </summary>
            <param name="divSurf"></param>
        </member>
        <member name="M:Revit.Elements.DividedSurface.#ctor(Revit.GeometryReferences.ElementFaceReference,System.Int32,System.Int32,System.Double)">
            <summary>
            Private constructor for creating a divided surface
            </summary>
            <param name="elementFace"></param>
            <param name="uDivs"></param>
            <param name="vDivs"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:Revit.Elements.DividedSurface.InitDividedSurface(Autodesk.Revit.DB.DividedSurface)">
            <summary>
            Initialize a DividedSurface element
            </summary>
            <param name="divSurf"></param>
        </member>
        <member name="M:Revit.Elements.DividedSurface.InitDividedSurface(Revit.GeometryReferences.ElementFaceReference,System.Int32,System.Int32,System.Double)">
            <summary>
            Initialize a DividedSurface element
            </summary>
            <param name="elementFace"></param>
            <param name="uDivs"></param>
            <param name="vDivs"></param>
            <param name="rotation"></param>
        </member>
        <member name="P:Revit.Elements.DividedSurface.UDivisions">
            <summary>
            Number of divisions in U direction
            </summary>
        </member>
        <member name="P:Revit.Elements.DividedSurface.VDivisions">
            <summary>
            Number of divisions in V direction
            </summary>
        </member>
        <member name="P:Revit.Elements.DividedSurface.Rotation">
            <summary>
            Rotation of the grid lines with respect to the UV parameterization
            of the face
            </summary>
        </member>
        <member name="M:Revit.Elements.DividedSurface.InternalSetDividedSurface(Autodesk.Revit.DB.DividedSurface)">
            <summary>
            Method to set the internal divided surface, id, and unique id
            </summary>
            <param name="divSurf"></param>
        </member>
        <member name="M:Revit.Elements.DividedSurface.InternalSetDivisions(System.Int32,System.Int32)">
            <summary>
            Method to mutate the number of divisions of the internal divided surface.  Will
            fail if the divided surface is not set
            </summary>
            <param name="uDivs"></param>
            <param name="vDivs"></param>
        </member>
        <member name="M:Revit.Elements.DividedSurface.InternalSetRotation(System.Double)">
            <summary>
            Method to set the grid rotation of the internal divided surface
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:Revit.Elements.DividedSurface.ByFaceAndUVDivisions(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Create a Revit DividedSurface on a face given the face and number of divisions in u and v directon
            </summary>
            <param name="elementFace"></param>
            <param name="uDivs"></param>
            <param name="vDivs"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.DividedSurface.ByFaceUVDivisionsAndRotation(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32,System.Double)">
            <summary>
            Create a Revit DividedSurface on a face given the face and number of divisions in u and v directon
            and the rotation of the grid lines with respect to the natural UV parameterization of the face
            </summary>
            <param name="surface"></param>
            <param name="uDivs"></param>
            <param name="vDivs"></param>
            <param name="gridRotation"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.DividedSurface.FromExisting(Autodesk.Revit.DB.DividedSurface,System.Boolean)">
            <summary>
            Construct this type from an existing Revit element.
            </summary>
            <param name="dividedSurface"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.FamilyType">
            <summary>
            A Revit FamilyType, the Revit API refers to this as a FamilySymbol
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyType.InternalFamilySymbol">
            <summary>
            Internal wrapper property
            </summary>
        </member>
        <member name="M:Revit.Elements.FamilyType.#ctor(Autodesk.Revit.DB.FamilySymbol)">
            <summary>
            Private constructor for building a DSFamilySymbol
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="P:Revit.Elements.FamilyType.Name">
            <summary>
            Get the name of this Family Type
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyType.Family">
            <summary>
            Get the parent family of this FamilyType
            </summary>
        </member>
        <member name="M:Revit.Elements.FamilyType.ByFamilyAndName(Revit.Elements.Family,System.String)">
            <summary>
            Select a FamilyType given its parent Family and the FamilyType's name.
            </summary>
            <param name="family">The FamilyTypes's parent Family</param>
            <param name="name">The name of the FamilyType</param>
            <returns></returns>
            <search>
            symbol
            </search>
        </member>
        <member name="M:Revit.Elements.FamilyType.ByFamilyNameAndTypeName(System.String,System.String)">
            <summary>
            Select a FamilyType give it's family name and type name.
            </summary>
            <param name="familyName">The FamilyType's parent Family name.</param>
            <param name="typeName">The name of the FamilyType.</param>
            <returns></returns>
            <search>
            symbol
            </search>
        </member>
        <member name="M:Revit.Elements.FamilyType.ByName(System.String)">
            <summary>
            Select a FamilyType given it's name.  This method will return the first FamilyType it finds if there are
            two or more FamilyTypes with the same name.
            </summary>
            <param name="name">The name of the FamilyType</param>
            <returns></returns>
            <search>
            symbol
            </search>
        </member>
        <member name="M:Revit.Elements.FamilyType.ByGeometry(Autodesk.DesignScript.Geometry.Solid,System.String,Revit.Elements.Category,System.String,Revit.Elements.Material,System.String)">
            <summary>
            Create new Family Type from a solid geometry.
            This method exports the geometry to SAT and imports it into
            a new family document.
            </summary>
            <param name="solidGeometry"></param>
            <param name="name">Name fo the Family Type</param>
            <param name="category">Family Type Category</param>
            <param name="templatePath">Family Template to use for creation</param>
            <param name="material">Material to apply to the solids</param>
            <param name="subcategory">Subcategory for the Family Type (optional)</param>
            <returns>Family Type</returns>
        </member>
        <member name="M:Revit.Elements.FamilyType.VoidByGeometry(Autodesk.DesignScript.Geometry.Solid,System.String,Revit.Elements.Category,System.String)">
            <summary>
            Create a Void Family Type from a solid geometry.
            This method exports the solid to SAT and imports it into
            a new family document.
            </summary>
            <param name="solidGeometry"></param>
            <param name="name">Name to apply to the Family Type</param>
            <param name="category">Category to apply</param>
            <param name="templatePath">Template file to use for creation</param>
            <returns>Void Family Type</returns>
        </member>
        <member name="M:Revit.Elements.FamilyType.FromExisting(Autodesk.Revit.DB.FamilySymbol,System.Boolean)">
            <summary>
            Obtain a FamilyType by selection. 
            </summary>
            <param name="familyType"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.FreeForm">
            <summary>
            A Revit FreeForm element
            </summary>
        </member>
        <member name="P:Revit.Elements.FreeForm.InternalFreeFormElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="P:Revit.Elements.FreeForm.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.FreeForm.#ctor(Autodesk.Revit.DB.FreeFormElement)">
            <summary>
            Private constructor that allows wrapping of an existing FreeForm element.
            </summary>
            <param name="ele"></param>
        </member>
        <member name="M:Revit.Elements.FreeForm.#ctor(Autodesk.Revit.DB.Solid)">
            <summary>
            Private constructor that constructs a FreeForm from a user-provided
            solid
            </summary>
            <param name="solid"></param>
        </member>
        <member name="M:Revit.Elements.FreeForm.InitFreeForm(Autodesk.Revit.DB.FreeFormElement)">
            <summary>
            Initialize a FreeForm element
            </summary>
            <param name="ele"></param>
        </member>
        <member name="M:Revit.Elements.FreeForm.InitFreeForm(Autodesk.Revit.DB.Solid)">
            <summary>
            Initialize a FreeForm element
            </summary>
            <param name="solid"></param>
        </member>
        <member name="M:Revit.Elements.FreeForm.InternalSetSolid(Autodesk.Revit.DB.Solid)">
            <summary>
            Attempt to set the internal solid.  If this method fails, return false.
            </summary>
            <param name="solid"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.FreeForm.InternalSetFreeFormElement(Autodesk.Revit.DB.FreeFormElement)">
            <summary>
            Set the FreeFormElement and update it's id and unique id
            </summary>
            <param name="ele"></param>
        </member>
        <member name="M:Revit.Elements.FreeForm.FromExisting(Autodesk.Revit.DB.FreeFormElement,System.Boolean)">
            <summary>
            Construct the Revit element by selection.
            </summary>
            <param name="freeFormElement"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Material.InternalMaterial">
            <summary>
            Internal reference to the Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Material.#ctor(Autodesk.Revit.DB.Material)">
            <summary>
            Private constructor for DSMaterial
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:Revit.Elements.Material.InitMaterial(Autodesk.Revit.DB.Material)">
            <summary>
            Initialize a Material element
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:Revit.Elements.Material.InternalSetMaterial(Autodesk.Revit.DB.Material)">
            <summary>
            Set the internal Element, ELementId, and UniqueId
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:Revit.Elements.Material.ByName(System.String)">
            <summary>
            Select a material from the current document by the name
            </summary>
            <param name="name">The name of the material</param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Material.Name">
            <summary>
            Get Material Name
            </summary>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Material.Shininess">
            <summary>
            Get Shininess
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.Smoothness">
            <summary>
            Get Smoothness
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.Transparency">
            <summary>
            Get Transparency
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.SurfacePatternColor">
            <summary>
            Get SurfacePatternColor
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.MaterialClass">
            <summary>
            Get Material Class
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.MaterialCategory">
            <summary>
            Get Material category
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.CutPatternColor">
            <summary>
            Get cut pattern color
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.Color">
            <summary>
            Get color
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.CutPatternId">
            <summary>
            Get cut pattern id
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.AppearanceParameters">
            <summary>
            Get all apperance parameters
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.ThermalParameters">
            <summary>
            Get all thermal parameters
            </summary>
        </member>
        <member name="P:Revit.Elements.Material.StructuralParameters">
            <summary>
            Get all structural parameters
            </summary>
        </member>
        <member name="M:Revit.Elements.Material.ToDSColor(Autodesk.Revit.DB.Color)">
            <summary>
            Convert Revit to DS Color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Material.FromExisting(Autodesk.Revit.DB.Material,System.Boolean)">
            <summary>
            Wrap an element in the associated DS type
            </summary>
            <param name="material">The material</param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.ModelCurve">
            <summary>
            A Revit ModelCurve
            </summary>
        </member>
        <member name="M:Revit.Elements.ModelCurve.#ctor(Autodesk.Revit.DB.ModelCurve)">
            <summary>
            Construct a model curve from the document.  The result is Dynamo owned
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Revit.Elements.ModelCurve.#ctor(Autodesk.Revit.DB.Curve,System.Boolean)">
            <summary>
            Internal constructor for ModelCurve
            </summary>
            <param name="crv"></param>
            <param name="makeReferenceCurve"></param>
        </member>
        <member name="M:Revit.Elements.ModelCurve.InitModelCurve(Autodesk.Revit.DB.ModelCurve)">
            <summary>
            Initialize a ModelCurve element
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Revit.Elements.ModelCurve.InitModelCurve(Autodesk.Revit.DB.Curve,System.Boolean)">
            <summary>
            Initialize a ModelCurve element
            </summary>
            <param name="crv"></param>
            <param name="makeReferenceCurve"></param>
        </member>
        <member name="M:Revit.Elements.ModelCurve.InternalSetSketchPlaneFromCurve(Autodesk.Revit.DB.Curve)">
            <summary>
            Set the plane and the curve internally.
            </summary>
        </member>
        <member name="M:Revit.Elements.ModelCurve.ByCurve(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Construct a Revit ModelCurve element from a Curve
            </summary>
            <param name="curve"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ModelCurve.ReferenceCurveByCurve(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Construct a Revit ModelCurve element from a Curve
            </summary>
            <param name="curve"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ModelCurve.FromExisting(Autodesk.Revit.DB.ModelCurve,System.Boolean)">
            <summary>
            Construct a Revit ModelCurve element from an existing element.  The result is Dynamo owned.
            </summary>
            <param name="modelCurve"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.FamilyInstance">
            <summary>
            A Revit FamilyInstance
            </summary>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.#ctor(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            Wrap an existing FamilyInstance.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.#ctor(Autodesk.Revit.DB.FamilySymbol,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.Level)">
            <summary>
            Internal constructor for a FamilyInstance
            </summary>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.#ctor(Autodesk.Revit.DB.FamilySymbol,Autodesk.Revit.DB.XYZ)">
            <summary>
            Internal constructor for a FamilyInstance
            </summary>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.InitFamilyInstance(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            Initialize a FamilyInstance element
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.InitFamilyInstance(Autodesk.Revit.DB.FamilySymbol,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.Level)">
            <summary>
            Initialize a FamilyInstance element
            </summary>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.InitFamilyInstance(Autodesk.Revit.DB.FamilySymbol,Autodesk.Revit.DB.XYZ)">
            <summary>
            Initialize a FamilyInstance element
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyInstance.Type">
            <summary>
            Gets family type of the specific family instance
            </summary>
            <search>
            symbol
            </search>
        </member>
        <member name="P:Revit.Elements.FamilyInstance.Location">
            <summary>
            Gets the location of the specific family instance 
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyInstance.FacingOrientation">
            <summary>
            Gets the FacingOrientation of the family instance
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyInstance.Room">
            <summary>
            The room in which the instance is located.
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyInstance.Space">
            <summary>
            The space in which the instance is located.
            </summary>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.ByPoint(Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Place a Revit FamilyInstance given the FamilyType (also known as the FamilySymbol in the Revit API) and its coordinates in world space
            </summary>
            <param name="familyType">Family Type. Also called Family Symbol.</param>
            <param name="point">Point in meters.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.ByFace(Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Surface,Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Place a Revit family instance of the given the FamilyType (also known as the FamilySymbol in the Revit API) 
            on a surface derived from a backing Revit face as reference and a line as reference for its position.
            
            Note: The FamilyPlacementType must be CurveBased and the input surface must be created from a Revit Face 
            </summary>
            <param name="familyType">Family Type. Also called Family Symbol.</param>
            <param name="face">Surface geometry derived from a Revit face as reference element</param>
            <param name="line">A line on the face defining where the symbol is to be placed</param>
            <returns>FamilyInstance</returns>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.ByFace(Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Surface,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Place a Revit family instance given the FamilyType (also known as the FamilySymbol in the Revit API) 
            on a surface derived from a backing Revit face as reference, a reference direction and a point location where to place the family.
            
            Note: The FamilyType should be workplane based and the input surface must be created from a Revit Face. The reference direction defines the rotation of the instance on the reference, and thus cannot be perpendicular to the face.
            </summary>
            <param name="familyType">Family Type. Also called Family Symbol.</param>
            <param name="face">Surface geometry derived from a Revit face as reference element</param>
            <param name="location">Point on the face where the instance is to be placed</param>
            <param name="referenceDirection">A vector that defines the direction of placement of the family instance</param>
            <returns>FamilyInstance</returns>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.ByCoordinates(Revit.Elements.FamilyType,System.Double,System.Double,System.Double)">
            <summary>
            Place a Revit FamilyInstance given the FamilyType (also known as the FamilySymbol in the Revit API) and its coordinates in world space
            </summary>
            <param name="familyType">Family Type. Also called Family Symbol.</param>
            <param name="x">X coordinate in meters</param>
            <param name="y">Y coordinate in meters</param>
            <param name="z">Z coordinate in meters</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.ByPointAndLevel(Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Level)">
            <summary>
            Place a Revit FamilyInstance given the FamilyType (also known as the FamilySymbol in the Revit API), it's coordinates in world space, and the Level
            </summary>
            <param name="familyType">Family Type. Also called Family Symbol.</param>
            <param name="point">Point in meters.</param>
            <param name="level">Level to host Family Instance.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.ByFamilyType(Revit.Elements.FamilyType)">
            <summary>
            Obtain a collection of FamilyInstances from the Revit Document and use them in the Dynamo graph
            </summary>
            <param name="familyType">Family Type. Also called Family Symbol.</param>
            <returns></returns>
            <search>
            byfamilysymbol,ByFamilySymbol
            </search>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.ByCoordinateSystem(Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.CoordinateSystem)">
            <summary>
            Place a Revit FamilyInstance given the FamilyType (also known as the FamilySymbol in the Revit API) and its coordinate system.
            </summary>
            <param name="familyType">Family Type. Also called Family Symbol.</param>
            <param name="coordinateSystem">Coordinates system to place the new family instance in.</param>
            <returns>New family instance.</returns>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.FromExisting(Autodesk.Revit.DB.FamilyInstance,System.Boolean)">
            <summary>
            Construct a FamilyInstance from the Revit document. 
            </summary>
            <param name="familyInstance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.FamilyInstance.GetHost">
            <summary>
            Gets the host of this fmaily instance (if any). Eg. returns the wall of a window or door family instance.
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyInstance.GetFamily">
            <summary>
            Gets the family of this family instance
            </summary>
        </member>
        <member name="P:Revit.Elements.FamilyInstance.GetType">
            <summary>
            Gets the family type of this family instance
            </summary>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.SetRotation(System.Double)">
            <summary>
            Set the Euler angle of the family instance around its local Z-axis.
            </summary>        
            <param name="degree">The Euler angle around Z-axis.</param>
            <returns>The result family instance.</returns>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.Transform(Autodesk.DesignScript.Geometry.CoordinateSystem,Autodesk.DesignScript.Geometry.CoordinateSystem)">
            <summary>
            Transforms this FamilyInstance from a source CoordinateSystem to a new context CoordinateSystem.
            </summary>
            <param name="fromCoordinateSystem">Source CoordinatSystem</param>
            <param name="contextCoordinateSystem">Context CordinateSystem</param>
            <returns>Transformed Element</returns>
        </member>
        <member name="M:Revit.Elements.FamilyInstance.InternalGetTransform">
            <summary>
            Get the transform of the internal family instance
            </summary>
            <returns>The internal transform</returns>
        </member>
        <member name="T:Revit.Elements.Floor">
            <summary>
            A Revit Floor
            </summary>
        </member>
        <member name="P:Revit.Elements.Floor.InternalFloor">
            <summary>
            An internal handle on the Revit floor
            </summary>
        </member>
        <member name="P:Revit.Elements.Floor.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Floor.#ctor(Autodesk.Revit.DB.Floor)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Floor.#ctor(Autodesk.Revit.DB.CurveArray,Autodesk.Revit.DB.FloorType,Autodesk.Revit.DB.Level)">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Revit.Elements.Floor.InitFloor(Autodesk.Revit.DB.Floor)">
            <summary>
            Initialize a floor element
            </summary>
        </member>
        <member name="M:Revit.Elements.Floor.InitFloor(Autodesk.Revit.DB.CurveArray,Autodesk.Revit.DB.FloorType,Autodesk.Revit.DB.Level)">
            <summary>
            Initialize a floor element
            </summary>
        </member>
        <member name="M:Revit.Elements.Floor.InternalSetFloor(Autodesk.Revit.DB.Floor)">
            <summary>
            Set the InternalFloor property and the associated element id and unique id
            </summary>
            <param name="floor"></param>
        </member>
        <member name="M:Revit.Elements.Floor.ByOutlineTypeAndLevel(Autodesk.DesignScript.Geometry.Curve[],Revit.Elements.FloorType,Revit.Elements.Level)">
            <summary>
            Create a Revit Floor given its curve outline and Level
            </summary>
            <param name="outlineCurves"></param>
            <param name="floorType"></param>
            <param name="level"></param>
            <returns>The floor</returns>
        </member>
        <member name="M:Revit.Elements.Floor.ByOutlineTypeAndLevel(Autodesk.DesignScript.Geometry.PolyCurve,Revit.Elements.FloorType,Revit.Elements.Level)">
            <summary>
            Create a Revit Floor given its curve outline and Level
            </summary>
            <param name="outline"></param>
            <param name="floorType"></param>
            <param name="level"></param>
            <returns>The floor</returns>
        </member>
        <member name="P:Revit.Elements.Floor.Points">
            <summary>
            Get Slab Shape Points
            </summary>
        </member>
        <member name="M:Revit.Elements.Floor.AddPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Add Point to Slab Shape
            </summary>
        </member>
        <member name="M:Revit.Elements.Floor.MovePoint(Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Move an existing point in the slab shape editor by an offset.
            Behaves as moving a point manually in the slab shape editor.
            </summary>
        </member>
        <member name="M:Revit.Elements.Floor.FromExisting(Autodesk.Revit.DB.Floor,System.Boolean)">
            <summary>
            Create a Floor from a user selected Element.
            </summary>
            <param name="floor"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.Grid">
            <summary>
            A Revit Grid Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Grid.InternalGrid">
            <summary>
            Internal reference to Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Grid.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Grid.#ctor(Autodesk.Revit.DB.Grid)">
            <summary>
            Private constructor for wrapping an existing Element
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:Revit.Elements.Grid.#ctor(Autodesk.Revit.DB.Line)">
            <summary>
            Private constructor that creates a new Element every time
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Revit.Elements.Grid.#ctor(Autodesk.Revit.DB.Arc)">
            <summary>
            Private constructor that creates a new Element every time
            </summary>
            <param name="arc"></param>
        </member>
        <member name="M:Revit.Elements.Grid.InitGrid(Autodesk.Revit.DB.Grid)">
            <summary>
            Initialize a Grid element
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:Revit.Elements.Grid.InitGrid(Autodesk.Revit.DB.Line)">
            <summary>
            Initialize a Grid element
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Revit.Elements.Grid.InitGrid(Autodesk.Revit.DB.Arc)">
            <summary>
            Initialize a Grid element
            </summary>
            <param name="arc"></param>
        </member>
        <member name="M:Revit.Elements.Grid.InternalSetGrid(Autodesk.Revit.DB.Grid)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
            <param name="grid"></param>
        </member>
        <member name="P:Revit.Elements.Grid.Curve">
            <summary>
            Get the underlying Curve geometry from this Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Grid.ElementCurveReference">
            <summary>
            Get a Reference to the underlying Curve Geometry of this Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Grid.ByLine(Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Create a Revit Grid Element in a Project along a Line.  
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Grid.ByStartPointEndPoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Create a Revit Grid Element in a project between two end points
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Grid.ByArc(Autodesk.DesignScript.Geometry.Arc)">
            <summary>
            Create a Revit Grid Element in a project along an Arc
            </summary>
            <param name="arc"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Grid.FromExisting(Autodesk.Revit.DB.Grid,System.Boolean)">
            <summary>
            Wrap an existing Element in the associated DS type
            </summary>
            <param name="grid"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.LevelTraceData">
            <summary>
            This class acts as a representation of a Level constructor state, we can store it in trace
            it's used to keep track of what the user wanted to set the name of the level to
            </summary>
        </member>
        <member name="T:Revit.Elements.Level">
            <summary>
            A Revit Level
            </summary>
        </member>
        <member name="P:Revit.Elements.Level.InternalLevel">
            <summary>
            Internal reference to Revit element
            </summary>
        </member>
        <member name="P:Revit.Elements.Level.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Level.#ctor(System.Double,System.String)">
            <summary>
            Private constructor for Level
            </summary>
            <param name="elevation"></param>
            <param name="name"></param>
        </member>
        <member name="M:Revit.Elements.Level.#ctor(Autodesk.Revit.DB.Level)">
            <summary>
            Private constructor for Level
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Revit.Elements.Level.InitLevel(System.Double,System.String)">
            <summary>
            Initialize a Level element
            </summary>
            <param name="elevation"></param>
            <param name="name"></param>
        </member>
        <member name="M:Revit.Elements.Level.InternalSetLevel(Autodesk.Revit.DB.Level)">
            <summary>
            Set the Element, it's Id, and it's uniqueId
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Revit.Elements.Level.InternalSetElevation(System.Double)">
            <summary>
            Mutate the height of the level
            </summary>
            <param name="elevation"></param>
        </member>
        <member name="M:Revit.Elements.Level.InternalSetName(System.String,System.String)">
            <summary>
            Mutate the name of the level
            </summary>
            <param name="name"> the name we want to set the level to have</param>
            <param name="oldname"> the oldname we tried to set this level to in the past,
            we retrieve this from trace</param>
        </member>
        <member name="P:Revit.Elements.Level.Elevation">
            <summary>
            The elevation of the level above ground level
            </summary>
        </member>
        <member name="P:Revit.Elements.Level.ProjectElevation">
            <summary>
            Elevation relative to the Project origin
            </summary>
        </member>
        <member name="P:Revit.Elements.Level.Name">
            <summary>
            The name of the level
            </summary>
        </member>
        <member name="M:Revit.Elements.Level.ByElevationAndName(System.Double,System.String)">
            <summary>
            Create a Revit Level given it's elevation and name in the project
            </summary>
            <param name="elevation"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Level.ByElevation(System.Double)">
            <summary>
            Create a Revit Level given it's elevation.  The name will be whatever
            Revit gives it.
            </summary>
            <param name="elevation"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Level.ByLevelAndOffset(Revit.Elements.Level,System.Double)">
            <summary>
            Create a Revit Level given it's length offset from an existing level
            </summary>
            <param name="level"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Level.ByLevelOffsetAndName(Revit.Elements.Level,System.Double,System.String)">
            <summary>
            Create a Revit Level given a distance offset from an existing 
            level and a name for the new level
            </summary>
            <param name="level"></param>
            <param name="offset"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Level.FromExisting(Autodesk.Revit.DB.Level,System.Boolean)">
            <summary>
            Create a Level from a user selected Element.
            </summary>
            <param name="level"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.ReferencePlane">
            <summary>
            A Revit ReferencePlane
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePlane.InternalReferencePlane">
            <summary>
            Internal handle for the Revit object
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePlane.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.ReferencePlane.#ctor(Autodesk.Revit.DB.ReferencePlane)">
            <summary>
            Internal reference plane
            </summary>
            <param name="referencePlane"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePlane.#ctor(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.View)">
            <summary>
            Constructor used internally by public static constructors
            </summary>
            <param name="bubbleEnd"></param>
            <param name="freeEnd"></param>
            <param name="normal"></param>
            <param name="view"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePlane.InitReferencePlane(Autodesk.Revit.DB.ReferencePlane)">
            <summary>
            Initialize a ReferencePlane element
            </summary>
            <param name="referencePlane"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePlane.InitReferencePlane(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.View)">
            <summary>
            Initialize a ReferencePlane element
            </summary>
            <param name="bubbleEnd"></param>
            <param name="freeEnd"></param>
            <param name="normal"></param>
            <param name="view"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePlane.InternalSetReferencePlane(Autodesk.Revit.DB.ReferencePlane)">
            <summary>
            Set the InternalReferencePlane and update the element id and unique id
            </summary>
            <param name="rp"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePlane.InternalSetEndpoints(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ)">
            <summary>
            Mutate the two end points of the ReferencePlane 
            </summary>
            <param name="bubbleEnd"></param>
            <param name="freeEnd"></param>
            <returns>False if the operation failed</returns>
        </member>
        <member name="P:Revit.Elements.ReferencePlane.Plane">
            <summary>
            Get the internal Geometric Plane
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePlane.ElementPlaneReference">
            <summary>
            Get a reference to this plane for downstream Elements requiring it
            </summary>
        </member>
        <member name="M:Revit.Elements.ReferencePlane.ByLine(Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Form a ReferencePlane from a line in the Active view.  The cut vector is the Z Axis.
            </summary>
            <param name="line">The line where the bubble wil be located at the start</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ReferencePlane.ByStartPointEndPoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Form a Refernece plane from two end points in the Active view.  The cut vector is the Z Axis.
            </summary>
            <param name="start">The location where the bubble will be located</param>
            <param name="end">The other end</param>
            <returns></returns>
        </member>
        <member name="T:Revit.Elements.ReferencePoint">
            <summary>
            A Revit Reference Point
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePoint.InternalReferencePoint">
            <summary>
            Internal variable containing the wrapped Revit object
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePoint.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.#ctor(Autodesk.Revit.DB.ReferencePoint)">
            <summary>
            Internal constructor for wrapping a ReferencePoint. 
            </summary>
            <param name="refPt"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.#ctor(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.UV)">
            <summary>
            Internal constructor for ReferencePoint Elements that a persistent relationship to a Face
            </summary>
            <param name="faceReference"></param>
            <param name="uv"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.#ctor(Autodesk.Revit.DB.Reference,System.Double,Autodesk.Revit.DB.PointOnCurveMeasurementType,Autodesk.Revit.DB.PointOnCurveMeasureFrom)">
            <summary>
            Internal constructor for ReferencePoint Elements that a persistent relationship to a Curve
            </summary>
            <param name="curveReference"></param>
            <param name="parameter"></param>
            <param name="measurementType"></param>
            <param name="measureFrom"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.#ctor(Autodesk.Revit.DB.XYZ)">
            <summary>
            Internal constructor for the ReferencePoint
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.InitReferencePoint(Autodesk.Revit.DB.ReferencePoint)">
            <summary>
            Initialize a ReferencePoint element
            </summary>
            <param name="refPt"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.InitReferencePoint(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.UV)">
            <summary>
            Initialize a ReferencePoint element
            </summary>
            <param name="faceReference"></param>
            <param name="uv"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.InitReferencePoint(Autodesk.Revit.DB.Reference,System.Double,Autodesk.Revit.DB.PointOnCurveMeasurementType,Autodesk.Revit.DB.PointOnCurveMeasureFrom)">
            <summary>
            Initialize a ReferencePoint element
            </summary>
            <param name="curveReference"></param>
            <param name="parameter"></param>
            <param name="measurementType"></param>
            <param name="measureFrom"></param>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.InitReferencePoint(Autodesk.Revit.DB.XYZ)">
            <summary>
            Initialize a ReferencePoint element
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="P:Revit.Elements.ReferencePoint.X">
            <summary>
            Gets 'X' coordinate of the specified ReferencePoint
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePoint.Y">
            <summary>
            Gets 'Y' coordinate of the specified ReferencePoint
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePoint.Z">
            <summary>
            Gets 'Z' coordinate of the specified ReferencePoint
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePoint.Point">
            <summary>
            Gets point geometry from the specified ReferencePoint
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePoint.XYPlane">
            <summary>
            Gets XY plane of the specified ReferencePoint
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePoint.YZPlane">
            <summary>
            Gets YZ plane of the specified ReferencePoint
            </summary>
        </member>
        <member name="P:Revit.Elements.ReferencePoint.XZPlane">
            <summary>
            Gets XZ plane of the specified ReferencePoint
            </summary>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.ByCoordinates(System.Double,System.Double,System.Double)">
            <summary>
            Create a Reference Point by x, y, and z coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.ByPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Create a Reference Point from a point.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.ByPointVectorDistance(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,System.Double)">
            <summary>
            Create a Reference Point Element offset from a point along a vector
            </summary>
            <param name="basePoint"></param>
            <param name="direction"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.ByLengthOnCurveReference(System.Object,System.Double)">
            <summary>
            Create a Reference Point at a particular length along a curve
            </summary>
            <param name="elementCurveReference"></param>
            <param name="length">Distance in meters along the curve</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.ByParameterOnCurveReference(System.Object,System.Double)">
            <summary>
            Create a Reference Point at a parameter on an Curve.  This introduces a persistent relationship between
            Elements in the Revit document.
            </summary>
            <param name="elementCurveReference"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.ByParametersOnFaceReference(System.Object,System.Double,System.Double)">
            <summary>
            Create a Reference Point by UV coordinates on a Face. This introduces a persistent relationship between
            Elements in the Revit document.
            </summary>
            <param name="elementFaceReference"></param>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.FromExisting(Autodesk.Revit.DB.ReferencePoint,System.Boolean)">
            <summary>
            Create a Reference Point from a user selected Element.
            </summary>
            <param name="pt"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.ReferencePoint.Autodesk#DesignScript#Interfaces#IGraphicItem#Tessellate(Autodesk.DesignScript.Interfaces.IRenderPackage,Autodesk.DesignScript.Interfaces.TessellationParameters)">
            <summary>
            Tessellate Reference Point to render package for visualization.
            </summary>
        </member>
        <member name="T:Revit.Elements.StructuralFraming">
            <summary>
            A Revit FamilyInstance
            </summary>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.#ctor(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            Wrap an existing FamilyInstance. 
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.#ctor(Autodesk.Revit.DB.Curve,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.Level,Autodesk.Revit.DB.Structure.StructuralType,Autodesk.Revit.DB.FamilySymbol)">
            <summary>
            Internal constructor - creates a single StructuralFraming instance
            </summary>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.#ctor(Autodesk.Revit.DB.Curve,Autodesk.Revit.DB.Level,Autodesk.Revit.DB.Structure.StructuralType,Autodesk.Revit.DB.FamilySymbol)">
            <summary>
            Internal constructor - creates a single StructuralFraming instance
            </summary>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.InitStructuralFraming(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            Initialize a StructuralFraming element
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.InitStructuralFraming(Autodesk.Revit.DB.Curve,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.Level,Autodesk.Revit.DB.Structure.StructuralType,Autodesk.Revit.DB.FamilySymbol)">
            <summary>
            Initialize a StructuralFraming element
            </summary>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.InitStructuralFraming(Autodesk.Revit.DB.Curve,Autodesk.Revit.DB.Level,Autodesk.Revit.DB.Structure.StructuralType,Autodesk.Revit.DB.FamilySymbol)">
            <summary>
            Initialize a StructuralFraming element
            </summary>
        </member>
        <member name="P:Revit.Elements.StructuralFraming.Location">
            <summary>
            Gets curve geometry from location of the specified structural element
            </summary>
        </member>
        <member name="P:Revit.Elements.StructuralFraming.Type">
            <summary>
            Gets family type from the specified structural element
            </summary>
            <search>
            symbol
            </search>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.ByCurveLevelUpVectorAndType(Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Level,Autodesk.DesignScript.Geometry.Vector,Revit.Elements.StructuralType,Revit.Elements.FamilyType)">
            <summary>
            Create a Revit Structural Member - a special FamilyInstance
            </summary>
            <param name="curve">The curve path for the structural member</param>
            <param name="upVector">The up vector for the element - this is required to determine the orientation of the element</param>
            <param name="level">The level on which the member should appear</param>
            <param name="structuralType">The type of the structural element - a beam, column, etc</param>
            <param name="structuralFramingType">The structural framing type representing the structural type</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.BeamByCurve(Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Level,Revit.Elements.FamilyType)">
            <summary>
            Create a beam.
            </summary>
            <param name="curve">The curve which defines the center line of the beam.</param>
            <param name="level">The level with which you'd like the beam to be associated.</param>
            <param name="structuralFramingType">The structural framing type representing the beam.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.BraceByCurve(Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Level,Revit.Elements.FamilyType)">
            <summary>
            Create a brace.
            </summary>
            <param name="curve">The cruve which defines the center line of the brace.</param>
            <param name="level">The level with which you'd like the brace to be associated.</param>
            <param name="structuralFramingType">The structural framing type representing the brace.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.ColumnByCurve(Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Level,Revit.Elements.FamilyType)">
            <summary>
            Create a column.
            </summary>
            <param name="curve">The curve which defines the center line of the column.</param>
            <param name="level">The level with which you'd like the column to be associated.</param>
            <param name="structuralColumnType">The structural column type representing the column.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.StructuralFraming.FromExisting(Autodesk.Revit.DB.FamilyInstance,System.Boolean)">
            <summary>
            Construct a FamilyInstance from the Revit document. 
            </summary>
            <param name="familyInstance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="P:Revit.Elements.Wall.InternalWall">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Elements.Wall.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Elements.Wall.#ctor(Autodesk.Revit.DB.Wall)">
            <summary>
            Create from an existing Revit Element
            </summary>
            <param name="wall"></param>
        </member>
        <member name="M:Revit.Elements.Wall.#ctor(Autodesk.Revit.DB.Curve,Autodesk.Revit.DB.WallType,Autodesk.Revit.DB.Level,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Create a new instance of WallType, deleting the original
            </summary>
            <param name="curve"></param>
            <param name="wallType"></param>
            <param name="baseLevel"></param>
            <param name="height"></param>
            <param name="offset"></param>
            <param name="flip"></param>
            <param name="isStructural"></param>
        </member>
        <member name="M:Revit.Elements.Wall.InitWall(Autodesk.Revit.DB.Wall)">
            <summary>
            Initialize a Wall element
            </summary>
            <param name="wall"></param>
        </member>
        <member name="M:Revit.Elements.Wall.InitWall(Autodesk.Revit.DB.Curve,Autodesk.Revit.DB.WallType,Autodesk.Revit.DB.Level,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initialize a Wall element
            </summary>
            <param name="curve"></param>
            <param name="wallType"></param>
            <param name="baseLevel"></param>
            <param name="height"></param>
            <param name="offset"></param>
            <param name="flip"></param>
            <param name="isStructural"></param>
        </member>
        <member name="M:Revit.Elements.Wall.InternalSetWall(Autodesk.Revit.DB.Wall)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
            <param name="wall"></param>
        </member>
        <member name="M:Revit.Elements.Wall.ByCurveAndHeight(Autodesk.DesignScript.Geometry.Curve,System.Double,Revit.Elements.Level,Revit.Elements.WallType)">
            <summary>
            Create a Revit Wall from a guiding Curve, height, Level, and WallType
            </summary>
            <param name="curve"></param>
            <param name="height"></param>
            <param name="level"></param>
            <param name="wallType"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Wall.ByCurveAndLevels(Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Level,Revit.Elements.Level,Revit.Elements.WallType)">
            <summary>
            Create a Revit Wall from a guiding Curve, start Level, end Level, and WallType
            </summary>
            <param name="curve"></param>
            <param name="startLevel"></param>
            <param name="endLevel"></param>
            <param name="wallType"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Wall.ByFace(System.String,Revit.Elements.WallType,Autodesk.DesignScript.Geometry.Surface)">
            <summary>
            Creates a Wall following the geometry of a surface. 
            Walls by Faces cannot be updated, any geometry change will 
            create a new wall and delete the old one.
            </summary>
            <param name="locationLine"></param>
            <param name="wallType"></param>
            <param name="surface"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Elements.Wall.FromExisting(Autodesk.Revit.DB.Wall,System.Boolean)">
            <summary>
            Create a Revit Wall from an existing reference
            </summary>
            <param name="wall"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Filter.FilterRule">
            <summary>
            Revit Filter Rule
            </summary>
        </member>
        <member name="P:Revit.Filter.FilterRule.InternalFilterRule">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Filter.FilterRule.#ctor(Autodesk.Revit.DB.FilterRule)">
            <summary>
            Reference to the Element
            </summary>
            <param name="internalFilterRule"></param>
        </member>
        <member name="T:Revit.Filter.FilterRule.RuleType">
            <summary>
            RuleType Enumeration
            </summary>
        </member>
        <member name="F:Revit.Filter.FilterRule.CreatePrefix">
            <summary>
            Prefix for reflection call of Create Rule
            </summary>
        </member>
        <member name="F:Revit.Filter.FilterRule.RuleSuffix">
            <summary>
            Suffix for reflection call of Create Rule 
            </summary>
        </member>
        <member name="M:Revit.Filter.FilterRule.ByRuleType(System.String,System.Object,Revit.Elements.Parameter)">
            <summary>
            Create a new Filter Rule
            </summary>
            <param name="type">Filter Rule Type</param>
            <param name="value">Value to check</param>
            <param name="parameter">Parameter to filter</param>
            <returns></returns>
        </member>
        <member name="T:Revit.Filter.OverrideGraphicSettings">
            <summary>
            Override Graphic Settings
            </summary>
        </member>
        <member name="P:Revit.Filter.OverrideGraphicSettings.InternalOverrideGraphicSettings">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Filter.OverrideGraphicSettings.#ctor(Autodesk.Revit.DB.OverrideGraphicSettings)">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Filter.OverrideGraphicSettings.ByProperties(DSCore.Color,DSCore.Color,DSCore.Color,DSCore.Color,Revit.Elements.FillPatternElement,Revit.Elements.FillPatternElement,Revit.Elements.LinePatternElement,Revit.Elements.LinePatternElement,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Create a OverrideGraphicSettings Element.
            </summary>
            <param name="cutFillColor">Fill color</param>
            <param name="projectionFillColor">Projection color</param>
            <param name="cutLineColor">Cut line color</param>
            <param name="projectionLineColor">Projection line color</param>
            <param name="cutLineWeight">Cut line weight</param>
            <param name="projectionLineWeight">Projection line weight</param>
            <param name="cutFillPattern">Cut fill pattern</param>
            <param name="projectionFillPattern">Projection fill pattern</param>
            <param name="cutLinePattern">Cut line pattern</param>
            <param name="projectionLinePattern">Projection line pattern</param>
            <param name="transparency">Transparency as integer between 1-100.</param>
            <param name="detailLevel">Detail Level setting, ex: Coarse, Fine etc.</param>
            <param name="halftone">Halftone. True = halftone.</param>
            <returns name="overrides">Override Graphic Settings</returns>
        </member>
        <member name="M:Revit.Filter.OverrideGraphicSettings.ToRevitColor(DSCore.Color)">
            <summary>
            Revit Color to DS Color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.Filter.ParameterFilterElement">
            <summary>
            Parameter Filter Element
            </summary>
        </member>
        <member name="P:Revit.Filter.ParameterFilterElement.InternalRevitElement">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="P:Revit.Filter.ParameterFilterElement.InternalElement">
            <summary>
            Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Filter.ParameterFilterElement.InternalSetElement(Autodesk.Revit.DB.ParameterFilterElement)">
            <summary>
            Set the internal Element, ElementId, and UniqueId
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Filter.ParameterFilterElement.#ctor(Autodesk.Revit.DB.ParameterFilterElement)">
            <summary>
            ParameterFilterElement from existing
            </summary>
            <param name="elem"></param>
        </member>
        <member name="M:Revit.Filter.ParameterFilterElement.#ctor(System.String,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementId},System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.FilterRule})">
            <summary>
            ParameterFilterElement by Rules
            </summary>
            <param name="name"></param>
            <param name="ids"></param>
            <param name="rules"></param>
        </member>
        <member name="M:Revit.Filter.ParameterFilterElement.InitElement(Autodesk.Revit.DB.ParameterFilterElement)">
            <summary>
            Init ParameterFilterElement from existing
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Revit.Filter.ParameterFilterElement.Init(System.String,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementId},System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.FilterRule})">
            <summary>
            Init ParameterFilterElement by rules
            </summary>
            <param name="name"></param>
            <param name="ids"></param>
            <param name="rules"></param>
        </member>
        <member name="M:Revit.Filter.ParameterFilterElement.ByRules(System.String,System.Collections.Generic.IEnumerable{Revit.Elements.Category},System.Collections.Generic.IEnumerable{Revit.Filter.FilterRule})">
            <summary>
            Create a Revit Parameter Filter Element
            </summary>
            <param name="name">Name</param>
            <param name="categories">Categories the filter applies to</param>
            <param name="rules">Filter rules</param>
            <returns></returns>
        </member>
        <member name="M:Revit.Filter.ParameterFilterElement.FromExisting(Autodesk.Revit.DB.ParameterFilterElement,System.Boolean)">
            <summary>
            From existing element
            </summary>
            <param name="instance"></param>
            <param name="isRevitOwned"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.CurveUtils.CurvesAreSimilar(Autodesk.Revit.DB.Curve,Autodesk.Revit.DB.Curve)">
            <summary>
            This method uses basic checks to compare curves for similarity.
            It starts by comparing the curves' end points. Curves which have similar
            end points but different directions will not be regarded as similar,
            because directionality is important in Revit for other purposes. 
            Depending on the curve type, other comparisons are then performed. 
            </summary>
            <param name="a">The first curve.</param>
            <param name="b">The second curve.</param>
            <returns>Returns true if the curves are similar within Tolerance, and 
            false if they are not.</returns>
        </member>
        <member name="M:Revit.GeometryConversion.CurveUtils.CurvesHaveSameEndpoints(Autodesk.Revit.DB.Curve,Autodesk.Revit.DB.Curve,System.Double)">
            but are reversed are not considered similar.
        </member>
        <member name="M:Revit.GeometryConversion.HermiteToNurbs.ConvertExact(Autodesk.Revit.DB.HermiteSpline)">
            <summary>
            Convert a Revit HermiteSpline exactly to a NurbsCurve equivalent
            </summary>
            <param name="crv"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.HermiteToNurbs.Clamp(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Clamp a collection of curve parameters by introducing knot multiplicities at each end such
            that each end of the knot vector has degree + 1 copies of the knot
            </summary>
            <param name="curveParameters"></param>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.HermiteToNurbs.GetNurbsPoints(Autodesk.Revit.DB.HermiteSpline,System.Double[])">
            <summary>
            Obtain the Nurbs control points from a Hermite Spline
            </summary>
            <param name="curve"></param>
            <param name="nurbsKnots"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.DynamoToRevitBRep.ToRevitType(Autodesk.DesignScript.Geometry.Solid,System.Boolean,Autodesk.Revit.DB.ElementId)">
            <summary>
            this method attempts to construct a BRep from a closed solid.
            </summary>
            <param name="sol"></param>
            <param name="performHostUnitConversion"></param>
            <param name="materialId"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.DynamoToRevitBRep.ToRevitType(Autodesk.DesignScript.Geometry.Surface,System.Boolean,Autodesk.Revit.DB.ElementId)">
            <summary>
            this method attempts to construct a BRep from a surface.
            </summary>
            <param name="surf"></param>
            <param name="performHostUnitConversion"></param>
            <param name="materialId"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.ProtoToRevitSolid.GetSolidsFromElement(Autodesk.Revit.DB.Element)">
            <summary>
            Get Solids from Element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.ProtoToRevitSolid.ApplyMaterialToFreeForm(Autodesk.Revit.DB.Document,Revit.Elements.Material,Autodesk.Revit.DB.FreeFormElement)">
            <summary>
            Apply Material to Solid
            </summary>
            <param name="familyDocument"></param>
            <param name="material"></param>
            <param name="element"></param>
        </member>
        <member name="M:Revit.GeometryConversion.ProtoToRevitSolid.ApplySubCategoryToFreeForm(Autodesk.Revit.DB.Document,System.String,Autodesk.Revit.DB.FreeFormElement)">
            <summary>
            Apply SubCategory to Solid
            </summary>
            <param name="familyDocument"></param>
            <param name="subcategory"></param>
            <param name="freeform"></param>
        </member>
        <member name="M:Revit.GeometryConversion.ProtoToRevitSolid.ApplyVoidSettingsToFreeForm(Autodesk.Revit.DB.FreeFormElement)">
            <summary>
            Apply Cutting Settings to Void
            </summary>
            <param name="freeform"></param>
        </member>
        <member name="M:Revit.GeometryConversion.ProtoToRevitSolid.ToRevitFamilyType(Autodesk.DesignScript.Geometry.Solid,System.String,Revit.Elements.Category,System.String,Revit.Elements.Material,System.Boolean,System.String)">
            <summary>
            Convert a DS Solid to a Revit FamilySymbol containing 
            Revit FreeForms via SAT Export/Import
            </summary>
            <param name="solidGeometry"></param>
            <param name="name"></param>
            <param name="category"></param>
            <param name="templatePath">Revit Template to use for Family Creation</param>
            <param name="material">Can be null for Voids</param>
            <param name="isVoid">Create Void</param>
            <param name="subcategory">Can be string.Empty for Voids</param>
            <returns></returns>
        </member>
        <member name="T:Revit.GeometryConversion.FamilyImportOptions">
            <summary>
            Family Import Options
            </summary>
        </member>
        <member name="M:Revit.GeometryConversion.ProtoToRevitMesh.CreateBoundingBoxMeshForErrors(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,System.Boolean)">
            <summary>
            This is to create a bounding box mesh for geometries which have errors during the tessellating process
            </summary>
            <param name="minPoint"></param>
            <param name="maxPoint"></param>
            <param name="performHostUnitConversion"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Revit.GeometryConversion.ProtoToRevitMesh.AddFace(Autodesk.Revit.DB.TessellatedShapeBuilder,Autodesk.DesignScript.Geometry.IndexGroup,Autodesk.DesignScript.Geometry.Point[],System.Boolean,Autodesk.Revit.DB.ElementId)" -->
        <member name="M:Revit.GeometryConversion.NurbsUtils.ElevateBezierDegree(Autodesk.DesignScript.Geometry.NurbsCurve,System.Int32)">
            <summary>
            Elevate the degree of a Bezier curve (represented in NURBS form) to a given degree
            without changing the shape
            </summary>
            <param name="crv">The curve</param>
            <param name="finalDegree">The requested degree</param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.PolygonContainment.GetQuadrant(Autodesk.Revit.DB.UV,Autodesk.Revit.DB.UV)">
            <summary>
            Determine the quadrant of a polygon vertex 
            relative to the test point.
            </summary>
        </member>
        <member name="M:Revit.GeometryConversion.PolygonContainment.GetXIntercept(Autodesk.Revit.DB.UV,Autodesk.Revit.DB.UV,System.Double)">
            <summary>
            Determine the X intercept of a polygon edge 
            with a horizontal line at the Y value of the 
            test point.
            </summary>
        </member>
        <member name="M:Revit.GeometryConversion.PolygonContainment.PolygonContains(System.Collections.Generic.List{Autodesk.Revit.DB.UV},Autodesk.Revit.DB.UV)">
            <summary>
            Determine whether given 2D point lies within 
            the polygon.
            
            Written by Jeremy Tammik, Autodesk, 2009-09-23, 
            based on code that I wrote back in 1996 in C++, 
            which in turn was based on C code from the 
            article "An Incremental Angle Point in Polygon 
            Test" by Kevin Weiler, Autodesk, in "Graphics 
            Gems IV", Academic Press, 1994.
            
            Copyright (C) 2009 by Jeremy Tammik. All 
            rights reserved.
            
            This code may be freely used. Please preserve 
            this comment.
            </summary>
        </member>
        <member name="T:Revit.GeometryConversion.SurfaceExtractor">
            <summary>
            This class is required to extract the underlying surface representation from a Revit Face.
            All Face types are supported.
            </summary>
        </member>
        <member name="M:Revit.GeometryConversion.GeometryObjectConverter.Convert(Autodesk.Revit.DB.GeometryObject,Autodesk.Revit.DB.Reference,Autodesk.DesignScript.Geometry.CoordinateSystem)">
            <summary>
            Convert a GeometryObject to an applicable ProtoGeometry type.
            </summary>
            <param name="geom"></param>
            <param name="reference"></param>
            <param name="transform"></param>
            <returns>A Geometry type.  Null if there's no suitable conversion.</returns>
        </member>
        <member name="M:Revit.GeometryConversion.GeometryObjectConverter.ConvertToMany(Autodesk.Revit.DB.Solid,Autodesk.Revit.DB.Reference,Autodesk.DesignScript.Geometry.CoordinateSystem)">
            <summary>
            Get the edges and faces from the solid and convert them
            </summary>
            <param name="solid"></param>
            <param name="reference"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.UnitConverter.InDynamoUnits``1(``0)">
            <summary>
            Convert from Revit API internal units (feet) to Revit Display units.
            
            Can be used simply as geometry.InDynamoUnits() as the type is constrained
            </summary>
            <typeparam name="T"></typeparam>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.UnitConverter.InHostUnits``1(``0)">
            <summary>
            Convert from Revit Display Units to Revit API internal units (feet)
            
            Can be used simply as geometry.InHostUnits()
            </summary>
            <typeparam name="T"></typeparam>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.UnitConverter.ConvertToDynamoUnits``1(``0@)">
            <summary>
            Convert the geometry to Dynamo units if convert is true.
            The input geometry will be disposed and a converted geometry
            will be assigned to it.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryConversion.UnitConverter.ConvertToHostUnits``1(``0@)">
            <summary>
            Convert the geometry to host units if convert is true.
            The input geometry will be disposed and a converted geometry
            will be assigned to it.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryObjects.GeometryObjectSelector.ByReferenceStableRepresentation(System.String)">
            <summary>
            Return an AbstractGeometryObject given a string representation of the geometry's reference.
            </summary>
            <param name="referenceString"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryObjects.GeometryObjectSelector.RequiresTransform(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            
                Determine if the Geometry extracted from a FamilyInstance requires transformation.
            
                Bizarrely, some FamilyInstance's geom is transformed and some not when obtained
                from GetGeometryObjectFromReference.  This is because some need to be transformed
                to interact with adjacent geometry in the document.  This stop-gap, suggested by
                SC in the Revit API team, checks if there are any non-empty GeometryInstances in 
                FamilyInstance's geometry.  Apparently this is a good heuristic for checking if
                the geometry requires a transform or not.
            
            </summary>
            <param name="familyInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.GeometryObjects.GeometryObjectSelector.RequiresTransform(Autodesk.Revit.DB.ImportInstance)">
            <summary>
            This is a workaround. Revit experts are positive about this.
            </summary>
            <param name="importInstance"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.GeometryReferences.ElementGeometryReference">
            <summary>
            A base class for revit Reference objects
            </summary>
        </member>
        <member name="P:Revit.GeometryReferences.ElementGeometryReference.InternalReference">
            <summary>
            A stable reference to a Revit Element's geometry
            </summary>
        </member>
        <member name="T:Revit.GeometryReferences.ElementFaceReference">
            <summary>
            A stable reference to a Revit Face, usually derived from a Revit Element
            </summary>
            See: http://revitapisearch.com.s3-website-us-east-1.amazonaws.com/html/f3d5d2fe-96bf-8528-4628-78d8d5e6705f.htm
        </member>
        <member name="T:Revit.GeometryReferences.ElementCurveReference">
            <summary>
            A stable reference to a Revit curve derived from a Revit Element
            </summary>
            See: http://revitapisearch.com.s3-website-us-east-1.amazonaws.com/html/d5e10517-24fa-4627-43be-8981746d30c8.htm
        </member>
        <member name="M:Revit.GeometryReferences.ElementCurveReference.TryGetCurveReference(System.Object,System.String)">
            <summary>
            Attempt to extract a CurveReference from an object which may be a Revit.References.CurveReference, Revit.Elements.CurveElement, or Revit.Elements.Element
            </summary>
            <param name="curveObject"></param>
            <param name="nodeTypeString"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.GeometryReferences.ElementPlaneReference">
            <summary>
            A Reference to a plane extracted from a Revit ELement
            </summary>
        </member>
        <member name="M:Revit.References.RayBounce.ByOriginDirection(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,System.Int32,Revit.Elements.Views.View3D)">
            <summary>
            Returns positions and elements hit by ray bounce from the specified origin point and direction
            </summary>
            <param name="origin"></param>
            <param name="direction"></param>
            <param name="maxBounces"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.References.RayBounce.FindClosestReference(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ReferenceWithContext})">
            <summary>
            Find the first intersection with a face
            </summary>
            <param name="references"></param>
            <returns></returns>
        </member>
        <member name="F:Revit.Graphics.GraphicsManager.tesselationLevelOfDetail">
            <summary>
            Defines the global level of detail setting for 
            object tesselation
            </summary>
        </member>
        <member name="T:Revit.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.Adaptive_Component_Creation_Failed">
            <summary>
              Looks up a localized string similar to An adaptive component could not be found or created..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.AnalysisResultsDefaultDescription">
            <summary>
              Looks up a localized string similar to Analysis Results from Dynamo.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.AnalysisResultsDefaultName">
            <summary>
              Looks up a localized string similar to Dynamo Analysis Results.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.AreaSchemeArgumentException">
            <summary>
              Looks up a localized string similar to You must supply an Area Scheme..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.Array_Count_Mismatch">
            <summary>
              Looks up a localized string similar to The number of sample locations and samples is not equal..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.AttachedGroupLocation">
            <summary>
              Looks up a localized string similar to Cannot get location of attached group..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CannotGetBaseOrSurveyPoint">
            <summary>
              Looks up a localized string similar to Cannot get base or survey point from document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CategoryArgumentException">
            <summary>
              Looks up a localized string similar to You must supply a Category..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CategoryVisibilityOverrideError">
            <summary>
              Looks up a localized string similar to Specified View Template is not valid for this View..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CellForPanelNotFound">
            <summary>
              Looks up a localized string similar to Could not find cell for panel.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ChildElementsNotSupported">
            <summary>
              Looks up a localized string similar to Getting child elements is not supported for this type of Element..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CloseInputPolyCurveError">
            <summary>
              Looks up a localized string similar to The input PolyCurve is closed..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurtainGridNotFound">
            <summary>
              Looks up a localized string similar to Element has no Curtain Grid..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurtainGridReferenceError">
            <summary>
              Looks up a localized string similar to Reference should be to Face of the Element..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurtainPanelInternalElementError">
            <summary>
              Looks up a localized string similar to InternalElement of Curtain Panel is not Panel..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurtainPanelIsNotPlanar">
            <summary>
              Looks up a localized string similar to Curtain Panel is not planar.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurtainPanelIsNotRectangular">
            <summary>
              Looks up a localized string similar to Curtain Panel is not rectangular.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurtainPanelShouldRepresentRevitPanel">
            <summary>
              Looks up a localized string similar to Curtain Panel should represent Revit panel.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurtainSystemTypeNotFound">
            <summary>
              Looks up a localized string similar to Curtain System Type not found..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurveIsNotPlanar">
            <summary>
              Looks up a localized string similar to Curve ist not planar. Please supply a planar curve..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurveLoopNotClosed">
            <summary>
              Looks up a localized string similar to Curves do not form a closed loop..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurveNeedsTwoPoints">
            <summary>
              Looks up a localized string similar to Cannot create Curve By Points with less than two points..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurveReferenceExtractionDetail">
            <summary>
              Looks up a localized string similar to You supplied an {0}, but we could not extract a CurveReference from it!.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurveReferenceExtractionFailure">
            <summary>
              Looks up a localized string similar to {0} requires a ElementCurveReference extracted from a Revit Element! .
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurveReferenceFailure">
            <summary>
              Looks up a localized string similar to A Curve Reference can only be obtained from an Element..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurveReferenceHint">
            <summary>
              Looks up a localized string similar to You can use the {0} or {1} to turn this Curve into a Revit Element..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.CurveRequired">
            <summary>
              Looks up a localized string similar to Please supply a curve geometry..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.DirectShapeInvalidArgument">
            <summary>
              Looks up a localized string similar to Can only create DirectShapes from Solids, Surfaces or Meshes..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.DocumentDoesNotSupportGlobalParams">
            <summary>
              Looks up a localized string similar to Document does not support global parameters..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.DocumentNotFamilyDocument">
            <summary>
              Looks up a localized string similar to Document is not a valid Family Document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.DocumentNotWorkshared">
            <summary>
              Looks up a localized string similar to Current Document is not workshared.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.Dynamo_AVF_Data_Name">
            <summary>
              Looks up a localized string similar to Dynamo Data.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.DynamoSolidToRevitBRepFailure">
            <summary>
              Looks up a localized string similar to An unexpected failure occurred when attempting to convert the solid into a Revit BRep.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.DynamoSurfaceToRevitBRepFailure">
            <summary>
              Looks up a localized string similar to An unexpected failure occurred when attempting to convert the surface into a Revit BRep.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ElementCannotBeAnnotatedError">
            <summary>
              Looks up a localized string similar to Element cannot be annotated.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ElementTypeNameNotFound">
            <summary>
              Looks up a localized string similar to There is no ElementType of the given name in the current Document.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.EmptyView">
            <summary>
              Looks up a localized string similar to Cannot place empty view on sheet..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.EndPointListEmpty">
            <summary>
              Looks up a localized string similar to End point list is empty.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.EndPointListHasNulls">
            <summary>
              Looks up a localized string similar to End point list contains null elements.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ExportOptionsArgumentException">
            <summary>
              Looks up a localized string similar to Invalid Schedule Export Options..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FaceReferenceExtractionDetail">
            <summary>
              Looks up a localized string similar to You supplied an {0}, but we could not extract a ElementFaceReference from it!.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FaceReferenceExtractionFailure">
            <summary>
              Looks up a localized string similar to {0} requires a ElementFaceReference extracted from a Revit Element! .
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FaceReferenceFailure">
            <summary>
              Looks up a localized string similar to A Face Reference can only be obtained from an Element..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FaceReferenceHint">
            <summary>
              Looks up a localized string similar to You can use the {0} to turn this Surface into a Revit Element, then extract a ElementFaceReference from it..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FamilyInstanceCreationFailure">
            <summary>
              Looks up a localized string similar to Could not create the FamilyInstance.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FamilyNotFound">
            <summary>
              Looks up a localized string similar to A family with the specified name, {0}, could not be found in the document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FamilySymbolNotFound1">
            <summary>
              Looks up a localized string similar to A FamilySymbol with the specified name does not exist in the document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FamilySymbolNotFound2">
            <summary>
              Looks up a localized string similar to A FamilySymbol with the specified name, {0}, does not exist in the Family..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FamilySymbolNotFound3">
            <summary>
              Looks up a localized string similar to A FamilySymbol with the specified name, {0}, does not exist in the document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FamilyTypeDoesNotExist">
            <summary>
              Looks up a localized string similar to Family type does not exist in the document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FileNotFound">
            <summary>
              Looks up a localized string similar to The file could not be found at: {0}.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.FloorTypeNotFound">
            <summary>
              Looks up a localized string similar to A Revit FloorType with that name could not be located in the document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.GeometryConversionFailure">
            <summary>
              Looks up a localized string similar to One or more geometries have failed to convert due to this error: .
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.GeometryObjectReferenceFailure">
            <summary>
              Looks up a localized string similar to Could not get a geometry object from the current document using the provided reference.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.GridCreationFailure">
            <summary>
              Looks up a localized string similar to A Grid Element can only be created in a Revit Project..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InputParamsMismatch">
            <summary>
              Looks up a localized string similar to The input list of parameters does not have the same number of values required by the adaptive component..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InputPointParamsMismatch">
            <summary>
              Looks up a localized string similar to The input list of points does not have the same number of values required by the adaptive component..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InputUVParamsMismatch">
            <summary>
              Looks up a localized string similar to The input list of UVs does not have the same number of values required by the adaptive component..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InstanceImportFailure">
            <summary>
              Looks up a localized string similar to Could not obtain ImportInstance from imported Element.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidCategory">
            <summary>
              Looks up a localized string similar to The selected category is not valid in this document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidColumnBaseLocation">
            <summary>
              Looks up a localized string similar to The end of the curve for creating a column should be above the start of the curve..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidElementId">
            <summary>
              Looks up a localized string similar to Id is not a valid ElementId, GUID, string or int..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidElementLocation">
            <summary>
              Looks up a localized string similar to The location of the structural element is not a valid curve..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidEndPointList">
            <summary>
              Looks up a localized string similar to Invalid end point list.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidFace">
            <summary>
              Looks up a localized string similar to The selected face cannot be used to create a wall. Please use a mass face instead..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidFilterType">
            <summary>
              Looks up a localized string similar to FilterType is not valid..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidGroupType">
            <summary>
              Looks up a localized string similar to {0} is not a valid GroupType..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidHost">
            <summary>
              Looks up a localized string similar to Element does not have a host..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidPathOfTravel">
            <summary>
              Looks up a localized string similar to Invalid PathOfTravel element..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidShapeEditor">
            <summary>
              Looks up a localized string similar to Floor Shape cannot be edited..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidStartPointList">
            <summary>
              Looks up a localized string similar to Invalid start point list..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidSwitchJoinOrder">
            <summary>
              Looks up a localized string similar to Geometry join order can only be switched when the elements are already joined..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidView">
            <summary>
              Looks up a localized string similar to Invalid view..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.InvalidWallHeight">
            <summary>
              Looks up a localized string similar to The height must be greater than 0 and less that 30000 ft.  You provided a height of {0} ft..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.MaterialNotFound">
            <summary>
              Looks up a localized string similar to A Material with the given name does not exist in the current Document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ModelTextCreationFailure">
            <summary>
              Looks up a localized string similar to ModelText Elements can only be created in a Family Document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ModelTextTypeNotFound">
            <summary>
              Looks up a localized string similar to There is no ModelTextType of the name, {0}, in the current Document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.MullionParseError">
            <summary>
              Looks up a localized string similar to Mullion should represent Revit&apos;s Mullion..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.MultipleCurvesIntroducedAfterConversion">
            <summary>
              Looks up a localized string similar to There are multiple curves converted from the input curve element..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.MultipleSurfacesIntroducedAfterConversion">
            <summary>
              Looks up a localized string similar to There are multiple surfaces converted from the input face..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NameAlreadyInUse">
            <summary>
              Looks up a localized string similar to Name already in use..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NameArgumentException">
            <summary>
              Looks up a localized string similar to You must supply a Name..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NoChildElements">
            <summary>
              Looks up a localized string similar to Element has no child Elements.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NoElementsToPurge">
            <summary>
              Looks up a localized string similar to No Elements to purge in the current document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NonIntersectingElements">
            <summary>
              Looks up a localized string similar to Elements are not intersecting.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NoParentElement">
            <summary>
              Looks up a localized string similar to Element has no parent component.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NoSharedParameterFileFound">
            <summary>
              Looks up a localized string similar to No shared parameter file found..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NoStructuralMaterialAssigned">
            <summary>
              Looks up a localized string similar to FloorType has no structural material assigned.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NotAdaptiveComponentError">
            <summary>
              Looks up a localized string similar to The FamilyInstance is not an adaptive component..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NotBuiltInCategory">
            <summary>
              Looks up a localized string similar to Element not valid. Use an element from a BuiltInCategory..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NotEnoughDataError">
            <summary>
              Looks up a localized string similar to You need at least two elements for a dimension..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NotHostElement">
            <summary>
              Looks up a localized string similar to Element is not a Host Element.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NotJoinedElements">
            <summary>
              Looks up a localized string similar to Cannot unjoin Elements that are not already joined..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NotPlanView">
            <summary>
              Looks up a localized string similar to The provided input view is not a plan view..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NotPositiveIntegerError">
            <summary>
              Looks up a localized string similar to {0} must be a positive integer.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NullInputCurvesError">
            <summary>
              Looks up a localized string similar to Some of the input curves are null..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.NumberOfDivisionsMustBeGreaterThan2">
            <summary>
              Looks up a localized string similar to The number of divisions must be greater than 2!.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.OpenInputPolyCurveError">
            <summary>
              Looks up a localized string similar to The input PolyCurve is not closed..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ParameterGroupNotFound">
            <summary>
              Looks up a localized string similar to Invalid parameter group..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ParameterNotFound">
            <summary>
              Looks up a localized string similar to No parameter found by that name..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ParameterStorageNotElement">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not an Element..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ParameterStorageNotInteger">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not an integer..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ParameterStorageNotNumber">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not a number..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ParameterStorageNotString">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not a string..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ParameterTypeNotFound">
            <summary>
              Looks up a localized string similar to Invalid parameter type..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ParameterWithoutStorageType">
            <summary>
              Looks up a localized string similar to Parameter {0} has no storage type..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.PointDataObsolete">
            <summary>
              Looks up a localized string similar to Use PointAnalysisDisplay.ByViewPointsAndValues instead..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.PointRequired">
            <summary>
              Looks up a localized string similar to Please supply a point geometry..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.PolyCurvesConversionError">
            <summary>
              Looks up a localized string similar to Revit does not support turning PolyCurves into ModelCurves. Try exploding your PolyCurve into multiple Curves..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ReferenceCurveCreationFailure">
            <summary>
              Looks up a localized string similar to Revit can only create a ReferenceCurve in a Family Document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ReferencePointCreationFailure">
            <summary>
              Looks up a localized string similar to ReferencePoint Elements can only be created in a Family Document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.RoofTypeNotFound">
            <summary>
              Looks up a localized string similar to Roof type not found..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.RoomsForLongestPathNotFound">
            <summary>
              Looks up a localized string similar to Rooms are required to compute longest Paths of Travel..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.SamplePointsMismatchError">
            <summary>
              Looks up a localized string similar to The number of sample points and number of samples must be the same..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ScheduleExportError">
            <summary>
              Looks up a localized string similar to There was an error exporting this schedule..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ScheduleTypeArgumentException">
            <summary>
              Looks up a localized string similar to Invalid Schedule Type..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.Sheet_NoViewsError">
            <summary>
              Looks up a localized string similar to Must supply more than 0 views.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.StartEndListSizeMismatch">
            <summary>
              Looks up a localized string similar to Size of start point array doesn&apos;t match size of end point array.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.StartPointListEmpty">
            <summary>
              Looks up a localized string similar to Start points list is empty.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.StartPointListHasNulls">
            <summary>
              Looks up a localized string similar to Start point list contains null elements.
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.SurfaceDataObsolete">
            <summary>
              Looks up a localized string similar to Use FaceAnalysisDisplay.ByViewFacePointsAndValues instead..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.Tag_Lookup_Error">
            <summary>
              Looks up a localized string similar to A Revit face with the corresponding tag could not be found..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.TopographyNeedsThreePoints">
            <summary>
              Looks up a localized string similar to A minimum of three points is required to create a topography surface..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.TypeNotFound">
            <summary>
              Looks up a localized string similar to Type not found in document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.VectorDataObsolete">
            <summary>
              Looks up a localized string similar to Use VectorAnalysisDisplay.ByViewPointsAndVectorValues instead..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.View_ExportAsImage_Path_Invalid">
            <summary>
              Looks up a localized string similar to The supplied path is invalid..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ViewAlreadyPlacedOnSheet">
            <summary>
              Looks up a localized string similar to Cannot place view on sheet as it is already on a sheet..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ViewDoesNotSupportAnnotations">
            <summary>
              Looks up a localized string similar to View does not support annotations..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ViewExportImageError">
            <summary>
              Looks up a localized string similar to There was an error exporting the image..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ViewExportImageLockedError">
            <summary>
              Looks up a localized string similar to Attempt to override existing image failed due to file lock. Please make sure that image is not currently open in another application..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ViewPlan_ViewFamilyNotFound">
            <summary>
              Looks up a localized string similar to Specified View Type could not be found..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.ViewUnsupportedScheduleType">
            <summary>
              Looks up a localized string similar to Provided Schedule Type is not supported..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.WallTypeNotFound">
            <summary>
              Looks up a localized string similar to There is no WallType of the given name in the current Document..
            </summary>
        </member>
        <member name="P:Revit.Properties.Resources.WrongStorageType">
            <summary>
              Looks up a localized string similar to Input value for this parameter needs to be of type {0}..
            </summary>
        </member>
        <member name="T:Revit.Schedules.SchedulableField">
            <summary>
                Revit Schedule Field
            </summary>
        </member>
        <member name="P:Revit.Schedules.SchedulableField.InternalSchedulableField">
            <summary>
                Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Schedules.SchedulableField.#ctor(Autodesk.Revit.DB.SchedulableField)">
            <summary>
                Internal constructor. Used by the public static constructor to construct an instance of the SchedulableField class.
            </summary>
            <param name="internalSchedulableField"></param>
        </member>
        <member name="P:Revit.Schedules.SchedulableField.Name">
            <summary>
                Name
            </summary>
        </member>
        <member name="T:Revit.Schedules.ScheduleExportOptions">
            <summary>
                View Schedule Export Options
            </summary>
        </member>
        <member name="P:Revit.Schedules.ScheduleExportOptions.InternalScheduleExportOptions">
            <summary>
                Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Schedules.ScheduleExportOptions.#ctor(Autodesk.Revit.DB.ViewScheduleExportOptions)">
            <summary>
                Reference to the Element
            </summary>
        </member>
        <member name="M:Revit.Schedules.ScheduleExportOptions.ByProperties(System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
                Creates View Schedule Export Options element.
            </summary>
            <param name="columnHeaders">How to export column headers. Default is MultipleRows.</param>
            <param name="fieldDelimiter">How to delimit fields. Default is Tab.</param>
            <param name="headersFootersBlanks">Whether to export group headers, footers, and blank lines. Default is false.</param>
            <param name="textQualifier">How to qualify text fields. Default is DoubleQuote.</param>
            <param name="title">Whether or not to export the schedule title. Default is false.</param>
            <returns name="exportOptions">View Schedule Export Options.</returns>
        </member>
        <member name="T:Revit.Schedules.ScheduleExportOptions.ExportColumnHeaders">
            <summary>
                Options for exporting column headers in schedule view export.
            </summary>
        </member>
        <member name="T:Revit.Schedules.ScheduleExportOptions.ExportTextQualifier">
            <summary>
                Options for the text qualifier character in schedule view export.
            </summary>
        </member>
        <member name="T:Revit.Schedules.ScheduleField">
            <summary>
                Revit Schedule Field
            </summary>
        </member>
        <member name="P:Revit.Schedules.ScheduleField.InternalScheduleField">
            <summary>
                Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Schedules.ScheduleField.#ctor(Autodesk.Revit.DB.ScheduleField)">
            <summary>
                Internal constructor. Used by the public static constructor to construct an instance of the ScheduleField class.
            </summary>
            <param name="internalScheduleField"></param>
        </member>
        <member name="P:Revit.Schedules.ScheduleField.Name">
            <summary>
                Name
            </summary>
        </member>
        <member name="T:Revit.Schedules.ScheduleFilter">
            <summary>
            Revit Schedule Filter
            </summary>
        </member>
        <member name="P:Revit.Schedules.ScheduleFilter.InternalScheduleFilter">
            <summary>
            Internal reference to the Revit Element
            </summary>
        </member>
        <member name="M:Revit.Schedules.ScheduleFilter.#ctor(Autodesk.Revit.DB.ScheduleFilter)">
            <summary>
            Reference to the Element
            </summary>
            <param name="internalScheduleFilter"></param>
        </member>
        <member name="M:Revit.Schedules.ScheduleFilter.ByFieldTypeAndValue(Revit.Schedules.ScheduleField,System.String,System.Object)">
            <summary>
            Creates Schedule Filter by Schedule Field, Filter Type and value.
            </summary>
            <param name="field">Schedule Field used for creating filter.</param>
            <param name="filterType">Filter type. Ex: Equal.</param>
            <param name="value">Value used by filter for comparison.</param>
            <returns name="ScheduleFilter">Schedule Filter</returns>
        </member>
        <member name="P:Revit.Schedules.ScheduleFilter.FilterType">
            <summary>
            Filter Type
            </summary>
        </member>
        <member name="P:Revit.Schedules.ScheduleFilter.FiledId">
            <summary>
            Related Schedule Field Id
            </summary>
        </member>
        <member name="P:Revit.Schedules.ScheduleFilter.Value">
            <summary>
            Value assigned to Schedule Filter
            </summary>
        </member>
        <member name="T:Revit.Transaction.Transaction">
            <summary>
                A Revit Transaction.
            </summary>
        </member>
        <member name="M:Revit.Transaction.Transaction.Start(System.Object)">
            <summary>
            Start a transaction if neccesssary, returning
            whatever was passed in.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Transaction.Transaction.End(System.Object)">
            <summary>
                Ends the current Dynamo transaction, returning whatever was
                passed in.
            </summary>
            <param name="input">An object.</param>
        </member>
        <member name="T:Nuclex.Game.Packing.CygonRectanglePacker">
            <summary>Packer using a custom algorithm by Markus 'Cygon' Ewald</summary>
            <remarks>
              <para>
                Algorithm conceived by Markus Ewald (cygon at nuclex dot org), though
                I'm quite sure I'm not the first one to come up with it :)
              </para>
              <para>
                The algorithm always places rectangles as low as possible in the packing
                area. So, for any new rectangle that is to be added, the packer has to
                determine the X coordinate at which the rectangle can have the lowest
                overall height without intersecting any other rectangles.
              </para>
              <para>
                To quickly discover these locations, the packer uses a sophisticated
                data structure that stores the upper silhouette of the packing area. When
                a new rectangle needs to be added, only the silouette edges need to be
                analyzed to find the position where the rectangle would achieve the lowest
                placement possible in the packing area.
              </para>
            </remarks>
        </member>
        <member name="T:Nuclex.Game.Packing.CygonRectanglePacker.SliceStartComparer">
            <summary>Compares the starting position of height slices</summary>
        </member>
        <member name="F:Nuclex.Game.Packing.CygonRectanglePacker.SliceStartComparer.Default">
            <summary>Provides a default instance for the anchor rank comparer</summary>
        </member>
        <member name="M:Nuclex.Game.Packing.CygonRectanglePacker.SliceStartComparer.Compare(Autodesk.Revit.DB.UV,Autodesk.Revit.DB.UV)">
            <summary>Compares the starting position of two height slices</summary>
            <param name="left">Left slice start that will be compared</param>
            <param name="right">Right slice start that will be compared</param>
            <returns>The relation of the two slice starts ranks to each other</returns>
        </member>
        <member name="M:Nuclex.Game.Packing.CygonRectanglePacker.#ctor(System.Double,System.Double)">
            <summary>Initializes a new rectangle packer</summary>
            <param name="packingAreaWidth">Maximum width of the packing area</param>
            <param name="packingAreaHeight">Maximum height of the packing area</param>
        </member>
        <member name="M:Nuclex.Game.Packing.CygonRectanglePacker.TryPack(System.Double,System.Double,Autodesk.Revit.DB.UV@)">
            <summary>Tries to allocate space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <param name="placement">Output parameter receiving the rectangle's placement</param>
            <returns>True if space for the rectangle could be allocated</returns>
        </member>
        <member name="M:Nuclex.Game.Packing.CygonRectanglePacker.tryFindBestPlacement(System.Double,System.Double,Autodesk.Revit.DB.UV@)">
            <summary>Finds the best position for a rectangle of the given dimensions</summary>
            <param name="rectangleWidth">Width of the rectangle to find a position for</param>
            <param name="rectangleHeight">Height of the rectangle to find a position for</param>
            <param name="placement">Receives the best placement found for the rectangle</param>
            <returns>True if a valid placement for the rectangle could be found</returns>
        </member>
        <member name="M:Nuclex.Game.Packing.CygonRectanglePacker.integrateRectangle(System.Double,System.Double,System.Double)">
            <summary>Integrates a new rectangle into the height slice table</summary>
            <param name="left">Position of the rectangle's left side</param>
            <param name="width">Width of the rectangle</param>
            <param name="bottom">Position of the rectangle's lower side</param>
        </member>
        <member name="F:Nuclex.Game.Packing.CygonRectanglePacker.heightSlices">
            <summary>Stores the height silhouette of the rectangles</summary>
        </member>
        <member name="T:Nuclex.Game.Packing.OutOfSpaceException">
            <summary>Insufficient space left in packing area to contain a given object</summary>
            <remarks>
              An exception being sent to you from deep space. Erm, no, wait, it's an exception
              that occurs when a packing algorithm runs out of space and is unable to fit
              the object you tried to pack into the remaining packing area.
            </remarks>
        </member>
        <member name="M:Nuclex.Game.Packing.OutOfSpaceException.#ctor">
            <summary>Initializes the exception</summary>
        </member>
        <member name="M:Nuclex.Game.Packing.OutOfSpaceException.#ctor(System.String)">
            <summary>Initializes the exception with an error message</summary>
            <param name="message">Error message describing the cause of the exception</param>
        </member>
        <member name="M:Nuclex.Game.Packing.OutOfSpaceException.#ctor(System.String,System.Exception)">
            <summary>Initializes the exception as a followup exception</summary>
            <param name="message">Error message describing the cause of the exception</param>
            <param name="inner">Preceding exception that has caused this exception</param>
        </member>
        <member name="M:Nuclex.Game.Packing.OutOfSpaceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes the exception from its serialized state</summary>
            <param name="info">Contains the serialized fields of the exception</param>
            <param name="context">Additional environmental informations</param>
        </member>
        <member name="T:Nuclex.Game.Packing.RectanglePacker">
            <summary>Base class for rectangle packing algorithms</summary>
            <remarks>
              <para>
                By uniting all rectangle packers under this common base class, you can
                easily switch between different algorithms to find the most efficient or
                performant one for a given job.
              </para>
              <para>
                An almost exhaustive list of packing algorithms can be found here:
                http://www.csc.liv.ac.uk/~epa/surveyhtml.html
              </para>
            </remarks>
        </member>
        <member name="M:Nuclex.Game.Packing.RectanglePacker.#ctor(System.Double,System.Double)">
            <summary>Initializes a new rectangle packer</summary>
            <param name="packingAreaWidth">Width of the packing area</param>
            <param name="packingAreaHeight">Height of the packing area</param>
        </member>
        <member name="M:Nuclex.Game.Packing.RectanglePacker.Pack(System.Double,System.Double)">
            <summary>Allocates space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <returns>The location at which the rectangle has been placed</returns>
        </member>
        <member name="M:Nuclex.Game.Packing.RectanglePacker.TryPack(System.Double,System.Double,Autodesk.Revit.DB.UV@)">
            <summary>Tries to allocate space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <param name="placement">Output parameter receiving the rectangle's placement</param>
            <returns>True if space for the rectangle could be allocated</returns>
        </member>
        <member name="P:Nuclex.Game.Packing.RectanglePacker.PackingAreaWidth">
            <summary>Maximum width the packing area is allowed to have</summary>
        </member>
        <member name="P:Nuclex.Game.Packing.RectanglePacker.PackingAreaHeight">
            <summary>Maximum height the packing area is allowed to have</summary>
        </member>
        <member name="F:Nuclex.Game.Packing.RectanglePacker.packingAreaWidth">
            <summary>Maximum allowed width of the packing area</summary>
        </member>
        <member name="F:Nuclex.Game.Packing.RectanglePacker.packingAreaHeight">
            <summary>Maximum allowed height of the packing area</summary>
        </member>
    </members>
</doc>
